
projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b060  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800b230  0800b230  0001b230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b664  0800b664  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b664  0800b664  0001b664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b66c  0800b66c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b66c  0800b66c  0001b66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b670  0800b670  0001b670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800b674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d4  200001f8  0800b86c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009cc  0800b86c  000209cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cbce  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c3d  00000000  00000000  0003cdf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  00040a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e0  00000000  00000000  000420d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a7e  00000000  00000000  000435b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dfe6  00000000  00000000  0006d02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f79fb  00000000  00000000  0008b014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00182a0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007140  00000000  00000000  00182a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b218 	.word	0x0800b218

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800b218 	.word	0x0800b218

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9bf 	b.w	8001028 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b974 	b.w	8001028 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	468e      	mov	lr, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d14d      	bne.n	8000e02 <__udivmoddi4+0xaa>
 8000d66:	428a      	cmp	r2, r1
 8000d68:	4694      	mov	ip, r2
 8000d6a:	d969      	bls.n	8000e40 <__udivmoddi4+0xe8>
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	b152      	cbz	r2, 8000d88 <__udivmoddi4+0x30>
 8000d72:	fa01 f302 	lsl.w	r3, r1, r2
 8000d76:	f1c2 0120 	rsb	r1, r2, #32
 8000d7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d82:	ea41 0e03 	orr.w	lr, r1, r3
 8000d86:	4094      	lsls	r4, r2
 8000d88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d8c:	0c21      	lsrs	r1, r4, #16
 8000d8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d92:	fa1f f78c 	uxth.w	r7, ip
 8000d96:	fb08 e316 	mls	r3, r8, r6, lr
 8000d9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9e:	fb06 f107 	mul.w	r1, r6, r7
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x64>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dae:	f080 811f 	bcs.w	8000ff0 <__udivmoddi4+0x298>
 8000db2:	4299      	cmp	r1, r3
 8000db4:	f240 811c 	bls.w	8000ff0 <__udivmoddi4+0x298>
 8000db8:	3e02      	subs	r6, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a5b      	subs	r3, r3, r1
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dcc:	fb00 f707 	mul.w	r7, r0, r7
 8000dd0:	42a7      	cmp	r7, r4
 8000dd2:	d90a      	bls.n	8000dea <__udivmoddi4+0x92>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ddc:	f080 810a 	bcs.w	8000ff4 <__udivmoddi4+0x29c>
 8000de0:	42a7      	cmp	r7, r4
 8000de2:	f240 8107 	bls.w	8000ff4 <__udivmoddi4+0x29c>
 8000de6:	4464      	add	r4, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dee:	1be4      	subs	r4, r4, r7
 8000df0:	2600      	movs	r6, #0
 8000df2:	b11d      	cbz	r5, 8000dfc <__udivmoddi4+0xa4>
 8000df4:	40d4      	lsrs	r4, r2
 8000df6:	2300      	movs	r3, #0
 8000df8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d909      	bls.n	8000e1a <__udivmoddi4+0xc2>
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	f000 80ef 	beq.w	8000fea <__udivmoddi4+0x292>
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e12:	4630      	mov	r0, r6
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	fab3 f683 	clz	r6, r3
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	d14a      	bne.n	8000eb8 <__udivmoddi4+0x160>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xd4>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 80f9 	bhi.w	800101e <__udivmoddi4+0x2c6>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	469e      	mov	lr, r3
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e0      	beq.n	8000dfc <__udivmoddi4+0xa4>
 8000e3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3e:	e7dd      	b.n	8000dfc <__udivmoddi4+0xa4>
 8000e40:	b902      	cbnz	r2, 8000e44 <__udivmoddi4+0xec>
 8000e42:	deff      	udf	#255	; 0xff
 8000e44:	fab2 f282 	clz	r2, r2
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	f040 8092 	bne.w	8000f72 <__udivmoddi4+0x21a>
 8000e4e:	eba1 010c 	sub.w	r1, r1, ip
 8000e52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e56:	fa1f fe8c 	uxth.w	lr, ip
 8000e5a:	2601      	movs	r6, #1
 8000e5c:	0c20      	lsrs	r0, r4, #16
 8000e5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e62:	fb07 1113 	mls	r1, r7, r3, r1
 8000e66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6a:	fb0e f003 	mul.w	r0, lr, r3
 8000e6e:	4288      	cmp	r0, r1
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x12c>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e7a:	d202      	bcs.n	8000e82 <__udivmoddi4+0x12a>
 8000e7c:	4288      	cmp	r0, r1
 8000e7e:	f200 80cb 	bhi.w	8001018 <__udivmoddi4+0x2c0>
 8000e82:	4643      	mov	r3, r8
 8000e84:	1a09      	subs	r1, r1, r0
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e94:	fb0e fe00 	mul.w	lr, lr, r0
 8000e98:	45a6      	cmp	lr, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x156>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea4:	d202      	bcs.n	8000eac <__udivmoddi4+0x154>
 8000ea6:	45a6      	cmp	lr, r4
 8000ea8:	f200 80bb 	bhi.w	8001022 <__udivmoddi4+0x2ca>
 8000eac:	4608      	mov	r0, r1
 8000eae:	eba4 040e 	sub.w	r4, r4, lr
 8000eb2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb6:	e79c      	b.n	8000df2 <__udivmoddi4+0x9a>
 8000eb8:	f1c6 0720 	rsb	r7, r6, #32
 8000ebc:	40b3      	lsls	r3, r6
 8000ebe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec6:	fa20 f407 	lsr.w	r4, r0, r7
 8000eca:	fa01 f306 	lsl.w	r3, r1, r6
 8000ece:	431c      	orrs	r4, r3
 8000ed0:	40f9      	lsrs	r1, r7
 8000ed2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ede:	0c20      	lsrs	r0, r4, #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eec:	fb08 f00e 	mul.w	r0, r8, lr
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef6:	d90b      	bls.n	8000f10 <__udivmoddi4+0x1b8>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f00:	f080 8088 	bcs.w	8001014 <__udivmoddi4+0x2bc>
 8000f04:	4288      	cmp	r0, r1
 8000f06:	f240 8085 	bls.w	8001014 <__udivmoddi4+0x2bc>
 8000f0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1a09      	subs	r1, r1, r0
 8000f12:	b2a4      	uxth	r4, r4
 8000f14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f18:	fb09 1110 	mls	r1, r9, r0, r1
 8000f1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f24:	458e      	cmp	lr, r1
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x1e2>
 8000f28:	eb1c 0101 	adds.w	r1, ip, r1
 8000f2c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f30:	d26c      	bcs.n	800100c <__udivmoddi4+0x2b4>
 8000f32:	458e      	cmp	lr, r1
 8000f34:	d96a      	bls.n	800100c <__udivmoddi4+0x2b4>
 8000f36:	3802      	subs	r0, #2
 8000f38:	4461      	add	r1, ip
 8000f3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f42:	eba1 010e 	sub.w	r1, r1, lr
 8000f46:	42a1      	cmp	r1, r4
 8000f48:	46c8      	mov	r8, r9
 8000f4a:	46a6      	mov	lr, r4
 8000f4c:	d356      	bcc.n	8000ffc <__udivmoddi4+0x2a4>
 8000f4e:	d053      	beq.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f50:	b15d      	cbz	r5, 8000f6a <__udivmoddi4+0x212>
 8000f52:	ebb3 0208 	subs.w	r2, r3, r8
 8000f56:	eb61 010e 	sbc.w	r1, r1, lr
 8000f5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f62:	40f1      	lsrs	r1, r6
 8000f64:	431f      	orrs	r7, r3
 8000f66:	e9c5 7100 	strd	r7, r1, [r5]
 8000f6a:	2600      	movs	r6, #0
 8000f6c:	4631      	mov	r1, r6
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	f1c2 0320 	rsb	r3, r2, #32
 8000f76:	40d8      	lsrs	r0, r3
 8000f78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f80:	4091      	lsls	r1, r2
 8000f82:	4301      	orrs	r1, r0
 8000f84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f88:	fa1f fe8c 	uxth.w	lr, ip
 8000f8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f90:	fb07 3610 	mls	r6, r7, r0, r3
 8000f94:	0c0b      	lsrs	r3, r1, #16
 8000f96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9e:	429e      	cmp	r6, r3
 8000fa0:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa4:	d908      	bls.n	8000fb8 <__udivmoddi4+0x260>
 8000fa6:	eb1c 0303 	adds.w	r3, ip, r3
 8000faa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fae:	d22f      	bcs.n	8001010 <__udivmoddi4+0x2b8>
 8000fb0:	429e      	cmp	r6, r3
 8000fb2:	d92d      	bls.n	8001010 <__udivmoddi4+0x2b8>
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	4463      	add	r3, ip
 8000fb8:	1b9b      	subs	r3, r3, r6
 8000fba:	b289      	uxth	r1, r1
 8000fbc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fc0:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc8:	fb06 f30e 	mul.w	r3, r6, lr
 8000fcc:	428b      	cmp	r3, r1
 8000fce:	d908      	bls.n	8000fe2 <__udivmoddi4+0x28a>
 8000fd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd8:	d216      	bcs.n	8001008 <__udivmoddi4+0x2b0>
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d914      	bls.n	8001008 <__udivmoddi4+0x2b0>
 8000fde:	3e02      	subs	r6, #2
 8000fe0:	4461      	add	r1, ip
 8000fe2:	1ac9      	subs	r1, r1, r3
 8000fe4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe8:	e738      	b.n	8000e5c <__udivmoddi4+0x104>
 8000fea:	462e      	mov	r6, r5
 8000fec:	4628      	mov	r0, r5
 8000fee:	e705      	b.n	8000dfc <__udivmoddi4+0xa4>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	e6e3      	b.n	8000dbc <__udivmoddi4+0x64>
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	e6f8      	b.n	8000dea <__udivmoddi4+0x92>
 8000ff8:	454b      	cmp	r3, r9
 8000ffa:	d2a9      	bcs.n	8000f50 <__udivmoddi4+0x1f8>
 8000ffc:	ebb9 0802 	subs.w	r8, r9, r2
 8001000:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001004:	3801      	subs	r0, #1
 8001006:	e7a3      	b.n	8000f50 <__udivmoddi4+0x1f8>
 8001008:	4646      	mov	r6, r8
 800100a:	e7ea      	b.n	8000fe2 <__udivmoddi4+0x28a>
 800100c:	4620      	mov	r0, r4
 800100e:	e794      	b.n	8000f3a <__udivmoddi4+0x1e2>
 8001010:	4640      	mov	r0, r8
 8001012:	e7d1      	b.n	8000fb8 <__udivmoddi4+0x260>
 8001014:	46d0      	mov	r8, sl
 8001016:	e77b      	b.n	8000f10 <__udivmoddi4+0x1b8>
 8001018:	3b02      	subs	r3, #2
 800101a:	4461      	add	r1, ip
 800101c:	e732      	b.n	8000e84 <__udivmoddi4+0x12c>
 800101e:	4630      	mov	r0, r6
 8001020:	e709      	b.n	8000e36 <__udivmoddi4+0xde>
 8001022:	4464      	add	r4, ip
 8001024:	3802      	subs	r0, #2
 8001026:	e742      	b.n	8000eae <__udivmoddi4+0x156>

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af04      	add	r7, sp, #16
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <BMP280_Read8+0x38>)
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	b29a      	uxth	r2, r3
 8001042:	230a      	movs	r3, #10
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	2301      	movs	r3, #1
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	f107 030f 	add.w	r3, r7, #15
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	21ec      	movs	r1, #236	; 0xec
 8001054:	f002 fe7a 	bl	8003d4c <HAL_I2C_Mem_Read>
  return tmp;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000214 	.word	0x20000214

08001068 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af04      	add	r7, sp, #16
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <BMP280_Read16+0x40>)
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	b29a      	uxth	r2, r3
 800107a:	230a      	movs	r3, #10
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	2302      	movs	r3, #2
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	21ec      	movs	r1, #236	; 0xec
 800108c:	f002 fe5e 	bl	8003d4c <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8001090:	7b3b      	ldrb	r3, [r7, #12]
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	b21a      	sxth	r2, r3
 8001096:	7b7b      	ldrb	r3, [r7, #13]
 8001098:	b21b      	sxth	r3, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	b21b      	sxth	r3, r3
 800109e:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000214 	.word	0x20000214

080010ac <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ffd5 	bl	8001068 <BMP280_Read16>
 80010be:	4603      	mov	r3, r0
 80010c0:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 80010c2:	89fb      	ldrh	r3, [r7, #14]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	89fb      	ldrh	r3, [r7, #14]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	b29b      	uxth	r3, r3
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af04      	add	r7, sp, #16
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <BMP280_Write8+0x34>)
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	230a      	movs	r3, #10
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1dbb      	adds	r3, r7, #6
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	21ec      	movs	r1, #236	; 0xec
 8001108:	f002 fd0c 	bl	8003b24 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000214 	.word	0x20000214

08001118 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af04      	add	r7, sp, #16
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <BMP280_Read24+0x40>)
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	b29a      	uxth	r2, r3
 800112a:	230a      	movs	r3, #10
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	2303      	movs	r3, #3
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	21ec      	movs	r1, #236	; 0xec
 800113c:	f002 fe06 	bl	8003d4c <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001140:	7b3b      	ldrb	r3, [r7, #12]
 8001142:	041a      	lsls	r2, r3, #16
 8001144:	7b7b      	ldrb	r3, [r7, #13]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	4313      	orrs	r3, r2
 800114a:	7bba      	ldrb	r2, [r7, #14]
 800114c:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000214 	.word	0x20000214

0800115c <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	4608      	mov	r0, r1
 8001166:	4611      	mov	r1, r2
 8001168:	461a      	mov	r2, r3
 800116a:	4603      	mov	r3, r0
 800116c:	70fb      	strb	r3, [r7, #3]
 800116e:	460b      	mov	r3, r1
 8001170:	70bb      	strb	r3, [r7, #2]
 8001172:	4613      	mov	r3, r2
 8001174:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 8001176:	4a48      	ldr	r2, [pc, #288]	; (8001298 <BMP280_Init+0x13c>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	2b03      	cmp	r3, #3
 8001180:	d901      	bls.n	8001186 <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 8001182:	2303      	movs	r3, #3
 8001184:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 8001186:	4a45      	ldr	r2, [pc, #276]	; (800129c <BMP280_Init+0x140>)
 8001188:	787b      	ldrb	r3, [r7, #1]
 800118a:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 800118c:	787b      	ldrb	r3, [r7, #1]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d101      	bne.n	8001196 <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 8001192:	2300      	movs	r3, #0
 8001194:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	2b05      	cmp	r3, #5
 800119a:	d901      	bls.n	80011a0 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 800119c:	2305      	movs	r3, #5
 800119e:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80011a0:	4a3f      	ldr	r2, [pc, #252]	; (80012a0 <BMP280_Init+0x144>)
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80011a6:	78bb      	ldrb	r3, [r7, #2]
 80011a8:	2b05      	cmp	r3, #5
 80011aa:	d901      	bls.n	80011b0 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80011ac:	2305      	movs	r3, #5
 80011ae:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80011b0:	4a3c      	ldr	r2, [pc, #240]	; (80012a4 <BMP280_Init+0x148>)
 80011b2:	78bb      	ldrb	r3, [r7, #2]
 80011b4:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80011b6:	bf00      	nop
 80011b8:	20d0      	movs	r0, #208	; 0xd0
 80011ba:	f7ff ff37 	bl	800102c <BMP280_Read8>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b58      	cmp	r3, #88	; 0x58
 80011c2:	d1f9      	bne.n	80011b8 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80011c4:	2088      	movs	r0, #136	; 0x88
 80011c6:	f7ff ff71 	bl	80010ac <BMP280_Read16LE>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <BMP280_Init+0x14c>)
 80011d0:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 80011d2:	208a      	movs	r0, #138	; 0x8a
 80011d4:	f7ff ff6a 	bl	80010ac <BMP280_Read16LE>
 80011d8:	4603      	mov	r3, r0
 80011da:	b21a      	sxth	r2, r3
 80011dc:	4b33      	ldr	r3, [pc, #204]	; (80012ac <BMP280_Init+0x150>)
 80011de:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 80011e0:	208c      	movs	r0, #140	; 0x8c
 80011e2:	f7ff ff63 	bl	80010ac <BMP280_Read16LE>
 80011e6:	4603      	mov	r3, r0
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <BMP280_Init+0x154>)
 80011ec:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 80011ee:	208e      	movs	r0, #142	; 0x8e
 80011f0:	f7ff ff5c 	bl	80010ac <BMP280_Read16LE>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b2e      	ldr	r3, [pc, #184]	; (80012b4 <BMP280_Init+0x158>)
 80011fa:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80011fc:	2090      	movs	r0, #144	; 0x90
 80011fe:	f7ff ff55 	bl	80010ac <BMP280_Read16LE>
 8001202:	4603      	mov	r3, r0
 8001204:	b21a      	sxth	r2, r3
 8001206:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <BMP280_Init+0x15c>)
 8001208:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 800120a:	2092      	movs	r0, #146	; 0x92
 800120c:	f7ff ff4e 	bl	80010ac <BMP280_Read16LE>
 8001210:	4603      	mov	r3, r0
 8001212:	b21a      	sxth	r2, r3
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <BMP280_Init+0x160>)
 8001216:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001218:	2094      	movs	r0, #148	; 0x94
 800121a:	f7ff ff47 	bl	80010ac <BMP280_Read16LE>
 800121e:	4603      	mov	r3, r0
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <BMP280_Init+0x164>)
 8001224:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8001226:	2096      	movs	r0, #150	; 0x96
 8001228:	f7ff ff40 	bl	80010ac <BMP280_Read16LE>
 800122c:	4603      	mov	r3, r0
 800122e:	b21a      	sxth	r2, r3
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <BMP280_Init+0x168>)
 8001232:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001234:	2098      	movs	r0, #152	; 0x98
 8001236:	f7ff ff39 	bl	80010ac <BMP280_Read16LE>
 800123a:	4603      	mov	r3, r0
 800123c:	b21a      	sxth	r2, r3
 800123e:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <BMP280_Init+0x16c>)
 8001240:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001242:	209a      	movs	r0, #154	; 0x9a
 8001244:	f7ff ff32 	bl	80010ac <BMP280_Read16LE>
 8001248:	4603      	mov	r3, r0
 800124a:	b21a      	sxth	r2, r3
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <BMP280_Init+0x170>)
 800124e:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001250:	209c      	movs	r0, #156	; 0x9c
 8001252:	f7ff ff2b 	bl	80010ac <BMP280_Read16LE>
 8001256:	4603      	mov	r3, r0
 8001258:	b21a      	sxth	r2, r3
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <BMP280_Init+0x174>)
 800125c:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 800125e:	209e      	movs	r0, #158	; 0x9e
 8001260:	f7ff ff24 	bl	80010ac <BMP280_Read16LE>
 8001264:	4603      	mov	r3, r0
 8001266:	b21a      	sxth	r2, r3
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <BMP280_Init+0x178>)
 800126a:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	015b      	lsls	r3, r3, #5
 8001270:	b25a      	sxtb	r2, r3
 8001272:	78bb      	ldrb	r3, [r7, #2]
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	b25b      	sxtb	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b25a      	sxtb	r2, r3
 800127c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001280:	4313      	orrs	r3, r2
 8001282:	b25b      	sxtb	r3, r3
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4619      	mov	r1, r3
 8001288:	20f4      	movs	r0, #244	; 0xf4
 800128a:	f7ff ff29 	bl	80010e0 <BMP280_Write8>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000214 	.word	0x20000214
 800129c:	2000021a 	.word	0x2000021a
 80012a0:	20000218 	.word	0x20000218
 80012a4:	20000219 	.word	0x20000219
 80012a8:	20000230 	.word	0x20000230
 80012ac:	2000021c 	.word	0x2000021c
 80012b0:	2000021e 	.word	0x2000021e
 80012b4:	20000232 	.word	0x20000232
 80012b8:	20000220 	.word	0x20000220
 80012bc:	20000222 	.word	0x20000222
 80012c0:	20000224 	.word	0x20000224
 80012c4:	20000226 	.word	0x20000226
 80012c8:	20000228 	.word	0x20000228
 80012cc:	2000022a 	.word	0x2000022a
 80012d0:	2000022c 	.word	0x2000022c
 80012d4:	2000022e 	.word	0x2000022e

080012d8 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 80012de:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <BMP280_ReadTemperature+0xfc>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d16d      	bne.n	80013c2 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 80012e6:	20f4      	movs	r0, #244	; 0xf4
 80012e8:	f7ff fea0 	bl	800102c <BMP280_Read8>
 80012ec:	4603      	mov	r3, r0
 80012ee:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	f023 0303 	bic.w	r3, r3, #3
 80012f6:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001300:	7dfb      	ldrb	r3, [r7, #23]
 8001302:	4619      	mov	r1, r3
 8001304:	20f4      	movs	r0, #244	; 0xf4
 8001306:	f7ff feeb 	bl	80010e0 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800130a:	20f4      	movs	r0, #244	; 0xf4
 800130c:	f7ff fe8e 	bl	800102c <BMP280_Read8>
 8001310:	4603      	mov	r3, r0
 8001312:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001314:	7dbb      	ldrb	r3, [r7, #22]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 800131c:	7dbb      	ldrb	r3, [r7, #22]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d14f      	bne.n	80013c2 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001322:	20f4      	movs	r0, #244	; 0xf4
 8001324:	f7ff fe82 	bl	800102c <BMP280_Read8>
 8001328:	4603      	mov	r3, r0
 800132a:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 800132c:	7dbb      	ldrb	r3, [r7, #22]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001334:	7dbb      	ldrb	r3, [r7, #22]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d000      	beq.n	800133c <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800133a:	e7f2      	b.n	8001322 <BMP280_ReadTemperature+0x4a>
				  break;
 800133c:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 800133e:	20fa      	movs	r0, #250	; 0xfa
 8001340:	f7ff feea 	bl	8001118 <BMP280_Read24>
 8001344:	4603      	mov	r3, r0
 8001346:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	111b      	asrs	r3, r3, #4
 800134c:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	10da      	asrs	r2, r3, #3
 8001352:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <BMP280_ReadTemperature+0x100>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800135a:	4a20      	ldr	r2, [pc, #128]	; (80013dc <BMP280_ReadTemperature+0x104>)
 800135c:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001360:	fb02 f303 	mul.w	r3, r2, r3
 8001364:	12db      	asrs	r3, r3, #11
 8001366:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	111b      	asrs	r3, r3, #4
 800136c:	4a1a      	ldr	r2, [pc, #104]	; (80013d8 <BMP280_ReadTemperature+0x100>)
 800136e:	8812      	ldrh	r2, [r2, #0]
 8001370:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	1112      	asrs	r2, r2, #4
 8001376:	4918      	ldr	r1, [pc, #96]	; (80013d8 <BMP280_ReadTemperature+0x100>)
 8001378:	8809      	ldrh	r1, [r1, #0]
 800137a:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800137c:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001380:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8001382:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <BMP280_ReadTemperature+0x108>)
 8001384:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001388:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800138c:	139b      	asrs	r3, r3, #14
 800138e:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	4413      	add	r3, r2
 8001396:	4a13      	ldr	r2, [pc, #76]	; (80013e4 <BMP280_ReadTemperature+0x10c>)
 8001398:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <BMP280_ReadTemperature+0x10c>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	3380      	adds	r3, #128	; 0x80
 80013a6:	121b      	asrs	r3, r3, #8
 80013a8:	ee07 3a90 	vmov	s15, r3
 80013ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b0:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80013b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b8:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80013e8 <BMP280_ReadTemperature+0x110>
 80013bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013c0:	e001      	b.n	80013c6 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 80013c2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80013ec <BMP280_ReadTemperature+0x114>
}
 80013c6:	eef0 7a47 	vmov.f32	s15, s14
 80013ca:	eeb0 0a67 	vmov.f32	s0, s15
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000021a 	.word	0x2000021a
 80013d8:	20000230 	.word	0x20000230
 80013dc:	2000021c 	.word	0x2000021c
 80013e0:	2000021e 	.word	0x2000021e
 80013e4:	20000234 	.word	0x20000234
 80013e8:	42c80000 	.word	0x42c80000
 80013ec:	c2c60000 	.word	0xc2c60000

080013f0 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 80013f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013f4:	b0cc      	sub	sp, #304	; 0x130
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80013fc:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8001400:	f7ff ff6a 	bl	80012d8 <BMP280_ReadTemperature>
 8001404:	eef0 7a40 	vmov.f32	s15, s0
 8001408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800140c:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8001410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001414:	edd3 7a00 	vldr	s15, [r3]
 8001418:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 80016e8 <BMP280_ReadTemperatureAndPressure+0x2f8>
 800141c:	eef4 7a47 	vcmp.f32	s15, s14
 8001420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001424:	d101      	bne.n	800142a <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 8001426:	23ff      	movs	r3, #255	; 0xff
 8001428:	e2bf      	b.n	80019aa <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 800142a:	20f7      	movs	r0, #247	; 0xf7
 800142c:	f7ff fe74 	bl	8001118 <BMP280_Read24>
 8001430:	4603      	mov	r3, r0
 8001432:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  adc_P >>= 4;
 8001436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800143a:	111b      	asrs	r3, r3, #4
 800143c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8001440:	4baa      	ldr	r3, [pc, #680]	; (80016ec <BMP280_ReadTemperatureAndPressure+0x2fc>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	17da      	asrs	r2, r3, #31
 8001446:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800144a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800144e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001452:	460b      	mov	r3, r1
 8001454:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001458:	64bb      	str	r3, [r7, #72]	; 0x48
 800145a:	4613      	mov	r3, r2
 800145c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001460:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001462:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001466:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 800146a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800146e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001472:	fb03 f102 	mul.w	r1, r3, r2
 8001476:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800147a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800147e:	fb02 f303 	mul.w	r3, r2, r3
 8001482:	18ca      	adds	r2, r1, r3
 8001484:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001488:	fba3 4503 	umull	r4, r5, r3, r3
 800148c:	1953      	adds	r3, r2, r5
 800148e:	461d      	mov	r5, r3
 8001490:	4b97      	ldr	r3, [pc, #604]	; (80016f0 <BMP280_ReadTemperatureAndPressure+0x300>)
 8001492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001496:	b21b      	sxth	r3, r3
 8001498:	17da      	asrs	r2, r3, #31
 800149a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800149e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80014a2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80014a6:	4603      	mov	r3, r0
 80014a8:	fb03 f205 	mul.w	r2, r3, r5
 80014ac:	460b      	mov	r3, r1
 80014ae:	fb04 f303 	mul.w	r3, r4, r3
 80014b2:	4413      	add	r3, r2
 80014b4:	4602      	mov	r2, r0
 80014b6:	fba4 8902 	umull	r8, r9, r4, r2
 80014ba:	444b      	add	r3, r9
 80014bc:	4699      	mov	r9, r3
 80014be:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 80014c2:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 80014c6:	4b8b      	ldr	r3, [pc, #556]	; (80016f4 <BMP280_ReadTemperatureAndPressure+0x304>)
 80014c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	17da      	asrs	r2, r3, #31
 80014d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80014d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014dc:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80014e0:	462a      	mov	r2, r5
 80014e2:	fb02 f203 	mul.w	r2, r2, r3
 80014e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014ea:	4621      	mov	r1, r4
 80014ec:	fb01 f303 	mul.w	r3, r1, r3
 80014f0:	441a      	add	r2, r3
 80014f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014f6:	4621      	mov	r1, r4
 80014f8:	fba3 ab01 	umull	sl, fp, r3, r1
 80014fc:	eb02 030b 	add.w	r3, r2, fp
 8001500:	469b      	mov	fp, r3
 8001502:	f04f 0000 	mov.w	r0, #0
 8001506:	f04f 0100 	mov.w	r1, #0
 800150a:	ea4f 414b 	mov.w	r1, fp, lsl #17
 800150e:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001512:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001516:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800151a:	1814      	adds	r4, r2, r0
 800151c:	643c      	str	r4, [r7, #64]	; 0x40
 800151e:	414b      	adcs	r3, r1
 8001520:	647b      	str	r3, [r7, #68]	; 0x44
 8001522:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001526:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 800152a:	4b73      	ldr	r3, [pc, #460]	; (80016f8 <BMP280_ReadTemperatureAndPressure+0x308>)
 800152c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001530:	b21b      	sxth	r3, r3
 8001532:	17da      	asrs	r2, r3, #31
 8001534:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001538:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800153c:	f04f 0000 	mov.w	r0, #0
 8001540:	f04f 0100 	mov.w	r1, #0
 8001544:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001548:	00d9      	lsls	r1, r3, #3
 800154a:	2000      	movs	r0, #0
 800154c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001550:	1814      	adds	r4, r2, r0
 8001552:	63bc      	str	r4, [r7, #56]	; 0x38
 8001554:	414b      	adcs	r3, r1
 8001556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001558:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800155c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001560:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001564:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001568:	fb03 f102 	mul.w	r1, r3, r2
 800156c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001570:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001574:	fb02 f303 	mul.w	r3, r2, r3
 8001578:	18ca      	adds	r2, r1, r3
 800157a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800157e:	fba3 1303 	umull	r1, r3, r3, r3
 8001582:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001586:	460b      	mov	r3, r1
 8001588:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800158c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001590:	18d3      	adds	r3, r2, r3
 8001592:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001596:	4b59      	ldr	r3, [pc, #356]	; (80016fc <BMP280_ReadTemperatureAndPressure+0x30c>)
 8001598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159c:	b21b      	sxth	r3, r3
 800159e:	17da      	asrs	r2, r3, #31
 80015a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80015a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80015a8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80015ac:	462b      	mov	r3, r5
 80015ae:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80015b2:	4642      	mov	r2, r8
 80015b4:	fb02 f203 	mul.w	r2, r2, r3
 80015b8:	464b      	mov	r3, r9
 80015ba:	4621      	mov	r1, r4
 80015bc:	fb01 f303 	mul.w	r3, r1, r3
 80015c0:	4413      	add	r3, r2
 80015c2:	4622      	mov	r2, r4
 80015c4:	4641      	mov	r1, r8
 80015c6:	fba2 1201 	umull	r1, r2, r2, r1
 80015ca:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80015ce:	460a      	mov	r2, r1
 80015d0:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80015d4:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80015d8:	4413      	add	r3, r2
 80015da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015de:	f04f 0000 	mov.w	r0, #0
 80015e2:	f04f 0100 	mov.w	r1, #0
 80015e6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80015ea:	4623      	mov	r3, r4
 80015ec:	0a18      	lsrs	r0, r3, #8
 80015ee:	462b      	mov	r3, r5
 80015f0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015f4:	462b      	mov	r3, r5
 80015f6:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 80015f8:	4b41      	ldr	r3, [pc, #260]	; (8001700 <BMP280_ReadTemperatureAndPressure+0x310>)
 80015fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fe:	b21b      	sxth	r3, r3
 8001600:	17da      	asrs	r2, r3, #31
 8001602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001606:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800160a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800160e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001612:	464a      	mov	r2, r9
 8001614:	fb02 f203 	mul.w	r2, r2, r3
 8001618:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800161c:	4644      	mov	r4, r8
 800161e:	fb04 f303 	mul.w	r3, r4, r3
 8001622:	441a      	add	r2, r3
 8001624:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001628:	4644      	mov	r4, r8
 800162a:	fba3 4304 	umull	r4, r3, r3, r4
 800162e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001632:	4623      	mov	r3, r4
 8001634:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800163c:	18d3      	adds	r3, r2, r3
 800163e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800164e:	464c      	mov	r4, r9
 8001650:	0323      	lsls	r3, r4, #12
 8001652:	4644      	mov	r4, r8
 8001654:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001658:	4644      	mov	r4, r8
 800165a:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800165c:	1884      	adds	r4, r0, r2
 800165e:	633c      	str	r4, [r7, #48]	; 0x30
 8001660:	eb41 0303 	adc.w	r3, r1, r3
 8001664:	637b      	str	r3, [r7, #52]	; 0x34
 8001666:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800166a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 800166e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001672:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001676:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800167a:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800167e:	4b21      	ldr	r3, [pc, #132]	; (8001704 <BMP280_ReadTemperatureAndPressure+0x314>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	b29b      	uxth	r3, r3
 8001684:	2200      	movs	r2, #0
 8001686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800168a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800168e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001692:	462b      	mov	r3, r5
 8001694:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8001698:	4642      	mov	r2, r8
 800169a:	fb02 f203 	mul.w	r2, r2, r3
 800169e:	464b      	mov	r3, r9
 80016a0:	4621      	mov	r1, r4
 80016a2:	fb01 f303 	mul.w	r3, r1, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	4622      	mov	r2, r4
 80016aa:	4641      	mov	r1, r8
 80016ac:	fba2 1201 	umull	r1, r2, r2, r1
 80016b0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80016b4:	460a      	mov	r2, r1
 80016b6:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80016ba:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80016be:	4413      	add	r3, r2
 80016c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80016d0:	4629      	mov	r1, r5
 80016d2:	104a      	asrs	r2, r1, #1
 80016d4:	4629      	mov	r1, r5
 80016d6:	17cb      	asrs	r3, r1, #31
 80016d8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	  if (var1 == 0) {
 80016dc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016e0:	4313      	orrs	r3, r2
 80016e2:	d111      	bne.n	8001708 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 80016e4:	2300      	movs	r3, #0
 80016e6:	e160      	b.n	80019aa <BMP280_ReadTemperatureAndPressure+0x5ba>
 80016e8:	c2c60000 	.word	0xc2c60000
 80016ec:	20000234 	.word	0x20000234
 80016f0:	20000228 	.word	0x20000228
 80016f4:	20000226 	.word	0x20000226
 80016f8:	20000224 	.word	0x20000224
 80016fc:	20000222 	.word	0x20000222
 8001700:	20000220 	.word	0x20000220
 8001704:	20000232 	.word	0x20000232
	  }
	  p = 1048576 - adc_P;
 8001708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800170c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001710:	17da      	asrs	r2, r3, #31
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
 8001714:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001716:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800171a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 800171e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001722:	105b      	asrs	r3, r3, #1
 8001724:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001728:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800172c:	07db      	lsls	r3, r3, #31
 800172e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001732:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001736:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800173a:	4621      	mov	r1, r4
 800173c:	1a89      	subs	r1, r1, r2
 800173e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001742:	4629      	mov	r1, r5
 8001744:	eb61 0303 	sbc.w	r3, r1, r3
 8001748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800174c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001750:	4622      	mov	r2, r4
 8001752:	462b      	mov	r3, r5
 8001754:	1891      	adds	r1, r2, r2
 8001756:	6239      	str	r1, [r7, #32]
 8001758:	415b      	adcs	r3, r3
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
 800175c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001760:	4621      	mov	r1, r4
 8001762:	1851      	adds	r1, r2, r1
 8001764:	61b9      	str	r1, [r7, #24]
 8001766:	4629      	mov	r1, r5
 8001768:	414b      	adcs	r3, r1
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001778:	4649      	mov	r1, r9
 800177a:	018b      	lsls	r3, r1, #6
 800177c:	4641      	mov	r1, r8
 800177e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001782:	4641      	mov	r1, r8
 8001784:	018a      	lsls	r2, r1, #6
 8001786:	4641      	mov	r1, r8
 8001788:	1889      	adds	r1, r1, r2
 800178a:	6139      	str	r1, [r7, #16]
 800178c:	4649      	mov	r1, r9
 800178e:	eb43 0101 	adc.w	r1, r3, r1
 8001792:	6179      	str	r1, [r7, #20]
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017a0:	4649      	mov	r1, r9
 80017a2:	008b      	lsls	r3, r1, #2
 80017a4:	4641      	mov	r1, r8
 80017a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017aa:	4641      	mov	r1, r8
 80017ac:	008a      	lsls	r2, r1, #2
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	4603      	mov	r3, r0
 80017b4:	4622      	mov	r2, r4
 80017b6:	189b      	adds	r3, r3, r2
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	460b      	mov	r3, r1
 80017bc:	462a      	mov	r2, r5
 80017be:	eb42 0303 	adc.w	r3, r2, r3
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017d0:	4649      	mov	r1, r9
 80017d2:	008b      	lsls	r3, r1, #2
 80017d4:	4641      	mov	r1, r8
 80017d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017da:	4641      	mov	r1, r8
 80017dc:	008a      	lsls	r2, r1, #2
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	4603      	mov	r3, r0
 80017e4:	4622      	mov	r2, r4
 80017e6:	189b      	adds	r3, r3, r2
 80017e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80017ea:	462b      	mov	r3, r5
 80017ec:	460a      	mov	r2, r1
 80017ee:	eb42 0303 	adc.w	r3, r2, r3
 80017f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017f4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017f8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80017fc:	f7ff fa44 	bl	8000c88 <__aeabi_ldivmod>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001808:	4b6b      	ldr	r3, [pc, #428]	; (80019b8 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 800180a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180e:	b21b      	sxth	r3, r3
 8001810:	17da      	asrs	r2, r3, #31
 8001812:	673b      	str	r3, [r7, #112]	; 0x70
 8001814:	677a      	str	r2, [r7, #116]	; 0x74
 8001816:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800181a:	f04f 0000 	mov.w	r0, #0
 800181e:	f04f 0100 	mov.w	r1, #0
 8001822:	0b50      	lsrs	r0, r2, #13
 8001824:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001828:	1359      	asrs	r1, r3, #13
 800182a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800182e:	462b      	mov	r3, r5
 8001830:	fb00 f203 	mul.w	r2, r0, r3
 8001834:	4623      	mov	r3, r4
 8001836:	fb03 f301 	mul.w	r3, r3, r1
 800183a:	4413      	add	r3, r2
 800183c:	4622      	mov	r2, r4
 800183e:	fba2 1200 	umull	r1, r2, r2, r0
 8001842:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001846:	460a      	mov	r2, r1
 8001848:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800184c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001850:	4413      	add	r3, r2
 8001852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001856:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800185a:	f04f 0000 	mov.w	r0, #0
 800185e:	f04f 0100 	mov.w	r1, #0
 8001862:	0b50      	lsrs	r0, r2, #13
 8001864:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001868:	1359      	asrs	r1, r3, #13
 800186a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800186e:	462b      	mov	r3, r5
 8001870:	fb00 f203 	mul.w	r2, r0, r3
 8001874:	4623      	mov	r3, r4
 8001876:	fb03 f301 	mul.w	r3, r3, r1
 800187a:	4413      	add	r3, r2
 800187c:	4622      	mov	r2, r4
 800187e:	fba2 1200 	umull	r1, r2, r2, r0
 8001882:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001886:	460a      	mov	r2, r1
 8001888:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800188c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001890:	4413      	add	r3, r2
 8001892:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80018a2:	4621      	mov	r1, r4
 80018a4:	0e4a      	lsrs	r2, r1, #25
 80018a6:	4629      	mov	r1, r5
 80018a8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80018ac:	4629      	mov	r1, r5
 80018ae:	164b      	asrs	r3, r1, #25
 80018b0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 80018b4:	4b41      	ldr	r3, [pc, #260]	; (80019bc <BMP280_ReadTemperatureAndPressure+0x5cc>)
 80018b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	17da      	asrs	r2, r3, #31
 80018be:	66bb      	str	r3, [r7, #104]	; 0x68
 80018c0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80018c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018c6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80018ca:	462a      	mov	r2, r5
 80018cc:	fb02 f203 	mul.w	r2, r2, r3
 80018d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018d4:	4621      	mov	r1, r4
 80018d6:	fb01 f303 	mul.w	r3, r1, r3
 80018da:	4413      	add	r3, r2
 80018dc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80018e0:	4621      	mov	r1, r4
 80018e2:	fba2 1201 	umull	r1, r2, r2, r1
 80018e6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80018ea:	460a      	mov	r2, r1
 80018ec:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80018f0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80018f4:	4413      	add	r3, r2
 80018f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001906:	4621      	mov	r1, r4
 8001908:	0cca      	lsrs	r2, r1, #19
 800190a:	4629      	mov	r1, r5
 800190c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001910:	4629      	mov	r1, r5
 8001912:	14cb      	asrs	r3, r1, #19
 8001914:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001918:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800191c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001920:	1884      	adds	r4, r0, r2
 8001922:	663c      	str	r4, [r7, #96]	; 0x60
 8001924:	eb41 0303 	adc.w	r3, r1, r3
 8001928:	667b      	str	r3, [r7, #100]	; 0x64
 800192a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800192e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001932:	4621      	mov	r1, r4
 8001934:	1889      	adds	r1, r1, r2
 8001936:	65b9      	str	r1, [r7, #88]	; 0x58
 8001938:	4629      	mov	r1, r5
 800193a:	eb43 0101 	adc.w	r1, r3, r1
 800193e:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001940:	f04f 0000 	mov.w	r0, #0
 8001944:	f04f 0100 	mov.w	r1, #0
 8001948:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800194c:	4623      	mov	r3, r4
 800194e:	0a18      	lsrs	r0, r3, #8
 8001950:	462b      	mov	r3, r5
 8001952:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001956:	462b      	mov	r3, r5
 8001958:	1219      	asrs	r1, r3, #8
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 800195c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001960:	b21b      	sxth	r3, r3
 8001962:	17da      	asrs	r2, r3, #31
 8001964:	653b      	str	r3, [r7, #80]	; 0x50
 8001966:	657a      	str	r2, [r7, #84]	; 0x54
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001974:	464c      	mov	r4, r9
 8001976:	0123      	lsls	r3, r4, #4
 8001978:	4644      	mov	r4, r8
 800197a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800197e:	4644      	mov	r4, r8
 8001980:	0122      	lsls	r2, r4, #4
 8001982:	1884      	adds	r4, r0, r2
 8001984:	603c      	str	r4, [r7, #0]
 8001986:	eb41 0303 	adc.w	r3, r1, r3
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001990:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  *pressure = (int32_t)p/256;
 8001994:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001998:	2b00      	cmp	r3, #0
 800199a:	da00      	bge.n	800199e <BMP280_ReadTemperatureAndPressure+0x5ae>
 800199c:	33ff      	adds	r3, #255	; 0xff
 800199e:	121b      	asrs	r3, r3, #8
 80019a0:	461a      	mov	r2, r3
 80019a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019a6:	601a      	str	r2, [r3, #0]

	  return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80019b0:	46bd      	mov	sp, r7
 80019b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019b6:	bf00      	nop
 80019b8:	2000022e 	.word	0x2000022e
 80019bc:	2000022c 	.word	0x2000022c
 80019c0:	2000022a 	.word	0x2000022a

080019c4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80019ca:	463b      	mov	r3, r7
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <MX_DAC_Init+0x4c>)
 80019d4:	4a0f      	ldr	r2, [pc, #60]	; (8001a14 <MX_DAC_Init+0x50>)
 80019d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80019d8:	480d      	ldr	r0, [pc, #52]	; (8001a10 <MX_DAC_Init+0x4c>)
 80019da:	f001 fbac 	bl	8003136 <HAL_DAC_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80019e4:	f000 fdf4 	bl	80025d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 80019e8:	232c      	movs	r3, #44	; 0x2c
 80019ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80019f0:	463b      	mov	r3, r7
 80019f2:	2200      	movs	r2, #0
 80019f4:	4619      	mov	r1, r3
 80019f6:	4806      	ldr	r0, [pc, #24]	; (8001a10 <MX_DAC_Init+0x4c>)
 80019f8:	f001 fc36 	bl	8003268 <HAL_DAC_ConfigChannel>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001a02:	f000 fde5 	bl	80025d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000238 	.word	0x20000238
 8001a14:	40007400 	.word	0x40007400

08001a18 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <HAL_DAC_MspInit+0x74>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d123      	bne.n	8001a82 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <HAL_DAC_MspInit+0x78>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <HAL_DAC_MspInit+0x78>)
 8001a40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_DAC_MspInit+0x78>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <HAL_DAC_MspInit+0x78>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <HAL_DAC_MspInit+0x78>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <HAL_DAC_MspInit+0x78>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a6a:	2310      	movs	r3, #16
 8001a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <HAL_DAC_MspInit+0x7c>)
 8001a7e:	f001 fcd5 	bl	800342c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001a82:	bf00      	nop
 8001a84:	3728      	adds	r7, #40	; 0x28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40007400 	.word	0x40007400
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40020000 	.word	0x40020000

08001a98 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08e      	sub	sp, #56	; 0x38
 8001a9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
 8001aac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aae:	4b74      	ldr	r3, [pc, #464]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a73      	ldr	r2, [pc, #460]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001ab4:	f043 0304 	orr.w	r3, r3, #4
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b71      	ldr	r3, [pc, #452]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	623b      	str	r3, [r7, #32]
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ac6:	4b6e      	ldr	r3, [pc, #440]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a6d      	ldr	r2, [pc, #436]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001acc:	f043 0320 	orr.w	r3, r3, #32
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b6b      	ldr	r3, [pc, #428]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0320 	and.w	r3, r3, #32
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ade:	4b68      	ldr	r3, [pc, #416]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a67      	ldr	r2, [pc, #412]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b65      	ldr	r3, [pc, #404]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	4b62      	ldr	r3, [pc, #392]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a61      	ldr	r2, [pc, #388]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b5f      	ldr	r3, [pc, #380]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	4b5c      	ldr	r3, [pc, #368]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a5b      	ldr	r2, [pc, #364]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b59      	ldr	r3, [pc, #356]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b26:	4b56      	ldr	r3, [pc, #344]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a55      	ldr	r2, [pc, #340]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001b2c:	f043 0310 	orr.w	r3, r3, #16
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3e:	4b50      	ldr	r3, [pc, #320]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a4f      	ldr	r2, [pc, #316]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001b44:	f043 0308 	orr.w	r3, r3, #8
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b4d      	ldr	r3, [pc, #308]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b56:	4b4a      	ldr	r3, [pc, #296]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a49      	ldr	r2, [pc, #292]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <MX_GPIO_Init+0x1e8>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f244 0181 	movw	r1, #16513	; 0x4081
 8001b74:	4843      	ldr	r0, [pc, #268]	; (8001c84 <MX_GPIO_Init+0x1ec>)
 8001b76:	f001 fe1d 	bl	80037b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2140      	movs	r1, #64	; 0x40
 8001b7e:	4842      	ldr	r0, [pc, #264]	; (8001c88 <MX_GPIO_Init+0x1f0>)
 8001b80:	f001 fe18 	bl	80037b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b98:	4619      	mov	r1, r3
 8001b9a:	483c      	ldr	r0, [pc, #240]	; (8001c8c <MX_GPIO_Init+0x1f4>)
 8001b9c:	f001 fc46 	bl	800342c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ba0:	2332      	movs	r3, #50	; 0x32
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bb0:	230b      	movs	r3, #11
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4834      	ldr	r0, [pc, #208]	; (8001c8c <MX_GPIO_Init+0x1f4>)
 8001bbc:	f001 fc36 	bl	800342c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001bc0:	2386      	movs	r3, #134	; 0x86
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bd0:	230b      	movs	r3, #11
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd8:	4619      	mov	r1, r3
 8001bda:	482d      	ldr	r0, [pc, #180]	; (8001c90 <MX_GPIO_Init+0x1f8>)
 8001bdc:	f001 fc26 	bl	800342c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001be0:	f244 0381 	movw	r3, #16513	; 0x4081
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be6:	2301      	movs	r3, #1
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4822      	ldr	r0, [pc, #136]	; (8001c84 <MX_GPIO_Init+0x1ec>)
 8001bfa:	f001 fc17 	bl	800342c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001bfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c10:	230b      	movs	r3, #11
 8001c12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c18:	4619      	mov	r1, r3
 8001c1a:	481a      	ldr	r0, [pc, #104]	; (8001c84 <MX_GPIO_Init+0x1ec>)
 8001c1c:	f001 fc06 	bl	800342c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001c20:	2340      	movs	r3, #64	; 0x40
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c34:	4619      	mov	r1, r3
 8001c36:	4814      	ldr	r0, [pc, #80]	; (8001c88 <MX_GPIO_Init+0x1f0>)
 8001c38:	f001 fbf8 	bl	800342c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	480e      	ldr	r0, [pc, #56]	; (8001c88 <MX_GPIO_Init+0x1f0>)
 8001c50:	f001 fbec 	bl	800342c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001c54:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c66:	230b      	movs	r3, #11
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <MX_GPIO_Init+0x1f0>)
 8001c72:	f001 fbdb 	bl	800342c <HAL_GPIO_Init>

}
 8001c76:	bf00      	nop
 8001c78:	3738      	adds	r7, #56	; 0x38
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020400 	.word	0x40020400
 8001c88:	40021800 	.word	0x40021800
 8001c8c:	40020800 	.word	0x40020800
 8001c90:	40020000 	.word	0x40020000

08001c94 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c98:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <MX_I2C1_Init+0x74>)
 8001c9a:	4a1c      	ldr	r2, [pc, #112]	; (8001d0c <MX_I2C1_Init+0x78>)
 8001c9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <MX_I2C1_Init+0x74>)
 8001ca0:	4a1b      	ldr	r2, [pc, #108]	; (8001d10 <MX_I2C1_Init+0x7c>)
 8001ca2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <MX_I2C1_Init+0x74>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001caa:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <MX_I2C1_Init+0x74>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cb0:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <MX_I2C1_Init+0x74>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cb6:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <MX_I2C1_Init+0x74>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <MX_I2C1_Init+0x74>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <MX_I2C1_Init+0x74>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <MX_I2C1_Init+0x74>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cce:	480e      	ldr	r0, [pc, #56]	; (8001d08 <MX_I2C1_Init+0x74>)
 8001cd0:	f001 fda4 	bl	800381c <HAL_I2C_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cda:	f000 fc79 	bl	80025d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4809      	ldr	r0, [pc, #36]	; (8001d08 <MX_I2C1_Init+0x74>)
 8001ce2:	f002 fbe7 	bl	80044b4 <HAL_I2CEx_ConfigAnalogFilter>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001cec:	f000 fc70 	bl	80025d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_I2C1_Init+0x74>)
 8001cf4:	f002 fc29 	bl	800454a <HAL_I2CEx_ConfigDigitalFilter>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cfe:	f000 fc67 	bl	80025d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	2000024c 	.word	0x2000024c
 8001d0c:	40005400 	.word	0x40005400
 8001d10:	00808cd2 	.word	0x00808cd2

08001d14 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d18:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d1a:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <MX_I2C2_Init+0x78>)
 8001d1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d20:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <MX_I2C2_Init+0x7c>)
 8001d22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d4e:	480e      	ldr	r0, [pc, #56]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d50:	f001 fd64 	bl	800381c <HAL_I2C_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001d5a:	f000 fc39 	bl	80025d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4809      	ldr	r0, [pc, #36]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d62:	f002 fba7 	bl	80044b4 <HAL_I2CEx_ConfigAnalogFilter>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001d6c:	f000 fc30 	bl	80025d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d70:	2100      	movs	r1, #0
 8001d72:	4805      	ldr	r0, [pc, #20]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d74:	f002 fbe9 	bl	800454a <HAL_I2CEx_ConfigDigitalFilter>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001d7e:	f000 fc27 	bl	80025d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200002a0 	.word	0x200002a0
 8001d8c:	40005800 	.word	0x40005800
 8001d90:	00808cd2 	.word	0x00808cd2

08001d94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b0ac      	sub	sp, #176	; 0xb0
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dac:	f107 0318 	add.w	r3, r7, #24
 8001db0:	2284      	movs	r2, #132	; 0x84
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f006 fab7 	bl	8008328 <memset>
  if(i2cHandle->Instance==I2C1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a43      	ldr	r2, [pc, #268]	; (8001ecc <HAL_I2C_MspInit+0x138>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d13d      	bne.n	8001e40 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001dc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dc8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dce:	f107 0318 	add.w	r3, r7, #24
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 fa28 	bl	8005228 <HAL_RCCEx_PeriphCLKConfig>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001dde:	f000 fbf7 	bl	80025d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <HAL_I2C_MspInit+0x13c>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a3a      	ldr	r2, [pc, #232]	; (8001ed0 <HAL_I2C_MspInit+0x13c>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b38      	ldr	r3, [pc, #224]	; (8001ed0 <HAL_I2C_MspInit+0x13c>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e02:	2312      	movs	r3, #18
 8001e04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e14:	2304      	movs	r3, #4
 8001e16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e1e:	4619      	mov	r1, r3
 8001e20:	482c      	ldr	r0, [pc, #176]	; (8001ed4 <HAL_I2C_MspInit+0x140>)
 8001e22:	f001 fb03 	bl	800342c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e26:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <HAL_I2C_MspInit+0x13c>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4a29      	ldr	r2, [pc, #164]	; (8001ed0 <HAL_I2C_MspInit+0x13c>)
 8001e2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e30:	6413      	str	r3, [r2, #64]	; 0x40
 8001e32:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <HAL_I2C_MspInit+0x13c>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001e3e:	e041      	b.n	8001ec4 <HAL_I2C_MspInit+0x130>
  else if(i2cHandle->Instance==I2C2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a24      	ldr	r2, [pc, #144]	; (8001ed8 <HAL_I2C_MspInit+0x144>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d13c      	bne.n	8001ec4 <HAL_I2C_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e56:	f107 0318 	add.w	r3, r7, #24
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 f9e4 	bl	8005228 <HAL_RCCEx_PeriphCLKConfig>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001e66:	f000 fbb3 	bl	80025d0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e6a:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_I2C_MspInit+0x13c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <HAL_I2C_MspInit+0x13c>)
 8001e70:	f043 0320 	orr.w	r3, r3, #32
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <HAL_I2C_MspInit+0x13c>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0320 	and.w	r3, r3, #32
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e82:	2303      	movs	r3, #3
 8001e84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e88:	2312      	movs	r3, #18
 8001e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e94:	2303      	movs	r3, #3
 8001e96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ea0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	480d      	ldr	r0, [pc, #52]	; (8001edc <HAL_I2C_MspInit+0x148>)
 8001ea8:	f001 fac0 	bl	800342c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_I2C_MspInit+0x13c>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	4a07      	ldr	r2, [pc, #28]	; (8001ed0 <HAL_I2C_MspInit+0x13c>)
 8001eb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_I2C_MspInit+0x13c>)
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
}
 8001ec4:	bf00      	nop
 8001ec6:	37b0      	adds	r7, #176	; 0xb0
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40005400 	.word	0x40005400
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020400 	.word	0x40020400
 8001ed8:	40005800 	.word	0x40005800
 8001edc:	40021400 	.word	0x40021400

08001ee0 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8001ef6:	2308      	movs	r3, #8
 8001ef8:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8001efa:	2028      	movs	r0, #40	; 0x28
 8001efc:	f000 ffe6 	bl	8002ecc <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	7bfa      	ldrb	r2, [r7, #15]
 8001f06:	2130      	movs	r1, #48	; 0x30
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 f829 	bl	8001f60 <lcd_write>
	HAL_Delay(5);
 8001f0e:	2005      	movs	r0, #5
 8001f10:	f000 ffdc 	bl	8002ecc <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	2130      	movs	r1, #48	; 0x30
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 f81f 	bl	8001f60 <lcd_write>
	HAL_Delay(1);
 8001f22:	2001      	movs	r0, #1
 8001f24:	f000 ffd2 	bl	8002ecc <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	2130      	movs	r1, #48	; 0x30
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 f815 	bl	8001f60 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	2102      	movs	r1, #2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f80e 	bl	8001f60 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	210c      	movs	r1, #12
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 f807 	bl	8001f60 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f89f 	bl	8002096 <lcd_clear>

}
 8001f58:	bf00      	nop
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	71bb      	strb	r3, [r7, #6]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8001f72:	79bb      	ldrb	r3, [r7, #6]
 8001f74:	f023 030f 	bic.w	r3, r3, #15
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	797b      	ldrb	r3, [r7, #5]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8001f88:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f8c:	f023 030f 	bic.w	r3, r3, #15
 8001f90:	b25a      	sxtb	r2, r3
 8001f92:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	b25b      	sxtb	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8001f9e:	79bb      	ldrb	r3, [r7, #6]
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	797b      	ldrb	r3, [r7, #5]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f043 0304 	orr.w	r3, r3, #4
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8001fb2:	79bb      	ldrb	r3, [r7, #6]
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	b25a      	sxtb	r2, r3
 8001fb8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	b25b      	sxtb	r3, r3
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	b299      	uxth	r1, r3
 8001fc8:	f107 020c 	add.w	r2, r7, #12
 8001fcc:	2364      	movs	r3, #100	; 0x64
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <lcd_write+0x88>)
 8001fd4:	f001 fcb2 	bl	800393c <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8001fd8:	2005      	movs	r0, #5
 8001fda:	f000 ff77 	bl	8002ecc <HAL_Delay>
}
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	2000024c 	.word	0x2000024c

08001fec <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8002006:	2308      	movs	r3, #8
 8002008:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f843 	bl	8002096 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	2180      	movs	r1, #128	; 0x80
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ffa1 	bl	8001f60 <lcd_write>
	while(lcd->f_line[i])
 800201e:	e00f      	b.n	8002040 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7818      	ldrb	r0, [r3, #0]
 8002024:	7bbb      	ldrb	r3, [r7, #14]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	7859      	ldrb	r1, [r3, #1]
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	b2db      	uxtb	r3, r3
 8002034:	461a      	mov	r2, r3
 8002036:	f7ff ff93 	bl	8001f60 <lcd_write>
		i++;
 800203a:	7bbb      	ldrb	r3, [r7, #14]
 800203c:	3301      	adds	r3, #1
 800203e:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8002040:	7bbb      	ldrb	r3, [r7, #14]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	785b      	ldrb	r3, [r3, #1]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1e9      	bne.n	8002020 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	21c0      	movs	r1, #192	; 0xc0
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff81 	bl	8001f60 <lcd_write>
	while(lcd->s_line[i])
 800205e:	e00f      	b.n	8002080 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	7818      	ldrb	r0, [r3, #0]
 8002064:	7bbb      	ldrb	r3, [r7, #14]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	7c99      	ldrb	r1, [r3, #18]
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	b2db      	uxtb	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	f7ff ff73 	bl	8001f60 <lcd_write>
		i++;
 800207a:	7bbb      	ldrb	r3, [r7, #14]
 800207c:	3301      	adds	r3, #1
 800207e:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8002080:	7bbb      	ldrb	r3, [r7, #14]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	7c9b      	ldrb	r3, [r3, #18]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1e9      	bne.n	8002060 <lcd_display+0x74>
	}
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80020ac:	2308      	movs	r3, #8
 80020ae:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	2101      	movs	r1, #1
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff51 	bl	8001f60 <lcd_write>
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <calculate_discrete_pid>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float calculate_discrete_pid(float setpoint, float measured)
{
 80020c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020cc:	b08a      	sub	sp, #40	; 0x28
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	ed87 0a01 	vstr	s0, [r7, #4]
 80020d4:	edc7 0a00 	vstr	s1, [r7]
	float u=0, P, I, D, error, integral, derivative;
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	623b      	str	r3, [r7, #32]

	error = setpoint-measured;
 80020de:	ed97 7a01 	vldr	s14, [r7, #4]
 80020e2:	edd7 7a00 	vldr	s15, [r7]
 80020e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ea:	edc7 7a07 	vstr	s15, [r7, #28]

	// Czlon proporcjonalny
	P = Kp * error;
 80020ee:	4b5a      	ldr	r3, [pc, #360]	; (8002258 <calculate_discrete_pid+0x190>)
 80020f0:	edd3 7a00 	vldr	s15, [r3]
 80020f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80020f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020fc:	edc7 7a06 	vstr	s15, [r7, #24]

	// Czlon calkujacy
	integral = previous_integral + (error+previous_error) ;
 8002100:	4b56      	ldr	r3, [pc, #344]	; (800225c <calculate_discrete_pid+0x194>)
 8002102:	ed93 7a00 	vldr	s14, [r3]
 8002106:	edd7 7a07 	vldr	s15, [r7, #28]
 800210a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800210e:	4b54      	ldr	r3, [pc, #336]	; (8002260 <calculate_discrete_pid+0x198>)
 8002110:	edd3 7a00 	vldr	s15, [r3]
 8002114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002118:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if(integral < 0)
 800211c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002120:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002128:	d502      	bpl.n	8002130 <calculate_discrete_pid+0x68>
		integral = 0;
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
	if(integral > 2000)
 8002130:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002134:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002264 <calculate_discrete_pid+0x19c>
 8002138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800213c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002140:	dd01      	ble.n	8002146 <calculate_discrete_pid+0x7e>
		integral = 2000;
 8002142:	4b49      	ldr	r3, [pc, #292]	; (8002268 <calculate_discrete_pid+0x1a0>)
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
	previous_integral = integral;
 8002146:	4a46      	ldr	r2, [pc, #280]	; (8002260 <calculate_discrete_pid+0x198>)
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	6013      	str	r3, [r2, #0]
	I = Ki*integral*(dt/2.0);
 800214c:	4b47      	ldr	r3, [pc, #284]	; (800226c <calculate_discrete_pid+0x1a4>)
 800214e:	ed93 7a00 	vldr	s14, [r3]
 8002152:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215a:	ee17 0a90 	vmov	r0, s15
 800215e:	f7fe fa13 	bl	8000588 <__aeabi_f2d>
 8002162:	4604      	mov	r4, r0
 8002164:	460d      	mov	r5, r1
 8002166:	4b42      	ldr	r3, [pc, #264]	; (8002270 <calculate_discrete_pid+0x1a8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fa0c 	bl	8000588 <__aeabi_f2d>
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002178:	f7fe fb88 	bl	800088c <__aeabi_ddiv>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4620      	mov	r0, r4
 8002182:	4629      	mov	r1, r5
 8002184:	f7fe fa58 	bl	8000638 <__aeabi_dmul>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	f7fe fd2a 	bl	8000be8 <__aeabi_d2f>
 8002194:	4603      	mov	r3, r0
 8002196:	617b      	str	r3, [r7, #20]

	// Czlon rozniczkujacy
	derivative = (error - previous_error)/dt;
 8002198:	4b30      	ldr	r3, [pc, #192]	; (800225c <calculate_discrete_pid+0x194>)
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	ed97 7a07 	vldr	s14, [r7, #28]
 80021a2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021a6:	4b32      	ldr	r3, [pc, #200]	; (8002270 <calculate_discrete_pid+0x1a8>)
 80021a8:	ed93 7a00 	vldr	s14, [r3]
 80021ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021b0:	edc7 7a04 	vstr	s15, [r7, #16]
	previous_error = error;
 80021b4:	4a29      	ldr	r2, [pc, #164]	; (800225c <calculate_discrete_pid+0x194>)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	6013      	str	r3, [r2, #0]
	D = Kd*derivative;
 80021ba:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <calculate_discrete_pid+0x1ac>)
 80021bc:	edd3 7a00 	vldr	s15, [r3]
 80021c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80021c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c8:	edc7 7a03 	vstr	s15, [r7, #12]

	// Suma czlonow
	u = P * (1.0 + I + D);
 80021cc:	69b8      	ldr	r0, [r7, #24]
 80021ce:	f7fe f9db 	bl	8000588 <__aeabi_f2d>
 80021d2:	4604      	mov	r4, r0
 80021d4:	460d      	mov	r5, r1
 80021d6:	6978      	ldr	r0, [r7, #20]
 80021d8:	f7fe f9d6 	bl	8000588 <__aeabi_f2d>
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <calculate_discrete_pid+0x1b0>)
 80021e2:	f7fe f873 	bl	80002cc <__adddf3>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4690      	mov	r8, r2
 80021ec:	4699      	mov	r9, r3
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f7fe f9ca 	bl	8000588 <__aeabi_f2d>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4640      	mov	r0, r8
 80021fa:	4649      	mov	r1, r9
 80021fc:	f7fe f866 	bl	80002cc <__adddf3>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4620      	mov	r0, r4
 8002206:	4629      	mov	r1, r5
 8002208:	f7fe fa16 	bl	8000638 <__aeabi_dmul>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	f7fe fce8 	bl	8000be8 <__aeabi_d2f>
 8002218:	4603      	mov	r3, r0
 800221a:	623b      	str	r3, [r7, #32]

	// Ograniczenie sygnalu sterujacego
	if(u>2000)
 800221c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002220:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002264 <calculate_discrete_pid+0x19c>
 8002224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222c:	dd01      	ble.n	8002232 <calculate_discrete_pid+0x16a>
		return 2000;
 800222e:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <calculate_discrete_pid+0x1a0>)
 8002230:	e00a      	b.n	8002248 <calculate_discrete_pid+0x180>
	else if(u<0)
 8002232:	edd7 7a08 	vldr	s15, [r7, #32]
 8002236:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800223a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223e:	d502      	bpl.n	8002246 <calculate_discrete_pid+0x17e>
		return 0;
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	e000      	b.n	8002248 <calculate_discrete_pid+0x180>
	return u;
 8002246:	6a3b      	ldr	r3, [r7, #32]
}
 8002248:	ee07 3a90 	vmov	s15, r3
 800224c:	eeb0 0a67 	vmov.f32	s0, s15
 8002250:	3728      	adds	r7, #40	; 0x28
 8002252:	46bd      	mov	sp, r7
 8002254:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002258:	20000008 	.word	0x20000008
 800225c:	20000300 	.word	0x20000300
 8002260:	20000304 	.word	0x20000304
 8002264:	44fa0000 	.word	0x44fa0000
 8002268:	44fa0000 	.word	0x44fa0000
 800226c:	2000000c 	.word	0x2000000c
 8002270:	20000014 	.word	0x20000014
 8002274:	20000010 	.word	0x20000010
 8002278:	3ff00000 	.word	0x3ff00000

0800227c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002282:	f000 fdc6 	bl	8002e12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002286:	f000 f8e1 	bl	800244c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800228a:	f7ff fc05 	bl	8001a98 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800228e:	f000 fc57 	bl	8002b40 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002292:	f000 fced 	bl	8002c70 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8002296:	f7ff fcfd 	bl	8001c94 <MX_I2C1_Init>
  MX_DAC_Init();
 800229a:	f7ff fb93 	bl	80019c4 <MX_DAC_Init>
  MX_TIM4_Init();
 800229e:	f000 fb81 	bl	80029a4 <MX_TIM4_Init>
  MX_I2C2_Init();
 80022a2:	f7ff fd37 	bl	8001d14 <MX_I2C2_Init>
  MX_TIM1_Init();
 80022a6:	f000 fad3 	bl	8002850 <MX_TIM1_Init>
  MX_TIM3_Init();
 80022aa:	f000 fb2b 	bl	8002904 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Inicjalizacja czujnika BMP280
  BMP280_Init(&hi2c2, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 80022ae:	2301      	movs	r3, #1
 80022b0:	2203      	movs	r2, #3
 80022b2:	2101      	movs	r1, #1
 80022b4:	484f      	ldr	r0, [pc, #316]	; (80023f4 <main+0x178>)
 80022b6:	f7fe ff51 	bl	800115c <BMP280_Init>

  // Inicjalizacja timerow oraz wyjscia PWM
  HAL_TIM_Base_Start(&htim4);
 80022ba:	484f      	ldr	r0, [pc, #316]	; (80023f8 <main+0x17c>)
 80022bc:	f003 fbfc 	bl	8005ab8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80022c0:	484e      	ldr	r0, [pc, #312]	; (80023fc <main+0x180>)
 80022c2:	f003 fc69 	bl	8005b98 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80022c6:	2100      	movs	r1, #0
 80022c8:	484d      	ldr	r0, [pc, #308]	; (8002400 <main+0x184>)
 80022ca:	f000 ff56 	bl	800317a <HAL_DAC_Start>

  // Obsluga LCD
  disp.addr = (0x27 << 1);
 80022ce:	4b4d      	ldr	r3, [pc, #308]	; (8002404 <main+0x188>)
 80022d0:	224e      	movs	r2, #78	; 0x4e
 80022d2:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 80022d4:	4b4b      	ldr	r3, [pc, #300]	; (8002404 <main+0x188>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 80022dc:	4849      	ldr	r0, [pc, #292]	; (8002404 <main+0x188>)
 80022de:	f7ff fdff 	bl	8001ee0 <lcd_init>

  // Enkoder - inicjalizacja
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80022e2:	213c      	movs	r1, #60	; 0x3c
 80022e4:	4848      	ldr	r0, [pc, #288]	; (8002408 <main+0x18c>)
 80022e6:	f003 fd75 	bl	8005dd4 <HAL_TIM_Encoder_Start>
  __HAL_TIM_SET_COUNTER(&htim1, 1000);
 80022ea:	4b47      	ldr	r3, [pc, #284]	; (8002408 <main+0x18c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24

  // Zmienna zatwierdzajaca od przycisku
  int x = 1;
 80022f4:	2301      	movs	r3, #1
 80022f6:	607b      	str	r3, [r7, #4]

  // Inicjalizacja przerwania do odczytu danych z UART
  HAL_UART_Receive_IT(&huart3, rx_buffer, 2);
 80022f8:	2202      	movs	r2, #2
 80022fa:	4944      	ldr	r1, [pc, #272]	; (800240c <main+0x190>)
 80022fc:	4844      	ldr	r0, [pc, #272]	; (8002410 <main+0x194>)
 80022fe:	f004 fae6 	bl	80068ce <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Odczyt temperatury z czujnika
	BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8002302:	4944      	ldr	r1, [pc, #272]	; (8002414 <main+0x198>)
 8002304:	4844      	ldr	r0, [pc, #272]	; (8002418 <main+0x19c>)
 8002306:	f7ff f873 	bl	80013f0 <BMP280_ReadTemperatureAndPressure>

	// Wysylanie aktualnej temperatury przez UART
	sprintf((char*)text, "%.2f, ", temperature);
 800230a:	4b43      	ldr	r3, [pc, #268]	; (8002418 <main+0x19c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f93a 	bl	8000588 <__aeabi_f2d>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4940      	ldr	r1, [pc, #256]	; (800241c <main+0x1a0>)
 800231a:	4841      	ldr	r0, [pc, #260]	; (8002420 <main+0x1a4>)
 800231c:	f006 fc76 	bl	8008c0c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)text, strlen(text), 1000);
 8002320:	483f      	ldr	r0, [pc, #252]	; (8002420 <main+0x1a4>)
 8002322:	f7fd ff75 	bl	8000210 <strlen>
 8002326:	4603      	mov	r3, r0
 8002328:	b29a      	uxth	r2, r3
 800232a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800232e:	493c      	ldr	r1, [pc, #240]	; (8002420 <main+0x1a4>)
 8002330:	4837      	ldr	r0, [pc, #220]	; (8002410 <main+0x194>)
 8002332:	f004 fa49 	bl	80067c8 <HAL_UART_Transmit>

	// Obsluga enkodera
	impulsy = __HAL_TIM_GET_COUNTER(&htim1);
 8002336:	4b34      	ldr	r3, [pc, #208]	; (8002408 <main+0x18c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	461a      	mov	r2, r3
 800233e:	4b39      	ldr	r3, [pc, #228]	; (8002424 <main+0x1a8>)
 8002340:	601a      	str	r2, [r3, #0]
	target_enkoder = (impulsy/2) - 500 + 25;
 8002342:	4b38      	ldr	r3, [pc, #224]	; (8002424 <main+0x1a8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	da00      	bge.n	800234c <main+0xd0>
 800234a:	3301      	adds	r3, #1
 800234c:	105b      	asrs	r3, r3, #1
 800234e:	f2a3 13db 	subw	r3, r3, #475	; 0x1db
 8002352:	4a35      	ldr	r2, [pc, #212]	; (8002428 <main+0x1ac>)
 8002354:	6013      	str	r3, [r2, #0]

	// Wyswietlanie aktualnej temperatury
	sprintf((char*)disp.s_line, "Aktualna = %.2f", temperature);
 8002356:	4b30      	ldr	r3, [pc, #192]	; (8002418 <main+0x19c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe f914 	bl	8000588 <__aeabi_f2d>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4931      	ldr	r1, [pc, #196]	; (800242c <main+0x1b0>)
 8002366:	4832      	ldr	r0, [pc, #200]	; (8002430 <main+0x1b4>)
 8002368:	f006 fc50 	bl	8008c0c <siprintf>

	// Obsluga przycisku i zmiana trybu dzialania
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 800236c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002370:	4830      	ldr	r0, [pc, #192]	; (8002434 <main+0x1b8>)
 8002372:	f001 fa07 	bl	8003784 <HAL_GPIO_ReadPin>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <main+0x106>
		x = x+1;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3301      	adds	r3, #1
 8002380:	607b      	str	r3, [r7, #4]

	switch (x){
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b03      	cmp	r3, #3
 8002386:	d02b      	beq.n	80023e0 <main+0x164>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b03      	cmp	r3, #3
 800238c:	dc2b      	bgt.n	80023e6 <main+0x16a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d003      	beq.n	800239c <main+0x120>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d011      	beq.n	80023be <main+0x142>
 800239a:	e024      	b.n	80023e6 <main+0x16a>
		case 1:
			target_temperature = target_uart;
 800239c:	4b26      	ldr	r3, [pc, #152]	; (8002438 <main+0x1bc>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	ee07 3a90 	vmov	s15, r3
 80023a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a8:	4b24      	ldr	r3, [pc, #144]	; (800243c <main+0x1c0>)
 80023aa:	edc3 7a00 	vstr	s15, [r3]
			sprintf((char*)disp.f_line, "Zadana (PC) = %u", target_uart);
 80023ae:	4b22      	ldr	r3, [pc, #136]	; (8002438 <main+0x1bc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	4922      	ldr	r1, [pc, #136]	; (8002440 <main+0x1c4>)
 80023b6:	4823      	ldr	r0, [pc, #140]	; (8002444 <main+0x1c8>)
 80023b8:	f006 fc28 	bl	8008c0c <siprintf>
			break;
 80023bc:	e013      	b.n	80023e6 <main+0x16a>
		case 2:
			target_temperature = target_enkoder;
 80023be:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <main+0x1ac>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	ee07 3a90 	vmov	s15, r3
 80023c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ca:	4b1c      	ldr	r3, [pc, #112]	; (800243c <main+0x1c0>)
 80023cc:	edc3 7a00 	vstr	s15, [r3]
			sprintf((char*)disp.f_line, "Zadana (EN) = %u", target_enkoder);
 80023d0:	4b15      	ldr	r3, [pc, #84]	; (8002428 <main+0x1ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	491c      	ldr	r1, [pc, #112]	; (8002448 <main+0x1cc>)
 80023d8:	481a      	ldr	r0, [pc, #104]	; (8002444 <main+0x1c8>)
 80023da:	f006 fc17 	bl	8008c0c <siprintf>
			break;
 80023de:	e002      	b.n	80023e6 <main+0x16a>
		case 3:
			x = 1;
 80023e0:	2301      	movs	r3, #1
 80023e2:	607b      	str	r3, [r7, #4]
			break;
 80023e4:	bf00      	nop
	}

	// Wyswietlanie na LCD
	lcd_display(&disp);
 80023e6:	4807      	ldr	r0, [pc, #28]	; (8002404 <main+0x188>)
 80023e8:	f7ff fe00 	bl	8001fec <lcd_display>
	HAL_Delay(200);
 80023ec:	20c8      	movs	r0, #200	; 0xc8
 80023ee:	f000 fd6d 	bl	8002ecc <HAL_Delay>
	BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 80023f2:	e786      	b.n	8002302 <main+0x86>
 80023f4:	200002a0 	.word	0x200002a0
 80023f8:	200003dc 	.word	0x200003dc
 80023fc:	20000390 	.word	0x20000390
 8002400:	20000238 	.word	0x20000238
 8002404:	20000310 	.word	0x20000310
 8002408:	20000344 	.word	0x20000344
 800240c:	2000033c 	.word	0x2000033c
 8002410:	20000428 	.word	0x20000428
 8002414:	200002f8 	.word	0x200002f8
 8002418:	200002f4 	.word	0x200002f4
 800241c:	0800b230 	.word	0x0800b230
 8002420:	20000000 	.word	0x20000000
 8002424:	20000334 	.word	0x20000334
 8002428:	20000338 	.word	0x20000338
 800242c:	0800b238 	.word	0x0800b238
 8002430:	20000322 	.word	0x20000322
 8002434:	40020800 	.word	0x40020800
 8002438:	20000018 	.word	0x20000018
 800243c:	20000308 	.word	0x20000308
 8002440:	0800b248 	.word	0x0800b248
 8002444:	20000311 	.word	0x20000311
 8002448:	0800b25c 	.word	0x0800b25c

0800244c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b094      	sub	sp, #80	; 0x50
 8002450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002452:	f107 0320 	add.w	r3, r7, #32
 8002456:	2230      	movs	r2, #48	; 0x30
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f005 ff64 	bl	8008328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002460:	f107 030c 	add.w	r3, r7, #12
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002470:	f002 fa00 	bl	8004874 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002474:	4b27      	ldr	r3, [pc, #156]	; (8002514 <SystemClock_Config+0xc8>)
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	4a26      	ldr	r2, [pc, #152]	; (8002514 <SystemClock_Config+0xc8>)
 800247a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247e:	6413      	str	r3, [r2, #64]	; 0x40
 8002480:	4b24      	ldr	r3, [pc, #144]	; (8002514 <SystemClock_Config+0xc8>)
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800248c:	4b22      	ldr	r3, [pc, #136]	; (8002518 <SystemClock_Config+0xcc>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002494:	4a20      	ldr	r2, [pc, #128]	; (8002518 <SystemClock_Config+0xcc>)
 8002496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <SystemClock_Config+0xcc>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024a4:	607b      	str	r3, [r7, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024a8:	2301      	movs	r3, #1
 80024aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80024ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024b2:	2302      	movs	r3, #2
 80024b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024bc:	2304      	movs	r3, #4
 80024be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80024c0:	2348      	movs	r3, #72	; 0x48
 80024c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024c4:	2302      	movs	r3, #2
 80024c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80024c8:	2303      	movs	r3, #3
 80024ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024cc:	f107 0320 	add.w	r3, r7, #32
 80024d0:	4618      	mov	r0, r3
 80024d2:	f002 f9df 	bl	8004894 <HAL_RCC_OscConfig>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024dc:	f000 f878 	bl	80025d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024e0:	230f      	movs	r3, #15
 80024e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024e4:	2302      	movs	r3, #2
 80024e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	2102      	movs	r1, #2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f002 fc6d 	bl	8004ddc <HAL_RCC_ClockConfig>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002508:	f000 f862 	bl	80025d0 <Error_Handler>
  }
}
 800250c:	bf00      	nop
 800250e:	3750      	adds	r7, #80	; 0x50
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40023800 	.word	0x40023800
 8002518:	40007000 	.word	0x40007000

0800251c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Przerwanie co 100ms odpowiedzialne za policzenie sygnalu sterujacego
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a16      	ldr	r2, [pc, #88]	; (8002580 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d124      	bne.n	8002576 <HAL_TIM_PeriodElapsedCallback+0x5a>
	{
		// Migajaca dioda sygnalizujaca dzialanie
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	4815      	ldr	r0, [pc, #84]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002530:	f001 f959 	bl	80037e6 <HAL_GPIO_TogglePin>

		// Wywolanie funkcji PID
		pid_output = calculate_discrete_pid(target_temperature, temperature);
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	4b14      	ldr	r3, [pc, #80]	; (800258c <HAL_TIM_PeriodElapsedCallback+0x70>)
 800253c:	ed93 7a00 	vldr	s14, [r3]
 8002540:	eef0 0a47 	vmov.f32	s1, s14
 8002544:	eeb0 0a67 	vmov.f32	s0, s15
 8002548:	f7ff fdbe 	bl	80020c8 <calculate_discrete_pid>
 800254c:	eef0 7a40 	vmov.f32	s15, s0
 8002550:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002552:	edc3 7a00 	vstr	s15, [r3]
		pid_output_int = pid_output;
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002558:	edd3 7a00 	vldr	s15, [r3]
 800255c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002560:	ee17 2a90 	vmov	r2, s15
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002566:	601a      	str	r2, [r3, #0]

		// Ustawienie obliczonej wartosci na wyjsciu PWM
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, pid_output_int);
 8002568:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2200      	movs	r2, #0
 800256e:	2100      	movs	r1, #0
 8002570:	4809      	ldr	r0, [pc, #36]	; (8002598 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002572:	f000 fe54 	bl	800321e <HAL_DAC_SetValue>
	}
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000390 	.word	0x20000390
 8002584:	40020400 	.word	0x40020400
 8002588:	20000308 	.word	0x20000308
 800258c:	200002f4 	.word	0x200002f4
 8002590:	200002fc 	.word	0x200002fc
 8002594:	2000030c 	.word	0x2000030c
 8002598:	20000238 	.word	0x20000238

0800259c <HAL_UART_RxCpltCallback>:

// Przerwanie od odbioru danych z UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	// Restart przerwania
	HAL_UART_Receive_IT(&huart3, rx_buffer, 2);
 80025a4:	2202      	movs	r2, #2
 80025a6:	4907      	ldr	r1, [pc, #28]	; (80025c4 <HAL_UART_RxCpltCallback+0x28>)
 80025a8:	4807      	ldr	r0, [pc, #28]	; (80025c8 <HAL_UART_RxCpltCallback+0x2c>)
 80025aa:	f004 f990 	bl	80068ce <HAL_UART_Receive_IT>

	// Konwersja na Int
	target_uart = atoi(rx_buffer);
 80025ae:	4805      	ldr	r0, [pc, #20]	; (80025c4 <HAL_UART_RxCpltCallback+0x28>)
 80025b0:	f005 fe8c 	bl	80082cc <atoi>
 80025b4:	4603      	mov	r3, r0
 80025b6:	4a05      	ldr	r2, [pc, #20]	; (80025cc <HAL_UART_RxCpltCallback+0x30>)
 80025b8:	6013      	str	r3, [r2, #0]
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	2000033c 	.word	0x2000033c
 80025c8:	20000428 	.word	0x20000428
 80025cc:	20000018 	.word	0x20000018

080025d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025d4:	b672      	cpsid	i
}
 80025d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <Error_Handler+0x8>
	...

080025dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80025e2:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <HAL_MspInit+0x44>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a0e      	ldr	r2, [pc, #56]	; (8002620 <HAL_MspInit+0x44>)
 80025e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
 80025ee:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <HAL_MspInit+0x44>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	607b      	str	r3, [r7, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_MspInit+0x44>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	4a08      	ldr	r2, [pc, #32]	; (8002620 <HAL_MspInit+0x44>)
 8002600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002604:	6453      	str	r3, [r2, #68]	; 0x44
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_MspInit+0x44>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800

08002624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002628:	e7fe      	b.n	8002628 <NMI_Handler+0x4>

0800262a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800262e:	e7fe      	b.n	800262e <HardFault_Handler+0x4>

08002630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002634:	e7fe      	b.n	8002634 <MemManage_Handler+0x4>

08002636 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800263a:	e7fe      	b.n	800263a <BusFault_Handler+0x4>

0800263c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <UsageFault_Handler+0x4>

08002642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002670:	f000 fc0c 	bl	8002e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}

08002678 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <TIM3_IRQHandler+0x10>)
 800267e:	f003 fc37 	bl	8005ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000390 	.word	0x20000390

0800268c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <USART3_IRQHandler+0x10>)
 8002692:	f004 f961 	bl	8006958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000428 	.word	0x20000428

080026a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return 1;
 80026a4:	2301      	movs	r3, #1
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <_kill>:

int _kill(int pid, int sig)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026ba:	f005 fe0b 	bl	80082d4 <__errno>
 80026be:	4603      	mov	r3, r0
 80026c0:	2216      	movs	r2, #22
 80026c2:	601a      	str	r2, [r3, #0]
  return -1;
 80026c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <_exit>:

void _exit (int status)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026d8:	f04f 31ff 	mov.w	r1, #4294967295
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff ffe7 	bl	80026b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026e2:	e7fe      	b.n	80026e2 <_exit+0x12>

080026e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	e00a      	b.n	800270c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026f6:	f3af 8000 	nop.w
 80026fa:	4601      	mov	r1, r0
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	60ba      	str	r2, [r7, #8]
 8002702:	b2ca      	uxtb	r2, r1
 8002704:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3301      	adds	r3, #1
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	429a      	cmp	r2, r3
 8002712:	dbf0      	blt.n	80026f6 <_read+0x12>
  }

  return len;
 8002714:	687b      	ldr	r3, [r7, #4]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b086      	sub	sp, #24
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	e009      	b.n	8002744 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	60ba      	str	r2, [r7, #8]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	3301      	adds	r3, #1
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	429a      	cmp	r2, r3
 800274a:	dbf1      	blt.n	8002730 <_write+0x12>
  }
  return len;
 800274c:	687b      	ldr	r3, [r7, #4]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <_close>:

int _close(int file)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800275e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800277e:	605a      	str	r2, [r3, #4]
  return 0;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <_isatty>:

int _isatty(int file)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002796:	2301      	movs	r3, #1
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027c8:	4a14      	ldr	r2, [pc, #80]	; (800281c <_sbrk+0x5c>)
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <_sbrk+0x60>)
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <_sbrk+0x64>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <_sbrk+0x64>)
 80027de:	4a12      	ldr	r2, [pc, #72]	; (8002828 <_sbrk+0x68>)
 80027e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <_sbrk+0x64>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d207      	bcs.n	8002800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f0:	f005 fd70 	bl	80082d4 <__errno>
 80027f4:	4603      	mov	r3, r0
 80027f6:	220c      	movs	r2, #12
 80027f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027fa:	f04f 33ff 	mov.w	r3, #4294967295
 80027fe:	e009      	b.n	8002814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <_sbrk+0x64>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <_sbrk+0x64>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	4a05      	ldr	r2, [pc, #20]	; (8002824 <_sbrk+0x64>)
 8002810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002812:	68fb      	ldr	r3, [r7, #12]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20050000 	.word	0x20050000
 8002820:	00000400 	.word	0x00000400
 8002824:	20000340 	.word	0x20000340
 8002828:	200009d0 	.word	0x200009d0

0800282c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <SystemInit+0x20>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002836:	4a05      	ldr	r2, [pc, #20]	; (800284c <SystemInit+0x20>)
 8002838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800283c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08c      	sub	sp, #48	; 0x30
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002856:	f107 030c 	add.w	r3, r7, #12
 800285a:	2224      	movs	r2, #36	; 0x24
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f005 fd62 	bl	8008328 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002864:	463b      	mov	r3, r7
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800286e:	4b23      	ldr	r3, [pc, #140]	; (80028fc <MX_TIM1_Init+0xac>)
 8002870:	4a23      	ldr	r2, [pc, #140]	; (8002900 <MX_TIM1_Init+0xb0>)
 8002872:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002874:	4b21      	ldr	r3, [pc, #132]	; (80028fc <MX_TIM1_Init+0xac>)
 8002876:	2200      	movs	r2, #0
 8002878:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800287a:	4b20      	ldr	r3, [pc, #128]	; (80028fc <MX_TIM1_Init+0xac>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19;
 8002880:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <MX_TIM1_Init+0xac>)
 8002882:	2213      	movs	r2, #19
 8002884:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002886:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <MX_TIM1_Init+0xac>)
 8002888:	2200      	movs	r2, #0
 800288a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800288c:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <MX_TIM1_Init+0xac>)
 800288e:	2200      	movs	r2, #0
 8002890:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002892:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <MX_TIM1_Init+0xac>)
 8002894:	2200      	movs	r2, #0
 8002896:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002898:	2301      	movs	r3, #1
 800289a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800289c:	2300      	movs	r3, #0
 800289e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028a0:	2301      	movs	r3, #1
 80028a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028ac:	2300      	movs	r3, #0
 80028ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028b0:	2301      	movs	r3, #1
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028b4:	2300      	movs	r3, #0
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	4619      	mov	r1, r3
 80028c2:	480e      	ldr	r0, [pc, #56]	; (80028fc <MX_TIM1_Init+0xac>)
 80028c4:	f003 f9e0 	bl	8005c88 <HAL_TIM_Encoder_Init>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80028ce:	f7ff fe7f 	bl	80025d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d2:	2300      	movs	r3, #0
 80028d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028d6:	2300      	movs	r3, #0
 80028d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028de:	463b      	mov	r3, r7
 80028e0:	4619      	mov	r1, r3
 80028e2:	4806      	ldr	r0, [pc, #24]	; (80028fc <MX_TIM1_Init+0xac>)
 80028e4:	f003 fe76 	bl	80065d4 <HAL_TIMEx_MasterConfigSynchronization>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80028ee:	f7ff fe6f 	bl	80025d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80028f2:	bf00      	nop
 80028f4:	3730      	adds	r7, #48	; 0x30
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000344 	.word	0x20000344
 8002900:	40010000 	.word	0x40010000

08002904 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800290a:	f107 0310 	add.w	r3, r7, #16
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002918:	1d3b      	adds	r3, r7, #4
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002922:	4b1e      	ldr	r3, [pc, #120]	; (800299c <MX_TIM3_Init+0x98>)
 8002924:	4a1e      	ldr	r2, [pc, #120]	; (80029a0 <MX_TIM3_Init+0x9c>)
 8002926:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8002928:	4b1c      	ldr	r3, [pc, #112]	; (800299c <MX_TIM3_Init+0x98>)
 800292a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800292e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002930:	4b1a      	ldr	r3, [pc, #104]	; (800299c <MX_TIM3_Init+0x98>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002936:	4b19      	ldr	r3, [pc, #100]	; (800299c <MX_TIM3_Init+0x98>)
 8002938:	f242 720f 	movw	r2, #9999	; 0x270f
 800293c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800293e:	4b17      	ldr	r3, [pc, #92]	; (800299c <MX_TIM3_Init+0x98>)
 8002940:	2200      	movs	r2, #0
 8002942:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002944:	4b15      	ldr	r3, [pc, #84]	; (800299c <MX_TIM3_Init+0x98>)
 8002946:	2200      	movs	r2, #0
 8002948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800294a:	4814      	ldr	r0, [pc, #80]	; (800299c <MX_TIM3_Init+0x98>)
 800294c:	f003 f85c 	bl	8005a08 <HAL_TIM_Base_Init>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002956:	f7ff fe3b 	bl	80025d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800295a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800295e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002960:	f107 0310 	add.w	r3, r7, #16
 8002964:	4619      	mov	r1, r3
 8002966:	480d      	ldr	r0, [pc, #52]	; (800299c <MX_TIM3_Init+0x98>)
 8002968:	f003 fbe2 	bl	8006130 <HAL_TIM_ConfigClockSource>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002972:	f7ff fe2d 	bl	80025d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002976:	2300      	movs	r3, #0
 8002978:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	4619      	mov	r1, r3
 8002982:	4806      	ldr	r0, [pc, #24]	; (800299c <MX_TIM3_Init+0x98>)
 8002984:	f003 fe26 	bl	80065d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800298e:	f7ff fe1f 	bl	80025d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002992:	bf00      	nop
 8002994:	3720      	adds	r7, #32
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000390 	.word	0x20000390
 80029a0:	40000400 	.word	0x40000400

080029a4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029aa:	f107 0310 	add.w	r3, r7, #16
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b8:	1d3b      	adds	r3, r7, #4
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029c2:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <MX_TIM4_Init+0x98>)
 80029c4:	4a1e      	ldr	r2, [pc, #120]	; (8002a40 <MX_TIM4_Init+0x9c>)
 80029c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 80029c8:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <MX_TIM4_Init+0x98>)
 80029ca:	f240 22cf 	movw	r2, #719	; 0x2cf
 80029ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d0:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <MX_TIM4_Init+0x98>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <MX_TIM4_Init+0x98>)
 80029d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80029dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029de:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <MX_TIM4_Init+0x98>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e4:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <MX_TIM4_Init+0x98>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80029ea:	4814      	ldr	r0, [pc, #80]	; (8002a3c <MX_TIM4_Init+0x98>)
 80029ec:	f003 f80c 	bl	8005a08 <HAL_TIM_Base_Init>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80029f6:	f7ff fdeb 	bl	80025d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a00:	f107 0310 	add.w	r3, r7, #16
 8002a04:	4619      	mov	r1, r3
 8002a06:	480d      	ldr	r0, [pc, #52]	; (8002a3c <MX_TIM4_Init+0x98>)
 8002a08:	f003 fb92 	bl	8006130 <HAL_TIM_ConfigClockSource>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002a12:	f7ff fddd 	bl	80025d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a16:	2320      	movs	r3, #32
 8002a18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a1e:	1d3b      	adds	r3, r7, #4
 8002a20:	4619      	mov	r1, r3
 8002a22:	4806      	ldr	r0, [pc, #24]	; (8002a3c <MX_TIM4_Init+0x98>)
 8002a24:	f003 fdd6 	bl	80065d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002a2e:	f7ff fdcf 	bl	80025d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a32:	bf00      	nop
 8002a34:	3720      	adds	r7, #32
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	200003dc 	.word	0x200003dc
 8002a40:	40000800 	.word	0x40000800

08002a44 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08a      	sub	sp, #40	; 0x28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4c:	f107 0314 	add.w	r3, r7, #20
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	60da      	str	r2, [r3, #12]
 8002a5a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a17      	ldr	r2, [pc, #92]	; (8002ac0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d128      	bne.n	8002ab8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a66:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	4a16      	ldr	r2, [pc, #88]	; (8002ac4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6453      	str	r3, [r2, #68]	; 0x44
 8002a72:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a7e:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	4a10      	ldr	r2, [pc, #64]	; (8002ac4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002a84:	f043 0310 	orr.w	r3, r3, #16
 8002a88:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f003 0310 	and.w	r3, r3, #16
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002a96:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aac:	f107 0314 	add.w	r3, r7, #20
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4805      	ldr	r0, [pc, #20]	; (8002ac8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002ab4:	f000 fcba 	bl	800342c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002ab8:	bf00      	nop
 8002aba:	3728      	adds	r7, #40	; 0x28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40010000 	.word	0x40010000
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40021000 	.word	0x40021000

08002acc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a16      	ldr	r2, [pc, #88]	; (8002b34 <HAL_TIM_Base_MspInit+0x68>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d114      	bne.n	8002b08 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ade:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <HAL_TIM_Base_MspInit+0x6c>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4a15      	ldr	r2, [pc, #84]	; (8002b38 <HAL_TIM_Base_MspInit+0x6c>)
 8002ae4:	f043 0302 	orr.w	r3, r3, #2
 8002ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aea:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <HAL_TIM_Base_MspInit+0x6c>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2100      	movs	r1, #0
 8002afa:	201d      	movs	r0, #29
 8002afc:	f000 fae5 	bl	80030ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b00:	201d      	movs	r0, #29
 8002b02:	f000 fafe 	bl	8003102 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002b06:	e010      	b.n	8002b2a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0b      	ldr	r2, [pc, #44]	; (8002b3c <HAL_TIM_Base_MspInit+0x70>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d10b      	bne.n	8002b2a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_TIM_Base_MspInit+0x6c>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a08      	ldr	r2, [pc, #32]	; (8002b38 <HAL_TIM_Base_MspInit+0x6c>)
 8002b18:	f043 0304 	orr.w	r3, r3, #4
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_TIM_Base_MspInit+0x6c>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40000400 	.word	0x40000400
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40000800 	.word	0x40000800

08002b40 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b44:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <MX_USART3_UART_Init+0x58>)
 8002b46:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <MX_USART3_UART_Init+0x5c>)
 8002b48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b4a:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <MX_USART3_UART_Init+0x58>)
 8002b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <MX_USART3_UART_Init+0x58>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b58:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <MX_USART3_UART_Init+0x58>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <MX_USART3_UART_Init+0x58>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b64:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <MX_USART3_UART_Init+0x58>)
 8002b66:	220c      	movs	r2, #12
 8002b68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <MX_USART3_UART_Init+0x58>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <MX_USART3_UART_Init+0x58>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b76:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <MX_USART3_UART_Init+0x58>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <MX_USART3_UART_Init+0x58>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b82:	4805      	ldr	r0, [pc, #20]	; (8002b98 <MX_USART3_UART_Init+0x58>)
 8002b84:	f003 fdd2 	bl	800672c <HAL_UART_Init>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002b8e:	f7ff fd1f 	bl	80025d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000428 	.word	0x20000428
 8002b9c:	40004800 	.word	0x40004800

08002ba0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b0aa      	sub	sp, #168	; 0xa8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bb8:	f107 0310 	add.w	r3, r7, #16
 8002bbc:	2284      	movs	r2, #132	; 0x84
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f005 fbb1 	bl	8008328 <memset>
  if(uartHandle->Instance==USART3)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a26      	ldr	r2, [pc, #152]	; (8002c64 <HAL_UART_MspInit+0xc4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d144      	bne.n	8002c5a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002bd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bd4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bda:	f107 0310 	add.w	r3, r7, #16
 8002bde:	4618      	mov	r0, r3
 8002be0:	f002 fb22 	bl	8005228 <HAL_RCCEx_PeriphCLKConfig>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002bea:	f7ff fcf1 	bl	80025d0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bee:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <HAL_UART_MspInit+0xc8>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	4a1d      	ldr	r2, [pc, #116]	; (8002c68 <HAL_UART_MspInit+0xc8>)
 8002bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfa:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <HAL_UART_MspInit+0xc8>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c06:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <HAL_UART_MspInit+0xc8>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	4a17      	ldr	r2, [pc, #92]	; (8002c68 <HAL_UART_MspInit+0xc8>)
 8002c0c:	f043 0308 	orr.w	r3, r3, #8
 8002c10:	6313      	str	r3, [r2, #48]	; 0x30
 8002c12:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <HAL_UART_MspInit+0xc8>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002c1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c32:	2303      	movs	r3, #3
 8002c34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c38:	2307      	movs	r3, #7
 8002c3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c3e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c42:	4619      	mov	r1, r3
 8002c44:	4809      	ldr	r0, [pc, #36]	; (8002c6c <HAL_UART_MspInit+0xcc>)
 8002c46:	f000 fbf1 	bl	800342c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	2027      	movs	r0, #39	; 0x27
 8002c50:	f000 fa3b 	bl	80030ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c54:	2027      	movs	r0, #39	; 0x27
 8002c56:	f000 fa54 	bl	8003102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	37a8      	adds	r7, #168	; 0xa8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40004800 	.word	0x40004800
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40020c00 	.word	0x40020c00

08002c70 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002c74:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002c7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c7e:	2206      	movs	r2, #6
 8002c80:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c84:	2202      	movs	r2, #2
 8002c86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002c88:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c8e:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c90:	2202      	movs	r2, #2
 8002c92:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002ca6:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002cb2:	4805      	ldr	r0, [pc, #20]	; (8002cc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cb4:	f001 fc95 	bl	80045e2 <HAL_PCD_Init>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002cbe:	f7ff fc87 	bl	80025d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	200004b0 	.word	0x200004b0

08002ccc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b0ac      	sub	sp, #176	; 0xb0
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ce4:	f107 0318 	add.w	r3, r7, #24
 8002ce8:	2284      	movs	r2, #132	; 0x84
 8002cea:	2100      	movs	r1, #0
 8002cec:	4618      	mov	r0, r3
 8002cee:	f005 fb1b 	bl	8008328 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cfa:	d159      	bne.n	8002db0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002cfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d00:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d08:	f107 0318 	add.w	r3, r7, #24
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f002 fa8b 	bl	8005228 <HAL_RCCEx_PeriphCLKConfig>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002d18:	f7ff fc5a 	bl	80025d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1c:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <HAL_PCD_MspInit+0xec>)
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	4a25      	ldr	r2, [pc, #148]	; (8002db8 <HAL_PCD_MspInit+0xec>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	6313      	str	r3, [r2, #48]	; 0x30
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <HAL_PCD_MspInit+0xec>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002d34:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002d4e:	230a      	movs	r3, #10
 8002d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4818      	ldr	r0, [pc, #96]	; (8002dbc <HAL_PCD_MspInit+0xf0>)
 8002d5c:	f000 fb66 	bl	800342c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002d74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4810      	ldr	r0, [pc, #64]	; (8002dbc <HAL_PCD_MspInit+0xf0>)
 8002d7c:	f000 fb56 	bl	800342c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002d80:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <HAL_PCD_MspInit+0xec>)
 8002d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d84:	4a0c      	ldr	r2, [pc, #48]	; (8002db8 <HAL_PCD_MspInit+0xec>)
 8002d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d8a:	6353      	str	r3, [r2, #52]	; 0x34
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <HAL_PCD_MspInit+0xec>)
 8002d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <HAL_PCD_MspInit+0xec>)
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	4a06      	ldr	r2, [pc, #24]	; (8002db8 <HAL_PCD_MspInit+0xec>)
 8002d9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002da2:	6453      	str	r3, [r2, #68]	; 0x44
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <HAL_PCD_MspInit+0xec>)
 8002da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002db0:	bf00      	nop
 8002db2:	37b0      	adds	r7, #176	; 0xb0
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40020000 	.word	0x40020000

08002dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002df8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dc4:	480d      	ldr	r0, [pc, #52]	; (8002dfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dc6:	490e      	ldr	r1, [pc, #56]	; (8002e00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002dc8:	4a0e      	ldr	r2, [pc, #56]	; (8002e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dcc:	e002      	b.n	8002dd4 <LoopCopyDataInit>

08002dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dd2:	3304      	adds	r3, #4

08002dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dd8:	d3f9      	bcc.n	8002dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dda:	4a0b      	ldr	r2, [pc, #44]	; (8002e08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ddc:	4c0b      	ldr	r4, [pc, #44]	; (8002e0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002de0:	e001      	b.n	8002de6 <LoopFillZerobss>

08002de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002de4:	3204      	adds	r2, #4

08002de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002de8:	d3fb      	bcc.n	8002de2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dea:	f7ff fd1f 	bl	800282c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dee:	f005 fa77 	bl	80082e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002df2:	f7ff fa43 	bl	800227c <main>
  bx  lr    
 8002df6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002df8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e00:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002e04:	0800b674 	.word	0x0800b674
  ldr r2, =_sbss
 8002e08:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002e0c:	200009cc 	.word	0x200009cc

08002e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e10:	e7fe      	b.n	8002e10 <ADC_IRQHandler>

08002e12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e16:	2003      	movs	r0, #3
 8002e18:	f000 f94c 	bl	80030b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f000 f805 	bl	8002e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e22:	f7ff fbdb 	bl	80025dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_InitTick+0x54>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_InitTick+0x58>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f967 	bl	800311e <HAL_SYSTICK_Config>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e00e      	b.n	8002e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b0f      	cmp	r3, #15
 8002e5e:	d80a      	bhi.n	8002e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e60:	2200      	movs	r2, #0
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	f04f 30ff 	mov.w	r0, #4294967295
 8002e68:	f000 f92f 	bl	80030ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e6c:	4a06      	ldr	r2, [pc, #24]	; (8002e88 <HAL_InitTick+0x5c>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e000      	b.n	8002e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	2000001c 	.word	0x2000001c
 8002e84:	20000024 	.word	0x20000024
 8002e88:	20000020 	.word	0x20000020

08002e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_IncTick+0x20>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_IncTick+0x24>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	4a04      	ldr	r2, [pc, #16]	; (8002eb0 <HAL_IncTick+0x24>)
 8002e9e:	6013      	str	r3, [r2, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000024 	.word	0x20000024
 8002eb0:	200009b8 	.word	0x200009b8

08002eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8002eb8:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <HAL_GetTick+0x14>)
 8002eba:	681b      	ldr	r3, [r3, #0]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	200009b8 	.word	0x200009b8

08002ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed4:	f7ff ffee 	bl	8002eb4 <HAL_GetTick>
 8002ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d005      	beq.n	8002ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_Delay+0x44>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4413      	add	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ef2:	bf00      	nop
 8002ef4:	f7ff ffde 	bl	8002eb4 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d8f7      	bhi.n	8002ef4 <HAL_Delay+0x28>
  {
  }
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000024 	.word	0x20000024

08002f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <__NVIC_SetPriorityGrouping+0x40>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f30:	4013      	ands	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <__NVIC_SetPriorityGrouping+0x44>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f42:	4a04      	ldr	r2, [pc, #16]	; (8002f54 <__NVIC_SetPriorityGrouping+0x40>)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	60d3      	str	r3, [r2, #12]
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	e000ed00 	.word	0xe000ed00
 8002f58:	05fa0000 	.word	0x05fa0000

08002f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <__NVIC_GetPriorityGrouping+0x18>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	f003 0307 	and.w	r3, r3, #7
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	db0b      	blt.n	8002fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	f003 021f 	and.w	r2, r3, #31
 8002f90:	4907      	ldr	r1, [pc, #28]	; (8002fb0 <__NVIC_EnableIRQ+0x38>)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	2001      	movs	r0, #1
 8002f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000e100 	.word	0xe000e100

08002fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	6039      	str	r1, [r7, #0]
 8002fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	db0a      	blt.n	8002fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	490c      	ldr	r1, [pc, #48]	; (8003000 <__NVIC_SetPriority+0x4c>)
 8002fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd2:	0112      	lsls	r2, r2, #4
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fdc:	e00a      	b.n	8002ff4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	4908      	ldr	r1, [pc, #32]	; (8003004 <__NVIC_SetPriority+0x50>)
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	3b04      	subs	r3, #4
 8002fec:	0112      	lsls	r2, r2, #4
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	761a      	strb	r2, [r3, #24]
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000e100 	.word	0xe000e100
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	; 0x24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f1c3 0307 	rsb	r3, r3, #7
 8003022:	2b04      	cmp	r3, #4
 8003024:	bf28      	it	cs
 8003026:	2304      	movcs	r3, #4
 8003028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	3304      	adds	r3, #4
 800302e:	2b06      	cmp	r3, #6
 8003030:	d902      	bls.n	8003038 <NVIC_EncodePriority+0x30>
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	3b03      	subs	r3, #3
 8003036:	e000      	b.n	800303a <NVIC_EncodePriority+0x32>
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800303c:	f04f 32ff 	mov.w	r2, #4294967295
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43da      	mvns	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	401a      	ands	r2, r3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003050:	f04f 31ff 	mov.w	r1, #4294967295
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	fa01 f303 	lsl.w	r3, r1, r3
 800305a:	43d9      	mvns	r1, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003060:	4313      	orrs	r3, r2
         );
}
 8003062:	4618      	mov	r0, r3
 8003064:	3724      	adds	r7, #36	; 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3b01      	subs	r3, #1
 800307c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003080:	d301      	bcc.n	8003086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003082:	2301      	movs	r3, #1
 8003084:	e00f      	b.n	80030a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003086:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <SysTick_Config+0x40>)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3b01      	subs	r3, #1
 800308c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800308e:	210f      	movs	r1, #15
 8003090:	f04f 30ff 	mov.w	r0, #4294967295
 8003094:	f7ff ff8e 	bl	8002fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <SysTick_Config+0x40>)
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800309e:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <SysTick_Config+0x40>)
 80030a0:	2207      	movs	r2, #7
 80030a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	e000e010 	.word	0xe000e010

080030b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff ff29 	bl	8002f14 <__NVIC_SetPriorityGrouping>
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b086      	sub	sp, #24
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4603      	mov	r3, r0
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030dc:	f7ff ff3e 	bl	8002f5c <__NVIC_GetPriorityGrouping>
 80030e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	6978      	ldr	r0, [r7, #20]
 80030e8:	f7ff ff8e 	bl	8003008 <NVIC_EncodePriority>
 80030ec:	4602      	mov	r2, r0
 80030ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f2:	4611      	mov	r1, r2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff ff5d 	bl	8002fb4 <__NVIC_SetPriority>
}
 80030fa:	bf00      	nop
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	4603      	mov	r3, r0
 800310a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800310c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ff31 	bl	8002f78 <__NVIC_EnableIRQ>
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff ffa2 	bl	8003070 <SysTick_Config>
 800312c:	4603      	mov	r3, r0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e014      	b.n	8003172 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	791b      	ldrb	r3, [r3, #4]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d105      	bne.n	800315e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7fe fc5d 	bl	8001a18 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2202      	movs	r2, #2
 8003162:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	795b      	ldrb	r3, [r3, #5]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_DAC_Start+0x16>
 800318c:	2302      	movs	r3, #2
 800318e:	e040      	b.n	8003212 <HAL_DAC_Start+0x98>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2202      	movs	r2, #2
 800319a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6819      	ldr	r1, [r3, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	2201      	movs	r2, #1
 80031aa:	409a      	lsls	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10f      	bne.n	80031da <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80031c4:	2b3c      	cmp	r3, #60	; 0x3c
 80031c6:	d11d      	bne.n	8003204 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	605a      	str	r2, [r3, #4]
 80031d8:	e014      	b.n	8003204 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	213c      	movs	r1, #60	; 0x3c
 80031ec:	fa01 f303 	lsl.w	r3, r1, r3
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d107      	bne.n	8003204 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0202 	orr.w	r2, r2, #2
 8003202:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800321e:	b480      	push	{r7}
 8003220:	b087      	sub	sp, #28
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d105      	bne.n	8003248 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4413      	add	r3, r2
 8003242:	3308      	adds	r3, #8
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	e004      	b.n	8003252 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	3314      	adds	r3, #20
 8003250:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	461a      	mov	r2, r3
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	371c      	adds	r7, #28
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	795b      	ldrb	r3, [r3, #5]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_DAC_ConfigChannel+0x18>
 800327c:	2302      	movs	r3, #2
 800327e:	e03c      	b.n	80032fa <HAL_DAC_ConfigChannel+0x92>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2202      	movs	r2, #2
 800328a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f003 0310 	and.w	r3, r3, #16
 800329a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4013      	ands	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6819      	ldr	r1, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	22c0      	movs	r2, #192	; 0xc0
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43da      	mvns	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	400a      	ands	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	371c      	adds	r7, #28
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b084      	sub	sp, #16
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003312:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003314:	f7ff fdce 	bl	8002eb4 <HAL_GetTick>
 8003318:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d008      	beq.n	8003338 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2280      	movs	r2, #128	; 0x80
 800332a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e052      	b.n	80033de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0216 	bic.w	r2, r2, #22
 8003346:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003356:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d103      	bne.n	8003368 <HAL_DMA_Abort+0x62>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003364:	2b00      	cmp	r3, #0
 8003366:	d007      	beq.n	8003378 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0208 	bic.w	r2, r2, #8
 8003376:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0201 	bic.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003388:	e013      	b.n	80033b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800338a:	f7ff fd93 	bl	8002eb4 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b05      	cmp	r3, #5
 8003396:	d90c      	bls.n	80033b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2203      	movs	r2, #3
 80033a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e015      	b.n	80033de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e4      	bne.n	800338a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c4:	223f      	movs	r2, #63	; 0x3f
 80033c6:	409a      	lsls	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d004      	beq.n	8003404 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2280      	movs	r2, #128	; 0x80
 80033fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e00c      	b.n	800341e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2205      	movs	r2, #5
 8003408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800342c:	b480      	push	{r7}
 800342e:	b089      	sub	sp, #36	; 0x24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800343e:	2300      	movs	r3, #0
 8003440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003442:	2300      	movs	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	e175      	b.n	8003738 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800344c:	2201      	movs	r2, #1
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4013      	ands	r3, r2
 800345e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	429a      	cmp	r2, r3
 8003466:	f040 8164 	bne.w	8003732 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	2b01      	cmp	r3, #1
 8003474:	d005      	beq.n	8003482 <HAL_GPIO_Init+0x56>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d130      	bne.n	80034e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	2203      	movs	r2, #3
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034b8:	2201      	movs	r2, #1
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 0201 	and.w	r2, r3, #1
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d017      	beq.n	8003520 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	2203      	movs	r2, #3
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4013      	ands	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d123      	bne.n	8003574 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	08da      	lsrs	r2, r3, #3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3208      	adds	r2, #8
 8003534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	220f      	movs	r2, #15
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4013      	ands	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	08da      	lsrs	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3208      	adds	r2, #8
 800356e:	69b9      	ldr	r1, [r7, #24]
 8003570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	2203      	movs	r2, #3
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 0203 	and.w	r2, r3, #3
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80be 	beq.w	8003732 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b6:	4b66      	ldr	r3, [pc, #408]	; (8003750 <HAL_GPIO_Init+0x324>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	4a65      	ldr	r2, [pc, #404]	; (8003750 <HAL_GPIO_Init+0x324>)
 80035bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035c0:	6453      	str	r3, [r2, #68]	; 0x44
 80035c2:	4b63      	ldr	r3, [pc, #396]	; (8003750 <HAL_GPIO_Init+0x324>)
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80035ce:	4a61      	ldr	r2, [pc, #388]	; (8003754 <HAL_GPIO_Init+0x328>)
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	089b      	lsrs	r3, r3, #2
 80035d4:	3302      	adds	r3, #2
 80035d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	220f      	movs	r2, #15
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43db      	mvns	r3, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a58      	ldr	r2, [pc, #352]	; (8003758 <HAL_GPIO_Init+0x32c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d037      	beq.n	800366a <HAL_GPIO_Init+0x23e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a57      	ldr	r2, [pc, #348]	; (800375c <HAL_GPIO_Init+0x330>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d031      	beq.n	8003666 <HAL_GPIO_Init+0x23a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a56      	ldr	r2, [pc, #344]	; (8003760 <HAL_GPIO_Init+0x334>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d02b      	beq.n	8003662 <HAL_GPIO_Init+0x236>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a55      	ldr	r2, [pc, #340]	; (8003764 <HAL_GPIO_Init+0x338>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d025      	beq.n	800365e <HAL_GPIO_Init+0x232>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a54      	ldr	r2, [pc, #336]	; (8003768 <HAL_GPIO_Init+0x33c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d01f      	beq.n	800365a <HAL_GPIO_Init+0x22e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a53      	ldr	r2, [pc, #332]	; (800376c <HAL_GPIO_Init+0x340>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d019      	beq.n	8003656 <HAL_GPIO_Init+0x22a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a52      	ldr	r2, [pc, #328]	; (8003770 <HAL_GPIO_Init+0x344>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d013      	beq.n	8003652 <HAL_GPIO_Init+0x226>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a51      	ldr	r2, [pc, #324]	; (8003774 <HAL_GPIO_Init+0x348>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00d      	beq.n	800364e <HAL_GPIO_Init+0x222>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a50      	ldr	r2, [pc, #320]	; (8003778 <HAL_GPIO_Init+0x34c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d007      	beq.n	800364a <HAL_GPIO_Init+0x21e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a4f      	ldr	r2, [pc, #316]	; (800377c <HAL_GPIO_Init+0x350>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d101      	bne.n	8003646 <HAL_GPIO_Init+0x21a>
 8003642:	2309      	movs	r3, #9
 8003644:	e012      	b.n	800366c <HAL_GPIO_Init+0x240>
 8003646:	230a      	movs	r3, #10
 8003648:	e010      	b.n	800366c <HAL_GPIO_Init+0x240>
 800364a:	2308      	movs	r3, #8
 800364c:	e00e      	b.n	800366c <HAL_GPIO_Init+0x240>
 800364e:	2307      	movs	r3, #7
 8003650:	e00c      	b.n	800366c <HAL_GPIO_Init+0x240>
 8003652:	2306      	movs	r3, #6
 8003654:	e00a      	b.n	800366c <HAL_GPIO_Init+0x240>
 8003656:	2305      	movs	r3, #5
 8003658:	e008      	b.n	800366c <HAL_GPIO_Init+0x240>
 800365a:	2304      	movs	r3, #4
 800365c:	e006      	b.n	800366c <HAL_GPIO_Init+0x240>
 800365e:	2303      	movs	r3, #3
 8003660:	e004      	b.n	800366c <HAL_GPIO_Init+0x240>
 8003662:	2302      	movs	r3, #2
 8003664:	e002      	b.n	800366c <HAL_GPIO_Init+0x240>
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <HAL_GPIO_Init+0x240>
 800366a:	2300      	movs	r3, #0
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	f002 0203 	and.w	r2, r2, #3
 8003672:	0092      	lsls	r2, r2, #2
 8003674:	4093      	lsls	r3, r2
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4313      	orrs	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800367c:	4935      	ldr	r1, [pc, #212]	; (8003754 <HAL_GPIO_Init+0x328>)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	089b      	lsrs	r3, r3, #2
 8003682:	3302      	adds	r3, #2
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800368a:	4b3d      	ldr	r3, [pc, #244]	; (8003780 <HAL_GPIO_Init+0x354>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	43db      	mvns	r3, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4013      	ands	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ae:	4a34      	ldr	r2, [pc, #208]	; (8003780 <HAL_GPIO_Init+0x354>)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036b4:	4b32      	ldr	r3, [pc, #200]	; (8003780 <HAL_GPIO_Init+0x354>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	43db      	mvns	r3, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4013      	ands	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036d8:	4a29      	ldr	r2, [pc, #164]	; (8003780 <HAL_GPIO_Init+0x354>)
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036de:	4b28      	ldr	r3, [pc, #160]	; (8003780 <HAL_GPIO_Init+0x354>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003702:	4a1f      	ldr	r2, [pc, #124]	; (8003780 <HAL_GPIO_Init+0x354>)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003708:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <HAL_GPIO_Init+0x354>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800372c:	4a14      	ldr	r2, [pc, #80]	; (8003780 <HAL_GPIO_Init+0x354>)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	3301      	adds	r3, #1
 8003736:	61fb      	str	r3, [r7, #28]
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	2b0f      	cmp	r3, #15
 800373c:	f67f ae86 	bls.w	800344c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	3724      	adds	r7, #36	; 0x24
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
 8003754:	40013800 	.word	0x40013800
 8003758:	40020000 	.word	0x40020000
 800375c:	40020400 	.word	0x40020400
 8003760:	40020800 	.word	0x40020800
 8003764:	40020c00 	.word	0x40020c00
 8003768:	40021000 	.word	0x40021000
 800376c:	40021400 	.word	0x40021400
 8003770:	40021800 	.word	0x40021800
 8003774:	40021c00 	.word	0x40021c00
 8003778:	40022000 	.word	0x40022000
 800377c:	40022400 	.word	0x40022400
 8003780:	40013c00 	.word	0x40013c00

08003784 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	887b      	ldrh	r3, [r7, #2]
 8003796:	4013      	ands	r3, r2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800379c:	2301      	movs	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
 80037a0:	e001      	b.n	80037a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037a2:	2300      	movs	r3, #0
 80037a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	807b      	strh	r3, [r7, #2]
 80037c0:	4613      	mov	r3, r2
 80037c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037c4:	787b      	ldrb	r3, [r7, #1]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ca:	887a      	ldrh	r2, [r7, #2]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80037d0:	e003      	b.n	80037da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80037d2:	887b      	ldrh	r3, [r7, #2]
 80037d4:	041a      	lsls	r2, r3, #16
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	619a      	str	r2, [r3, #24]
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b085      	sub	sp, #20
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	460b      	mov	r3, r1
 80037f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037f8:	887a      	ldrh	r2, [r7, #2]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4013      	ands	r3, r2
 80037fe:	041a      	lsls	r2, r3, #16
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	43d9      	mvns	r1, r3
 8003804:	887b      	ldrh	r3, [r7, #2]
 8003806:	400b      	ands	r3, r1
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	619a      	str	r2, [r3, #24]
}
 800380e:	bf00      	nop
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
	...

0800381c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e07f      	b.n	800392e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fe faa6 	bl	8001d94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2224      	movs	r2, #36	; 0x24
 800384c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0201 	bic.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800386c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800387c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d107      	bne.n	8003896 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	e006      	b.n	80038a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80038a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d104      	bne.n	80038b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6859      	ldr	r1, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <HAL_I2C_Init+0x11c>)
 80038c2:	430b      	orrs	r3, r1
 80038c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69d9      	ldr	r1, [r3, #28]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1a      	ldr	r2, [r3, #32]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	02008000 	.word	0x02008000

0800393c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	607a      	str	r2, [r7, #4]
 8003946:	461a      	mov	r2, r3
 8003948:	460b      	mov	r3, r1
 800394a:	817b      	strh	r3, [r7, #10]
 800394c:	4613      	mov	r3, r2
 800394e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b20      	cmp	r3, #32
 800395a:	f040 80da 	bne.w	8003b12 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_I2C_Master_Transmit+0x30>
 8003968:	2302      	movs	r3, #2
 800396a:	e0d3      	b.n	8003b14 <HAL_I2C_Master_Transmit+0x1d8>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003974:	f7ff fa9e 	bl	8002eb4 <HAL_GetTick>
 8003978:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	2319      	movs	r3, #25
 8003980:	2201      	movs	r2, #1
 8003982:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 fbc6 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e0be      	b.n	8003b14 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2221      	movs	r2, #33	; 0x21
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2210      	movs	r2, #16
 80039a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	893a      	ldrh	r2, [r7, #8]
 80039b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2bff      	cmp	r3, #255	; 0xff
 80039c6:	d90e      	bls.n	80039e6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	22ff      	movs	r2, #255	; 0xff
 80039cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	8979      	ldrh	r1, [r7, #10]
 80039d6:	4b51      	ldr	r3, [pc, #324]	; (8003b1c <HAL_I2C_Master_Transmit+0x1e0>)
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 fd36 	bl	8004450 <I2C_TransferConfig>
 80039e4:	e06c      	b.n	8003ac0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	8979      	ldrh	r1, [r7, #10]
 80039f8:	4b48      	ldr	r3, [pc, #288]	; (8003b1c <HAL_I2C_Master_Transmit+0x1e0>)
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 fd25 	bl	8004450 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003a06:	e05b      	b.n	8003ac0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	6a39      	ldr	r1, [r7, #32]
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 fbc3 	bl	8004198 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e07b      	b.n	8003b14 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	781a      	ldrb	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d034      	beq.n	8003ac0 <HAL_I2C_Master_Transmit+0x184>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d130      	bne.n	8003ac0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	2200      	movs	r2, #0
 8003a66:	2180      	movs	r1, #128	; 0x80
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 fb55 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e04d      	b.n	8003b14 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2bff      	cmp	r3, #255	; 0xff
 8003a80:	d90e      	bls.n	8003aa0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	22ff      	movs	r2, #255	; 0xff
 8003a86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	8979      	ldrh	r1, [r7, #10]
 8003a90:	2300      	movs	r3, #0
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 fcd9 	bl	8004450 <I2C_TransferConfig>
 8003a9e:	e00f      	b.n	8003ac0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	8979      	ldrh	r1, [r7, #10]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fcc8 	bl	8004450 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d19e      	bne.n	8003a08 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	6a39      	ldr	r1, [r7, #32]
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 fba2 	bl	8004218 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e01a      	b.n	8003b14 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6859      	ldr	r1, [r3, #4]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <HAL_I2C_Master_Transmit+0x1e4>)
 8003af2:	400b      	ands	r3, r1
 8003af4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e000      	b.n	8003b14 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
  }
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	80002000 	.word	0x80002000
 8003b20:	fe00e800 	.word	0xfe00e800

08003b24 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	4608      	mov	r0, r1
 8003b2e:	4611      	mov	r1, r2
 8003b30:	461a      	mov	r2, r3
 8003b32:	4603      	mov	r3, r0
 8003b34:	817b      	strh	r3, [r7, #10]
 8003b36:	460b      	mov	r3, r1
 8003b38:	813b      	strh	r3, [r7, #8]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b20      	cmp	r3, #32
 8003b48:	f040 80f9 	bne.w	8003d3e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <HAL_I2C_Mem_Write+0x34>
 8003b52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d105      	bne.n	8003b64 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b5e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0ed      	b.n	8003d40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_I2C_Mem_Write+0x4e>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e0e6      	b.n	8003d40 <HAL_I2C_Mem_Write+0x21c>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b7a:	f7ff f99b 	bl	8002eb4 <HAL_GetTick>
 8003b7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	2319      	movs	r3, #25
 8003b86:	2201      	movs	r2, #1
 8003b88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 fac3 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0d1      	b.n	8003d40 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2221      	movs	r2, #33	; 0x21
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2240      	movs	r2, #64	; 0x40
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a3a      	ldr	r2, [r7, #32]
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bc4:	88f8      	ldrh	r0, [r7, #6]
 8003bc6:	893a      	ldrh	r2, [r7, #8]
 8003bc8:	8979      	ldrh	r1, [r7, #10]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f9d3 	bl	8003f80 <I2C_RequestMemoryWrite>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0a9      	b.n	8003d40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2bff      	cmp	r3, #255	; 0xff
 8003bf4:	d90e      	bls.n	8003c14 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	22ff      	movs	r2, #255	; 0xff
 8003bfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	8979      	ldrh	r1, [r7, #10]
 8003c04:	2300      	movs	r3, #0
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 fc1f 	bl	8004450 <I2C_TransferConfig>
 8003c12:	e00f      	b.n	8003c34 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	8979      	ldrh	r1, [r7, #10]
 8003c26:	2300      	movs	r3, #0
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fc0e 	bl	8004450 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 faad 	bl	8004198 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e07b      	b.n	8003d40 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	781a      	ldrb	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d034      	beq.n	8003cec <HAL_I2C_Mem_Write+0x1c8>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d130      	bne.n	8003cec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c90:	2200      	movs	r2, #0
 8003c92:	2180      	movs	r1, #128	; 0x80
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 fa3f 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e04d      	b.n	8003d40 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2bff      	cmp	r3, #255	; 0xff
 8003cac:	d90e      	bls.n	8003ccc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	22ff      	movs	r2, #255	; 0xff
 8003cb2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	8979      	ldrh	r1, [r7, #10]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 fbc3 	bl	8004450 <I2C_TransferConfig>
 8003cca:	e00f      	b.n	8003cec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	8979      	ldrh	r1, [r7, #10]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fbb2 	bl	8004450 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d19e      	bne.n	8003c34 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fa8c 	bl	8004218 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e01a      	b.n	8003d40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6859      	ldr	r1, [r3, #4]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <HAL_I2C_Mem_Write+0x224>)
 8003d1e:	400b      	ands	r3, r1
 8003d20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e000      	b.n	8003d40 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003d3e:	2302      	movs	r3, #2
  }
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	fe00e800 	.word	0xfe00e800

08003d4c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	4608      	mov	r0, r1
 8003d56:	4611      	mov	r1, r2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	817b      	strh	r3, [r7, #10]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	813b      	strh	r3, [r7, #8]
 8003d62:	4613      	mov	r3, r2
 8003d64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	f040 80fd 	bne.w	8003f6e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_I2C_Mem_Read+0x34>
 8003d7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d105      	bne.n	8003d8c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d86:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0f1      	b.n	8003f70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_I2C_Mem_Read+0x4e>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e0ea      	b.n	8003f70 <HAL_I2C_Mem_Read+0x224>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003da2:	f7ff f887 	bl	8002eb4 <HAL_GetTick>
 8003da6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	2319      	movs	r3, #25
 8003dae:	2201      	movs	r2, #1
 8003db0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f9af 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0d5      	b.n	8003f70 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2222      	movs	r2, #34	; 0x22
 8003dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2240      	movs	r2, #64	; 0x40
 8003dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a3a      	ldr	r2, [r7, #32]
 8003dde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003de4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dec:	88f8      	ldrh	r0, [r7, #6]
 8003dee:	893a      	ldrh	r2, [r7, #8]
 8003df0:	8979      	ldrh	r1, [r7, #10]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	9301      	str	r3, [sp, #4]
 8003df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f913 	bl	8004028 <I2C_RequestMemoryRead>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0ad      	b.n	8003f70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2bff      	cmp	r3, #255	; 0xff
 8003e1c:	d90e      	bls.n	8003e3c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	22ff      	movs	r2, #255	; 0xff
 8003e22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	8979      	ldrh	r1, [r7, #10]
 8003e2c:	4b52      	ldr	r3, [pc, #328]	; (8003f78 <HAL_I2C_Mem_Read+0x22c>)
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 fb0b 	bl	8004450 <I2C_TransferConfig>
 8003e3a:	e00f      	b.n	8003e5c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	8979      	ldrh	r1, [r7, #10]
 8003e4e:	4b4a      	ldr	r3, [pc, #296]	; (8003f78 <HAL_I2C_Mem_Read+0x22c>)
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 fafa 	bl	8004450 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	2200      	movs	r2, #0
 8003e64:	2104      	movs	r1, #4
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f956 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e07c      	b.n	8003f70 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d034      	beq.n	8003f1c <HAL_I2C_Mem_Read+0x1d0>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d130      	bne.n	8003f1c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2180      	movs	r1, #128	; 0x80
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 f927 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e04d      	b.n	8003f70 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2bff      	cmp	r3, #255	; 0xff
 8003edc:	d90e      	bls.n	8003efc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	22ff      	movs	r2, #255	; 0xff
 8003ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	8979      	ldrh	r1, [r7, #10]
 8003eec:	2300      	movs	r3, #0
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 faab 	bl	8004450 <I2C_TransferConfig>
 8003efa:	e00f      	b.n	8003f1c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	8979      	ldrh	r1, [r7, #10]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fa9a 	bl	8004450 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d19a      	bne.n	8003e5c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f974 	bl	8004218 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e01a      	b.n	8003f70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6859      	ldr	r1, [r3, #4]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_I2C_Mem_Read+0x230>)
 8003f4e:	400b      	ands	r3, r1
 8003f50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	e000      	b.n	8003f70 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003f6e:	2302      	movs	r3, #2
  }
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	80002400 	.word	0x80002400
 8003f7c:	fe00e800 	.word	0xfe00e800

08003f80 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	4608      	mov	r0, r1
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4603      	mov	r3, r0
 8003f90:	817b      	strh	r3, [r7, #10]
 8003f92:	460b      	mov	r3, r1
 8003f94:	813b      	strh	r3, [r7, #8]
 8003f96:	4613      	mov	r3, r2
 8003f98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	8979      	ldrh	r1, [r7, #10]
 8003fa0:	4b20      	ldr	r3, [pc, #128]	; (8004024 <I2C_RequestMemoryWrite+0xa4>)
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 fa51 	bl	8004450 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	69b9      	ldr	r1, [r7, #24]
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 f8f0 	bl	8004198 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e02c      	b.n	800401c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d105      	bne.n	8003fd4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fc8:	893b      	ldrh	r3, [r7, #8]
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	629a      	str	r2, [r3, #40]	; 0x28
 8003fd2:	e015      	b.n	8004000 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fd4:	893b      	ldrh	r3, [r7, #8]
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fe2:	69fa      	ldr	r2, [r7, #28]
 8003fe4:	69b9      	ldr	r1, [r7, #24]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f8d6 	bl	8004198 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e012      	b.n	800401c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ff6:	893b      	ldrh	r3, [r7, #8]
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2200      	movs	r2, #0
 8004008:	2180      	movs	r1, #128	; 0x80
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f884 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	80002000 	.word	0x80002000

08004028 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	4608      	mov	r0, r1
 8004032:	4611      	mov	r1, r2
 8004034:	461a      	mov	r2, r3
 8004036:	4603      	mov	r3, r0
 8004038:	817b      	strh	r3, [r7, #10]
 800403a:	460b      	mov	r3, r1
 800403c:	813b      	strh	r3, [r7, #8]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	b2da      	uxtb	r2, r3
 8004046:	8979      	ldrh	r1, [r7, #10]
 8004048:	4b20      	ldr	r3, [pc, #128]	; (80040cc <I2C_RequestMemoryRead+0xa4>)
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	2300      	movs	r3, #0
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f9fe 	bl	8004450 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004054:	69fa      	ldr	r2, [r7, #28]
 8004056:	69b9      	ldr	r1, [r7, #24]
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f89d 	bl	8004198 <I2C_WaitOnTXISFlagUntilTimeout>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e02c      	b.n	80040c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d105      	bne.n	800407a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800406e:	893b      	ldrh	r3, [r7, #8]
 8004070:	b2da      	uxtb	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	629a      	str	r2, [r3, #40]	; 0x28
 8004078:	e015      	b.n	80040a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800407a:	893b      	ldrh	r3, [r7, #8]
 800407c:	0a1b      	lsrs	r3, r3, #8
 800407e:	b29b      	uxth	r3, r3
 8004080:	b2da      	uxtb	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004088:	69fa      	ldr	r2, [r7, #28]
 800408a:	69b9      	ldr	r1, [r7, #24]
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 f883 	bl	8004198 <I2C_WaitOnTXISFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e012      	b.n	80040c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800409c:	893b      	ldrh	r3, [r7, #8]
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	2200      	movs	r2, #0
 80040ae:	2140      	movs	r1, #64	; 0x40
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f831 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	80002000 	.word	0x80002000

080040d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d103      	bne.n	80040ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2200      	movs	r2, #0
 80040ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d007      	beq.n	800410c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	619a      	str	r2, [r3, #24]
  }
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	4613      	mov	r3, r2
 8004126:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004128:	e022      	b.n	8004170 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d01e      	beq.n	8004170 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004132:	f7fe febf 	bl	8002eb4 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d302      	bcc.n	8004148 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d113      	bne.n	8004170 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414c:	f043 0220 	orr.w	r2, r3, #32
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e00f      	b.n	8004190 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	4013      	ands	r3, r2
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	429a      	cmp	r2, r3
 800417e:	bf0c      	ite	eq
 8004180:	2301      	moveq	r3, #1
 8004182:	2300      	movne	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	461a      	mov	r2, r3
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	429a      	cmp	r2, r3
 800418c:	d0cd      	beq.n	800412a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041a4:	e02c      	b.n	8004200 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 f870 	bl	8004290 <I2C_IsErrorOccurred>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e02a      	b.n	8004210 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c0:	d01e      	beq.n	8004200 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c2:	f7fe fe77 	bl	8002eb4 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d302      	bcc.n	80041d8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d113      	bne.n	8004200 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041dc:	f043 0220 	orr.w	r2, r3, #32
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e007      	b.n	8004210 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b02      	cmp	r3, #2
 800420c:	d1cb      	bne.n	80041a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004224:	e028      	b.n	8004278 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f830 	bl	8004290 <I2C_IsErrorOccurred>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e026      	b.n	8004288 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423a:	f7fe fe3b 	bl	8002eb4 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	429a      	cmp	r2, r3
 8004248:	d302      	bcc.n	8004250 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d113      	bne.n	8004278 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004254:	f043 0220 	orr.w	r2, r3, #32
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e007      	b.n	8004288 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b20      	cmp	r3, #32
 8004284:	d1cf      	bne.n	8004226 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08a      	sub	sp, #40	; 0x28
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d068      	beq.n	800438e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2210      	movs	r2, #16
 80042c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042c4:	e049      	b.n	800435a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042cc:	d045      	beq.n	800435a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042ce:	f7fe fdf1 	bl	8002eb4 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d302      	bcc.n	80042e4 <I2C_IsErrorOccurred+0x54>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d13a      	bne.n	800435a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004306:	d121      	bne.n	800434c <I2C_IsErrorOccurred+0xbc>
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800430e:	d01d      	beq.n	800434c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	2b20      	cmp	r3, #32
 8004314:	d01a      	beq.n	800434c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004324:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004326:	f7fe fdc5 	bl	8002eb4 <HAL_GetTick>
 800432a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800432c:	e00e      	b.n	800434c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800432e:	f7fe fdc1 	bl	8002eb4 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b19      	cmp	r3, #25
 800433a:	d907      	bls.n	800434c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	f043 0320 	orr.w	r3, r3, #32
 8004342:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800434a:	e006      	b.n	800435a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	2b20      	cmp	r3, #32
 8004358:	d1e9      	bne.n	800432e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b20      	cmp	r3, #32
 8004366:	d003      	beq.n	8004370 <I2C_IsErrorOccurred+0xe0>
 8004368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0aa      	beq.n	80042c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004374:	2b00      	cmp	r3, #0
 8004376:	d103      	bne.n	8004380 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2220      	movs	r2, #32
 800437e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	f043 0304 	orr.w	r3, r3, #4
 8004386:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00b      	beq.n	80043b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00b      	beq.n	80043da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	f043 0308 	orr.w	r3, r3, #8
 80043c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00b      	beq.n	80043fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	f043 0302 	orr.w	r3, r3, #2
 80043ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80043fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01c      	beq.n	800443e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f7ff fe63 	bl	80040d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6859      	ldr	r1, [r3, #4]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	4b0d      	ldr	r3, [pc, #52]	; (800444c <I2C_IsErrorOccurred+0x1bc>)
 8004416:	400b      	ands	r3, r1
 8004418:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	431a      	orrs	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800443e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004442:	4618      	mov	r0, r3
 8004444:	3728      	adds	r7, #40	; 0x28
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	fe00e800 	.word	0xfe00e800

08004450 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	607b      	str	r3, [r7, #4]
 800445a:	460b      	mov	r3, r1
 800445c:	817b      	strh	r3, [r7, #10]
 800445e:	4613      	mov	r3, r2
 8004460:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004462:	897b      	ldrh	r3, [r7, #10]
 8004464:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004468:	7a7b      	ldrb	r3, [r7, #9]
 800446a:	041b      	lsls	r3, r3, #16
 800446c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004470:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	4313      	orrs	r3, r2
 800447a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800447e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	0d5b      	lsrs	r3, r3, #21
 800448a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800448e:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <I2C_TransferConfig+0x60>)
 8004490:	430b      	orrs	r3, r1
 8004492:	43db      	mvns	r3, r3
 8004494:	ea02 0103 	and.w	r1, r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	430a      	orrs	r2, r1
 80044a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	03ff63ff 	.word	0x03ff63ff

080044b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	d138      	bne.n	800453c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e032      	b.n	800453e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2224      	movs	r2, #36	; 0x24
 80044e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0201 	bic.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004506:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6819      	ldr	r1, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	e000      	b.n	800453e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800453c:	2302      	movs	r3, #2
  }
}
 800453e:	4618      	mov	r0, r3
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800454a:	b480      	push	{r7}
 800454c:	b085      	sub	sp, #20
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b20      	cmp	r3, #32
 800455e:	d139      	bne.n	80045d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004566:	2b01      	cmp	r3, #1
 8004568:	d101      	bne.n	800456e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800456a:	2302      	movs	r3, #2
 800456c:	e033      	b.n	80045d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2224      	movs	r2, #36	; 0x24
 800457a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0201 	bic.w	r2, r2, #1
 800458c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800459c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	e000      	b.n	80045d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045d4:	2302      	movs	r3, #2
  }
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045e4:	b08f      	sub	sp, #60	; 0x3c
 80045e6:	af0a      	add	r7, sp, #40	; 0x28
 80045e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e116      	b.n	8004822 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fe fb5c 	bl	8002ccc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2203      	movs	r2, #3
 8004618:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004624:	2b00      	cmp	r3, #0
 8004626:	d102      	bne.n	800462e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f003 fbae 	bl	8007d94 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	687e      	ldr	r6, [r7, #4]
 8004640:	466d      	mov	r5, sp
 8004642:	f106 0410 	add.w	r4, r6, #16
 8004646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800464a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800464c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800464e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004652:	e885 0003 	stmia.w	r5, {r0, r1}
 8004656:	1d33      	adds	r3, r6, #4
 8004658:	cb0e      	ldmia	r3, {r1, r2, r3}
 800465a:	6838      	ldr	r0, [r7, #0]
 800465c:	f003 fb42 	bl	8007ce4 <USB_CoreInit>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2202      	movs	r2, #2
 800466a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e0d7      	b.n	8004822 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2100      	movs	r1, #0
 8004678:	4618      	mov	r0, r3
 800467a:	f003 fb9c 	bl	8007db6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800467e:	2300      	movs	r3, #0
 8004680:	73fb      	strb	r3, [r7, #15]
 8004682:	e04a      	b.n	800471a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004684:	7bfa      	ldrb	r2, [r7, #15]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	333d      	adds	r3, #61	; 0x3d
 8004694:	2201      	movs	r2, #1
 8004696:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004698:	7bfa      	ldrb	r2, [r7, #15]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	333c      	adds	r3, #60	; 0x3c
 80046a8:	7bfa      	ldrb	r2, [r7, #15]
 80046aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046ac:	7bfa      	ldrb	r2, [r7, #15]
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	b298      	uxth	r0, r3
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	3344      	adds	r3, #68	; 0x44
 80046c0:	4602      	mov	r2, r0
 80046c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046c4:	7bfa      	ldrb	r2, [r7, #15]
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	4613      	mov	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	3340      	adds	r3, #64	; 0x40
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046d8:	7bfa      	ldrb	r2, [r7, #15]
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	4613      	mov	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	3348      	adds	r3, #72	; 0x48
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046ec:	7bfa      	ldrb	r2, [r7, #15]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	4413      	add	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	334c      	adds	r3, #76	; 0x4c
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004700:	7bfa      	ldrb	r2, [r7, #15]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	4413      	add	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	3354      	adds	r3, #84	; 0x54
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	3301      	adds	r3, #1
 8004718:	73fb      	strb	r3, [r7, #15]
 800471a:	7bfa      	ldrb	r2, [r7, #15]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	429a      	cmp	r2, r3
 8004722:	d3af      	bcc.n	8004684 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004724:	2300      	movs	r3, #0
 8004726:	73fb      	strb	r3, [r7, #15]
 8004728:	e044      	b.n	80047b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800472a:	7bfa      	ldrb	r2, [r7, #15]
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800473c:	2200      	movs	r2, #0
 800473e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004740:	7bfa      	ldrb	r2, [r7, #15]
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004752:	7bfa      	ldrb	r2, [r7, #15]
 8004754:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004756:	7bfa      	ldrb	r2, [r7, #15]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004768:	2200      	movs	r2, #0
 800476a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800476c:	7bfa      	ldrb	r2, [r7, #15]
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4613      	mov	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004782:	7bfa      	ldrb	r2, [r7, #15]
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004798:	7bfa      	ldrb	r2, [r7, #15]
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	4613      	mov	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	3301      	adds	r3, #1
 80047b2:	73fb      	strb	r3, [r7, #15]
 80047b4:	7bfa      	ldrb	r2, [r7, #15]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d3b5      	bcc.n	800472a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	687e      	ldr	r6, [r7, #4]
 80047c6:	466d      	mov	r5, sp
 80047c8:	f106 0410 	add.w	r4, r6, #16
 80047cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80047dc:	1d33      	adds	r3, r6, #4
 80047de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047e0:	6838      	ldr	r0, [r7, #0]
 80047e2:	f003 fb35 	bl	8007e50 <USB_DevInit>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e014      	b.n	8004822 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	2b01      	cmp	r3, #1
 800480e:	d102      	bne.n	8004816 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f80b 	bl	800482c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f003 fcf3 	bl	8008206 <USB_DevDisconnect>

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800482c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800485a:	4b05      	ldr	r3, [pc, #20]	; (8004870 <HAL_PCDEx_ActivateLPM+0x44>)
 800485c:	4313      	orrs	r3, r2
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	10000003 	.word	0x10000003

08004874 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a04      	ldr	r2, [pc, #16]	; (8004890 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800487e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004882:	6013      	str	r3, [r2, #0]
}
 8004884:	bf00      	nop
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40007000 	.word	0x40007000

08004894 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800489c:	2300      	movs	r3, #0
 800489e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e291      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 8087 	beq.w	80049c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048b8:	4b96      	ldr	r3, [pc, #600]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 030c 	and.w	r3, r3, #12
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d00c      	beq.n	80048de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c4:	4b93      	ldr	r3, [pc, #588]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 030c 	and.w	r3, r3, #12
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d112      	bne.n	80048f6 <HAL_RCC_OscConfig+0x62>
 80048d0:	4b90      	ldr	r3, [pc, #576]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048dc:	d10b      	bne.n	80048f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048de:	4b8d      	ldr	r3, [pc, #564]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d06c      	beq.n	80049c4 <HAL_RCC_OscConfig+0x130>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d168      	bne.n	80049c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e26b      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fe:	d106      	bne.n	800490e <HAL_RCC_OscConfig+0x7a>
 8004900:	4b84      	ldr	r3, [pc, #528]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a83      	ldr	r2, [pc, #524]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	e02e      	b.n	800496c <HAL_RCC_OscConfig+0xd8>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10c      	bne.n	8004930 <HAL_RCC_OscConfig+0x9c>
 8004916:	4b7f      	ldr	r3, [pc, #508]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a7e      	ldr	r2, [pc, #504]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 800491c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	4b7c      	ldr	r3, [pc, #496]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a7b      	ldr	r2, [pc, #492]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e01d      	b.n	800496c <HAL_RCC_OscConfig+0xd8>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004938:	d10c      	bne.n	8004954 <HAL_RCC_OscConfig+0xc0>
 800493a:	4b76      	ldr	r3, [pc, #472]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a75      	ldr	r2, [pc, #468]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	4b73      	ldr	r3, [pc, #460]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a72      	ldr	r2, [pc, #456]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 800494c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	e00b      	b.n	800496c <HAL_RCC_OscConfig+0xd8>
 8004954:	4b6f      	ldr	r3, [pc, #444]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a6e      	ldr	r2, [pc, #440]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 800495a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	4b6c      	ldr	r3, [pc, #432]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a6b      	ldr	r2, [pc, #428]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800496a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d013      	beq.n	800499c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fe fa9e 	bl	8002eb4 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800497c:	f7fe fa9a 	bl	8002eb4 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b64      	cmp	r3, #100	; 0x64
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e21f      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498e:	4b61      	ldr	r3, [pc, #388]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0f0      	beq.n	800497c <HAL_RCC_OscConfig+0xe8>
 800499a:	e014      	b.n	80049c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499c:	f7fe fa8a 	bl	8002eb4 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a4:	f7fe fa86 	bl	8002eb4 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b64      	cmp	r3, #100	; 0x64
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e20b      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b6:	4b57      	ldr	r3, [pc, #348]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x110>
 80049c2:	e000      	b.n	80049c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d069      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049d2:	4b50      	ldr	r3, [pc, #320]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049de:	4b4d      	ldr	r3, [pc, #308]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d11c      	bne.n	8004a24 <HAL_RCC_OscConfig+0x190>
 80049ea:	4b4a      	ldr	r3, [pc, #296]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d116      	bne.n	8004a24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049f6:	4b47      	ldr	r3, [pc, #284]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <HAL_RCC_OscConfig+0x17a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d001      	beq.n	8004a0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e1df      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0e:	4b41      	ldr	r3, [pc, #260]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	493d      	ldr	r1, [pc, #244]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a22:	e040      	b.n	8004aa6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d023      	beq.n	8004a74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a2c:	4b39      	ldr	r3, [pc, #228]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a38      	ldr	r2, [pc, #224]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a32:	f043 0301 	orr.w	r3, r3, #1
 8004a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a38:	f7fe fa3c 	bl	8002eb4 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a40:	f7fe fa38 	bl	8002eb4 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e1bd      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a52:	4b30      	ldr	r3, [pc, #192]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f0      	beq.n	8004a40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5e:	4b2d      	ldr	r3, [pc, #180]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	4929      	ldr	r1, [pc, #164]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	600b      	str	r3, [r1, #0]
 8004a72:	e018      	b.n	8004aa6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a74:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a26      	ldr	r2, [pc, #152]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a7a:	f023 0301 	bic.w	r3, r3, #1
 8004a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a80:	f7fe fa18 	bl	8002eb4 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a88:	f7fe fa14 	bl	8002eb4 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e199      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a9a:	4b1e      	ldr	r3, [pc, #120]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d038      	beq.n	8004b24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d019      	beq.n	8004aee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aba:	4b16      	ldr	r3, [pc, #88]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004abe:	4a15      	ldr	r2, [pc, #84]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004ac0:	f043 0301 	orr.w	r3, r3, #1
 8004ac4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac6:	f7fe f9f5 	bl	8002eb4 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ace:	f7fe f9f1 	bl	8002eb4 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e176      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae0:	4b0c      	ldr	r3, [pc, #48]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f0      	beq.n	8004ace <HAL_RCC_OscConfig+0x23a>
 8004aec:	e01a      	b.n	8004b24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aee:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af2:	4a08      	ldr	r2, [pc, #32]	; (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004af4:	f023 0301 	bic.w	r3, r3, #1
 8004af8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afa:	f7fe f9db 	bl	8002eb4 <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b00:	e00a      	b.n	8004b18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b02:	f7fe f9d7 	bl	8002eb4 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d903      	bls.n	8004b18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e15c      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
 8004b14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b18:	4b91      	ldr	r3, [pc, #580]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1ee      	bne.n	8004b02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 80a4 	beq.w	8004c7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b32:	4b8b      	ldr	r3, [pc, #556]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10d      	bne.n	8004b5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b3e:	4b88      	ldr	r3, [pc, #544]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	4a87      	ldr	r2, [pc, #540]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b48:	6413      	str	r3, [r2, #64]	; 0x40
 8004b4a:	4b85      	ldr	r3, [pc, #532]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b52:	60bb      	str	r3, [r7, #8]
 8004b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b56:	2301      	movs	r3, #1
 8004b58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b5a:	4b82      	ldr	r3, [pc, #520]	; (8004d64 <HAL_RCC_OscConfig+0x4d0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d118      	bne.n	8004b98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004b66:	4b7f      	ldr	r3, [pc, #508]	; (8004d64 <HAL_RCC_OscConfig+0x4d0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a7e      	ldr	r2, [pc, #504]	; (8004d64 <HAL_RCC_OscConfig+0x4d0>)
 8004b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b72:	f7fe f99f 	bl	8002eb4 <HAL_GetTick>
 8004b76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b78:	e008      	b.n	8004b8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7a:	f7fe f99b 	bl	8002eb4 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b64      	cmp	r3, #100	; 0x64
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e120      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b8c:	4b75      	ldr	r3, [pc, #468]	; (8004d64 <HAL_RCC_OscConfig+0x4d0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0f0      	beq.n	8004b7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d106      	bne.n	8004bae <HAL_RCC_OscConfig+0x31a>
 8004ba0:	4b6f      	ldr	r3, [pc, #444]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba4:	4a6e      	ldr	r2, [pc, #440]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	6713      	str	r3, [r2, #112]	; 0x70
 8004bac:	e02d      	b.n	8004c0a <HAL_RCC_OscConfig+0x376>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10c      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x33c>
 8004bb6:	4b6a      	ldr	r3, [pc, #424]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bba:	4a69      	ldr	r2, [pc, #420]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc2:	4b67      	ldr	r3, [pc, #412]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc6:	4a66      	ldr	r2, [pc, #408]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bc8:	f023 0304 	bic.w	r3, r3, #4
 8004bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bce:	e01c      	b.n	8004c0a <HAL_RCC_OscConfig+0x376>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2b05      	cmp	r3, #5
 8004bd6:	d10c      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x35e>
 8004bd8:	4b61      	ldr	r3, [pc, #388]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bdc:	4a60      	ldr	r2, [pc, #384]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bde:	f043 0304 	orr.w	r3, r3, #4
 8004be2:	6713      	str	r3, [r2, #112]	; 0x70
 8004be4:	4b5e      	ldr	r3, [pc, #376]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	4a5d      	ldr	r2, [pc, #372]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf0:	e00b      	b.n	8004c0a <HAL_RCC_OscConfig+0x376>
 8004bf2:	4b5b      	ldr	r3, [pc, #364]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf6:	4a5a      	ldr	r2, [pc, #360]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bf8:	f023 0301 	bic.w	r3, r3, #1
 8004bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bfe:	4b58      	ldr	r3, [pc, #352]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c02:	4a57      	ldr	r2, [pc, #348]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c04:	f023 0304 	bic.w	r3, r3, #4
 8004c08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d015      	beq.n	8004c3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c12:	f7fe f94f 	bl	8002eb4 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c18:	e00a      	b.n	8004c30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c1a:	f7fe f94b 	bl	8002eb4 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e0ce      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c30:	4b4b      	ldr	r3, [pc, #300]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0ee      	beq.n	8004c1a <HAL_RCC_OscConfig+0x386>
 8004c3c:	e014      	b.n	8004c68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3e:	f7fe f939 	bl	8002eb4 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c44:	e00a      	b.n	8004c5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c46:	f7fe f935 	bl	8002eb4 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e0b8      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c5c:	4b40      	ldr	r3, [pc, #256]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1ee      	bne.n	8004c46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c68:	7dfb      	ldrb	r3, [r7, #23]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d105      	bne.n	8004c7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c6e:	4b3c      	ldr	r3, [pc, #240]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	4a3b      	ldr	r2, [pc, #236]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 80a4 	beq.w	8004dcc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c84:	4b36      	ldr	r3, [pc, #216]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 030c 	and.w	r3, r3, #12
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d06b      	beq.n	8004d68 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d149      	bne.n	8004d2c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c98:	4b31      	ldr	r3, [pc, #196]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a30      	ldr	r2, [pc, #192]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca4:	f7fe f906 	bl	8002eb4 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cac:	f7fe f902 	bl	8002eb4 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e087      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cbe:	4b28      	ldr	r3, [pc, #160]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f0      	bne.n	8004cac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69da      	ldr	r2, [r3, #28]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	019b      	lsls	r3, r3, #6
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	085b      	lsrs	r3, r3, #1
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	041b      	lsls	r3, r3, #16
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	061b      	lsls	r3, r3, #24
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	4a1b      	ldr	r2, [pc, #108]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004cf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cf6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cf8:	4b19      	ldr	r3, [pc, #100]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a18      	ldr	r2, [pc, #96]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d04:	f7fe f8d6 	bl	8002eb4 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fe f8d2 	bl	8002eb4 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e057      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1e:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x478>
 8004d2a:	e04f      	b.n	8004dcc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0b      	ldr	r2, [pc, #44]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7fe f8bc 	bl	8002eb4 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d40:	f7fe f8b8 	bl	8002eb4 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e03d      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d52:	4b03      	ldr	r3, [pc, #12]	; (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f0      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4ac>
 8004d5e:	e035      	b.n	8004dcc <HAL_RCC_OscConfig+0x538>
 8004d60:	40023800 	.word	0x40023800
 8004d64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004d68:	4b1b      	ldr	r3, [pc, #108]	; (8004dd8 <HAL_RCC_OscConfig+0x544>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d028      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d121      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d11a      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d98:	4013      	ands	r3, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d9e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d111      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	085b      	lsrs	r3, r3, #1
 8004db0:	3b01      	subs	r3, #1
 8004db2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d107      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40023800 	.word	0x40023800

08004ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0d0      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004df4:	4b6a      	ldr	r3, [pc, #424]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d910      	bls.n	8004e24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e02:	4b67      	ldr	r3, [pc, #412]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f023 020f 	bic.w	r2, r3, #15
 8004e0a:	4965      	ldr	r1, [pc, #404]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e12:	4b63      	ldr	r3, [pc, #396]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d001      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e0b8      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d020      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d005      	beq.n	8004e48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e3c:	4b59      	ldr	r3, [pc, #356]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	4a58      	ldr	r2, [pc, #352]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0308 	and.w	r3, r3, #8
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e54:	4b53      	ldr	r3, [pc, #332]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	4a52      	ldr	r2, [pc, #328]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e60:	4b50      	ldr	r3, [pc, #320]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	494d      	ldr	r1, [pc, #308]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d040      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d107      	bne.n	8004e96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e86:	4b47      	ldr	r3, [pc, #284]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d115      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e07f      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d107      	bne.n	8004eae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e9e:	4b41      	ldr	r3, [pc, #260]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d109      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e073      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eae:	4b3d      	ldr	r3, [pc, #244]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e06b      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ebe:	4b39      	ldr	r3, [pc, #228]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f023 0203 	bic.w	r2, r3, #3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	4936      	ldr	r1, [pc, #216]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed0:	f7fd fff0 	bl	8002eb4 <HAL_GetTick>
 8004ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed6:	e00a      	b.n	8004eee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed8:	f7fd ffec 	bl	8002eb4 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e053      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eee:	4b2d      	ldr	r3, [pc, #180]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 020c 	and.w	r2, r3, #12
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d1eb      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f00:	4b27      	ldr	r3, [pc, #156]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 030f 	and.w	r3, r3, #15
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d210      	bcs.n	8004f30 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0e:	4b24      	ldr	r3, [pc, #144]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f023 020f 	bic.w	r2, r3, #15
 8004f16:	4922      	ldr	r1, [pc, #136]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f1e:	4b20      	ldr	r3, [pc, #128]	; (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d001      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e032      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d008      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f3c:	4b19      	ldr	r3, [pc, #100]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	4916      	ldr	r1, [pc, #88]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d009      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f5a:	4b12      	ldr	r3, [pc, #72]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	490e      	ldr	r1, [pc, #56]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f6e:	f000 f821 	bl	8004fb4 <HAL_RCC_GetSysClockFreq>
 8004f72:	4602      	mov	r2, r0
 8004f74:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	091b      	lsrs	r3, r3, #4
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	490a      	ldr	r1, [pc, #40]	; (8004fa8 <HAL_RCC_ClockConfig+0x1cc>)
 8004f80:	5ccb      	ldrb	r3, [r1, r3]
 8004f82:	fa22 f303 	lsr.w	r3, r2, r3
 8004f86:	4a09      	ldr	r2, [pc, #36]	; (8004fac <HAL_RCC_ClockConfig+0x1d0>)
 8004f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f8a:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <HAL_RCC_ClockConfig+0x1d4>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fd ff4c 	bl	8002e2c <HAL_InitTick>

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40023c00 	.word	0x40023c00
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	0800b270 	.word	0x0800b270
 8004fac:	2000001c 	.word	0x2000001c
 8004fb0:	20000020 	.word	0x20000020

08004fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fb8:	b094      	sub	sp, #80	; 0x50
 8004fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fcc:	4b79      	ldr	r3, [pc, #484]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f003 030c 	and.w	r3, r3, #12
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d00d      	beq.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	f200 80e1 	bhi.w	80051a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d003      	beq.n	8004fee <HAL_RCC_GetSysClockFreq+0x3a>
 8004fe6:	e0db      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fe8:	4b73      	ldr	r3, [pc, #460]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fec:	e0db      	b.n	80051a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fee:	4b73      	ldr	r3, [pc, #460]	; (80051bc <HAL_RCC_GetSysClockFreq+0x208>)
 8004ff0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ff2:	e0d8      	b.n	80051a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ff4:	4b6f      	ldr	r3, [pc, #444]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ffc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ffe:	4b6d      	ldr	r3, [pc, #436]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d063      	beq.n	80050d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800500a:	4b6a      	ldr	r3, [pc, #424]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	099b      	lsrs	r3, r3, #6
 8005010:	2200      	movs	r2, #0
 8005012:	63bb      	str	r3, [r7, #56]	; 0x38
 8005014:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501c:	633b      	str	r3, [r7, #48]	; 0x30
 800501e:	2300      	movs	r3, #0
 8005020:	637b      	str	r3, [r7, #52]	; 0x34
 8005022:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005026:	4622      	mov	r2, r4
 8005028:	462b      	mov	r3, r5
 800502a:	f04f 0000 	mov.w	r0, #0
 800502e:	f04f 0100 	mov.w	r1, #0
 8005032:	0159      	lsls	r1, r3, #5
 8005034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005038:	0150      	lsls	r0, r2, #5
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4621      	mov	r1, r4
 8005040:	1a51      	subs	r1, r2, r1
 8005042:	6139      	str	r1, [r7, #16]
 8005044:	4629      	mov	r1, r5
 8005046:	eb63 0301 	sbc.w	r3, r3, r1
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005058:	4659      	mov	r1, fp
 800505a:	018b      	lsls	r3, r1, #6
 800505c:	4651      	mov	r1, sl
 800505e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005062:	4651      	mov	r1, sl
 8005064:	018a      	lsls	r2, r1, #6
 8005066:	4651      	mov	r1, sl
 8005068:	ebb2 0801 	subs.w	r8, r2, r1
 800506c:	4659      	mov	r1, fp
 800506e:	eb63 0901 	sbc.w	r9, r3, r1
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800507e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005086:	4690      	mov	r8, r2
 8005088:	4699      	mov	r9, r3
 800508a:	4623      	mov	r3, r4
 800508c:	eb18 0303 	adds.w	r3, r8, r3
 8005090:	60bb      	str	r3, [r7, #8]
 8005092:	462b      	mov	r3, r5
 8005094:	eb49 0303 	adc.w	r3, r9, r3
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	f04f 0300 	mov.w	r3, #0
 80050a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050a6:	4629      	mov	r1, r5
 80050a8:	024b      	lsls	r3, r1, #9
 80050aa:	4621      	mov	r1, r4
 80050ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050b0:	4621      	mov	r1, r4
 80050b2:	024a      	lsls	r2, r1, #9
 80050b4:	4610      	mov	r0, r2
 80050b6:	4619      	mov	r1, r3
 80050b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ba:	2200      	movs	r2, #0
 80050bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80050be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050c4:	f7fb fe30 	bl	8000d28 <__aeabi_uldivmod>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4613      	mov	r3, r2
 80050ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d0:	e058      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050d2:	4b38      	ldr	r3, [pc, #224]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	099b      	lsrs	r3, r3, #6
 80050d8:	2200      	movs	r2, #0
 80050da:	4618      	mov	r0, r3
 80050dc:	4611      	mov	r1, r2
 80050de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050e2:	623b      	str	r3, [r7, #32]
 80050e4:	2300      	movs	r3, #0
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24
 80050e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050ec:	4642      	mov	r2, r8
 80050ee:	464b      	mov	r3, r9
 80050f0:	f04f 0000 	mov.w	r0, #0
 80050f4:	f04f 0100 	mov.w	r1, #0
 80050f8:	0159      	lsls	r1, r3, #5
 80050fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050fe:	0150      	lsls	r0, r2, #5
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4641      	mov	r1, r8
 8005106:	ebb2 0a01 	subs.w	sl, r2, r1
 800510a:	4649      	mov	r1, r9
 800510c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800511c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005120:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005124:	ebb2 040a 	subs.w	r4, r2, sl
 8005128:	eb63 050b 	sbc.w	r5, r3, fp
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	00eb      	lsls	r3, r5, #3
 8005136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800513a:	00e2      	lsls	r2, r4, #3
 800513c:	4614      	mov	r4, r2
 800513e:	461d      	mov	r5, r3
 8005140:	4643      	mov	r3, r8
 8005142:	18e3      	adds	r3, r4, r3
 8005144:	603b      	str	r3, [r7, #0]
 8005146:	464b      	mov	r3, r9
 8005148:	eb45 0303 	adc.w	r3, r5, r3
 800514c:	607b      	str	r3, [r7, #4]
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	f04f 0300 	mov.w	r3, #0
 8005156:	e9d7 4500 	ldrd	r4, r5, [r7]
 800515a:	4629      	mov	r1, r5
 800515c:	028b      	lsls	r3, r1, #10
 800515e:	4621      	mov	r1, r4
 8005160:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005164:	4621      	mov	r1, r4
 8005166:	028a      	lsls	r2, r1, #10
 8005168:	4610      	mov	r0, r2
 800516a:	4619      	mov	r1, r3
 800516c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800516e:	2200      	movs	r2, #0
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	61fa      	str	r2, [r7, #28]
 8005174:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005178:	f7fb fdd6 	bl	8000d28 <__aeabi_uldivmod>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4613      	mov	r3, r2
 8005182:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005184:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	0c1b      	lsrs	r3, r3, #16
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	3301      	adds	r3, #1
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005194:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005198:	fbb2 f3f3 	udiv	r3, r2, r3
 800519c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800519e:	e002      	b.n	80051a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051a0:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80051a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3750      	adds	r7, #80	; 0x50
 80051ac:	46bd      	mov	sp, r7
 80051ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051b2:	bf00      	nop
 80051b4:	40023800 	.word	0x40023800
 80051b8:	00f42400 	.word	0x00f42400
 80051bc:	007a1200 	.word	0x007a1200

080051c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051c4:	4b03      	ldr	r3, [pc, #12]	; (80051d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80051c6:	681b      	ldr	r3, [r3, #0]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	2000001c 	.word	0x2000001c

080051d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051dc:	f7ff fff0 	bl	80051c0 <HAL_RCC_GetHCLKFreq>
 80051e0:	4602      	mov	r2, r0
 80051e2:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	0a9b      	lsrs	r3, r3, #10
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	4903      	ldr	r1, [pc, #12]	; (80051fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ee:	5ccb      	ldrb	r3, [r1, r3]
 80051f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40023800 	.word	0x40023800
 80051fc:	0800b280 	.word	0x0800b280

08005200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005204:	f7ff ffdc 	bl	80051c0 <HAL_RCC_GetHCLKFreq>
 8005208:	4602      	mov	r2, r0
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	0b5b      	lsrs	r3, r3, #13
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	4903      	ldr	r1, [pc, #12]	; (8005224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005216:	5ccb      	ldrb	r3, [r1, r3]
 8005218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800521c:	4618      	mov	r0, r3
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40023800 	.word	0x40023800
 8005224:	0800b280 	.word	0x0800b280

08005228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800523c:	2300      	movs	r3, #0
 800523e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005240:	2300      	movs	r3, #0
 8005242:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	d012      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005250:	4b69      	ldr	r3, [pc, #420]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	4a68      	ldr	r2, [pc, #416]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005256:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800525a:	6093      	str	r3, [r2, #8]
 800525c:	4b66      	ldr	r3, [pc, #408]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005264:	4964      	ldr	r1, [pc, #400]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005266:	4313      	orrs	r3, r2
 8005268:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005272:	2301      	movs	r3, #1
 8005274:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d017      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005282:	4b5d      	ldr	r3, [pc, #372]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005288:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005290:	4959      	ldr	r1, [pc, #356]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052a0:	d101      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80052a2:	2301      	movs	r3, #1
 80052a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80052ae:	2301      	movs	r3, #1
 80052b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d017      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052be:	4b4e      	ldr	r3, [pc, #312]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	494a      	ldr	r1, [pc, #296]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052dc:	d101      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80052de:	2301      	movs	r3, #1
 80052e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80052ea:	2301      	movs	r3, #1
 80052ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80052fa:	2301      	movs	r3, #1
 80052fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 808b 	beq.w	8005422 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800530c:	4b3a      	ldr	r3, [pc, #232]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800530e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005310:	4a39      	ldr	r2, [pc, #228]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005316:	6413      	str	r3, [r2, #64]	; 0x40
 8005318:	4b37      	ldr	r3, [pc, #220]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005320:	60bb      	str	r3, [r7, #8]
 8005322:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005324:	4b35      	ldr	r3, [pc, #212]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a34      	ldr	r2, [pc, #208]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800532a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800532e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005330:	f7fd fdc0 	bl	8002eb4 <HAL_GetTick>
 8005334:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005336:	e008      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005338:	f7fd fdbc 	bl	8002eb4 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b64      	cmp	r3, #100	; 0x64
 8005344:	d901      	bls.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e357      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800534a:	4b2c      	ldr	r3, [pc, #176]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f0      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005356:	4b28      	ldr	r3, [pc, #160]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d035      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	429a      	cmp	r2, r3
 8005372:	d02e      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005374:	4b20      	ldr	r3, [pc, #128]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800537c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800537e:	4b1e      	ldr	r3, [pc, #120]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005382:	4a1d      	ldr	r2, [pc, #116]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005388:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800538a:	4b1b      	ldr	r3, [pc, #108]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538e:	4a1a      	ldr	r2, [pc, #104]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005394:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005396:	4a18      	ldr	r2, [pc, #96]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800539c:	4b16      	ldr	r3, [pc, #88]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800539e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d114      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a8:	f7fd fd84 	bl	8002eb4 <HAL_GetTick>
 80053ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ae:	e00a      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053b0:	f7fd fd80 	bl	8002eb4 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80053be:	4293      	cmp	r3, r2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e319      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c6:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0ee      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053de:	d111      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80053e0:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053ec:	4b04      	ldr	r3, [pc, #16]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80053ee:	400b      	ands	r3, r1
 80053f0:	4901      	ldr	r1, [pc, #4]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	608b      	str	r3, [r1, #8]
 80053f6:	e00b      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80053f8:	40023800 	.word	0x40023800
 80053fc:	40007000 	.word	0x40007000
 8005400:	0ffffcff 	.word	0x0ffffcff
 8005404:	4baa      	ldr	r3, [pc, #680]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	4aa9      	ldr	r2, [pc, #676]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800540a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800540e:	6093      	str	r3, [r2, #8]
 8005410:	4ba7      	ldr	r3, [pc, #668]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005412:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800541c:	49a4      	ldr	r1, [pc, #656]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800541e:	4313      	orrs	r3, r2
 8005420:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0310 	and.w	r3, r3, #16
 800542a:	2b00      	cmp	r3, #0
 800542c:	d010      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800542e:	4ba0      	ldr	r3, [pc, #640]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005434:	4a9e      	ldr	r2, [pc, #632]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800543a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800543e:	4b9c      	ldr	r3, [pc, #624]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005440:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	4999      	ldr	r1, [pc, #612]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800545c:	4b94      	ldr	r3, [pc, #592]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005462:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800546a:	4991      	ldr	r1, [pc, #580]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800547e:	4b8c      	ldr	r3, [pc, #560]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005484:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800548c:	4988      	ldr	r1, [pc, #544]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054a0:	4b83      	ldr	r3, [pc, #524]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ae:	4980      	ldr	r1, [pc, #512]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054c2:	4b7b      	ldr	r3, [pc, #492]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d0:	4977      	ldr	r1, [pc, #476]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054e4:	4b72      	ldr	r3, [pc, #456]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ea:	f023 0203 	bic.w	r2, r3, #3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f2:	496f      	ldr	r1, [pc, #444]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005506:	4b6a      	ldr	r3, [pc, #424]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550c:	f023 020c 	bic.w	r2, r3, #12
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005514:	4966      	ldr	r1, [pc, #408]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005528:	4b61      	ldr	r3, [pc, #388]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800552a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005536:	495e      	ldr	r1, [pc, #376]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800554a:	4b59      	ldr	r3, [pc, #356]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800554c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005550:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005558:	4955      	ldr	r1, [pc, #340]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800556c:	4b50      	ldr	r3, [pc, #320]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005572:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557a:	494d      	ldr	r1, [pc, #308]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800558e:	4b48      	ldr	r3, [pc, #288]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005594:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559c:	4944      	ldr	r1, [pc, #272]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80055b0:	4b3f      	ldr	r3, [pc, #252]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055be:	493c      	ldr	r1, [pc, #240]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80055d2:	4b37      	ldr	r3, [pc, #220]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e0:	4933      	ldr	r1, [pc, #204]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055f4:	4b2e      	ldr	r3, [pc, #184]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005602:	492b      	ldr	r1, [pc, #172]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d011      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005616:	4b26      	ldr	r3, [pc, #152]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005624:	4922      	ldr	r1, [pc, #136]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005634:	d101      	bne.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005636:	2301      	movs	r3, #1
 8005638:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005646:	2301      	movs	r3, #1
 8005648:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005656:	4b16      	ldr	r3, [pc, #88]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005664:	4912      	ldr	r1, [pc, #72]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00b      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005678:	4b0d      	ldr	r3, [pc, #52]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800567a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005688:	4909      	ldr	r1, [pc, #36]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d006      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 80d9 	beq.w	8005856 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056a4:	4b02      	ldr	r3, [pc, #8]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a01      	ldr	r2, [pc, #4]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056ae:	e001      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80056b0:	40023800 	.word	0x40023800
 80056b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b6:	f7fd fbfd 	bl	8002eb4 <HAL_GetTick>
 80056ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056bc:	e008      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056be:	f7fd fbf9 	bl	8002eb4 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b64      	cmp	r3, #100	; 0x64
 80056ca:	d901      	bls.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e194      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056d0:	4b6c      	ldr	r3, [pc, #432]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1f0      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d021      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d11d      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80056f0:	4b64      	ldr	r3, [pc, #400]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f6:	0c1b      	lsrs	r3, r3, #16
 80056f8:	f003 0303 	and.w	r3, r3, #3
 80056fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056fe:	4b61      	ldr	r3, [pc, #388]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005704:	0e1b      	lsrs	r3, r3, #24
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	019a      	lsls	r2, r3, #6
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	041b      	lsls	r3, r3, #16
 8005716:	431a      	orrs	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	061b      	lsls	r3, r3, #24
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	071b      	lsls	r3, r3, #28
 8005724:	4957      	ldr	r1, [pc, #348]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005726:	4313      	orrs	r3, r2
 8005728:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d004      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005740:	d00a      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800574a:	2b00      	cmp	r3, #0
 800574c:	d02e      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005756:	d129      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005758:	4b4a      	ldr	r3, [pc, #296]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800575a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800575e:	0c1b      	lsrs	r3, r3, #16
 8005760:	f003 0303 	and.w	r3, r3, #3
 8005764:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005766:	4b47      	ldr	r3, [pc, #284]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800576c:	0f1b      	lsrs	r3, r3, #28
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	019a      	lsls	r2, r3, #6
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	041b      	lsls	r3, r3, #16
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	061b      	lsls	r3, r3, #24
 8005786:	431a      	orrs	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	071b      	lsls	r3, r3, #28
 800578c:	493d      	ldr	r1, [pc, #244]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005794:	4b3b      	ldr	r3, [pc, #236]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800579a:	f023 021f 	bic.w	r2, r3, #31
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	3b01      	subs	r3, #1
 80057a4:	4937      	ldr	r1, [pc, #220]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01d      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80057b8:	4b32      	ldr	r3, [pc, #200]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057be:	0e1b      	lsrs	r3, r3, #24
 80057c0:	f003 030f 	and.w	r3, r3, #15
 80057c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057c6:	4b2f      	ldr	r3, [pc, #188]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057cc:	0f1b      	lsrs	r3, r3, #28
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	019a      	lsls	r2, r3, #6
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	041b      	lsls	r3, r3, #16
 80057e0:	431a      	orrs	r2, r3
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	061b      	lsls	r3, r3, #24
 80057e6:	431a      	orrs	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	071b      	lsls	r3, r3, #28
 80057ec:	4925      	ldr	r1, [pc, #148]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d011      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	019a      	lsls	r2, r3, #6
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	041b      	lsls	r3, r3, #16
 800580c:	431a      	orrs	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	061b      	lsls	r3, r3, #24
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	071b      	lsls	r3, r3, #28
 800581c:	4919      	ldr	r1, [pc, #100]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005824:	4b17      	ldr	r3, [pc, #92]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a16      	ldr	r2, [pc, #88]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800582a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800582e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005830:	f7fd fb40 	bl	8002eb4 <HAL_GetTick>
 8005834:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005836:	e008      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005838:	f7fd fb3c 	bl	8002eb4 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b64      	cmp	r3, #100	; 0x64
 8005844:	d901      	bls.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e0d7      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800584a:	4b0e      	ldr	r3, [pc, #56]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0f0      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	2b01      	cmp	r3, #1
 800585a:	f040 80cd 	bne.w	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800585e:	4b09      	ldr	r3, [pc, #36]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a08      	ldr	r2, [pc, #32]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800586a:	f7fd fb23 	bl	8002eb4 <HAL_GetTick>
 800586e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005870:	e00a      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005872:	f7fd fb1f 	bl	8002eb4 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b64      	cmp	r3, #100	; 0x64
 800587e:	d903      	bls.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e0ba      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005884:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005888:	4b5e      	ldr	r3, [pc, #376]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005894:	d0ed      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d009      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d02e      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d12a      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80058be:	4b51      	ldr	r3, [pc, #324]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c4:	0c1b      	lsrs	r3, r3, #16
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058cc:	4b4d      	ldr	r3, [pc, #308]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d2:	0f1b      	lsrs	r3, r3, #28
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	019a      	lsls	r2, r3, #6
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	041b      	lsls	r3, r3, #16
 80058e4:	431a      	orrs	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	061b      	lsls	r3, r3, #24
 80058ec:	431a      	orrs	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	071b      	lsls	r3, r3, #28
 80058f2:	4944      	ldr	r1, [pc, #272]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80058fa:	4b42      	ldr	r3, [pc, #264]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005900:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	3b01      	subs	r3, #1
 800590a:	021b      	lsls	r3, r3, #8
 800590c:	493d      	ldr	r1, [pc, #244]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800590e:	4313      	orrs	r3, r2
 8005910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d022      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005924:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005928:	d11d      	bne.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800592a:	4b36      	ldr	r3, [pc, #216]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800592c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005930:	0e1b      	lsrs	r3, r3, #24
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005938:	4b32      	ldr	r3, [pc, #200]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800593a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593e:	0f1b      	lsrs	r3, r3, #28
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	019a      	lsls	r2, r3, #6
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	041b      	lsls	r3, r3, #16
 8005952:	431a      	orrs	r2, r3
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	061b      	lsls	r3, r3, #24
 8005958:	431a      	orrs	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	071b      	lsls	r3, r3, #28
 800595e:	4929      	ldr	r1, [pc, #164]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005960:	4313      	orrs	r3, r2
 8005962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d028      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005972:	4b24      	ldr	r3, [pc, #144]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005978:	0e1b      	lsrs	r3, r3, #24
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005980:	4b20      	ldr	r3, [pc, #128]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005986:	0c1b      	lsrs	r3, r3, #16
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	019a      	lsls	r2, r3, #6
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	041b      	lsls	r3, r3, #16
 8005998:	431a      	orrs	r2, r3
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	061b      	lsls	r3, r3, #24
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	071b      	lsls	r3, r3, #28
 80059a6:	4917      	ldr	r1, [pc, #92]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80059ae:	4b15      	ldr	r3, [pc, #84]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059bc:	4911      	ldr	r1, [pc, #68]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80059c4:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a0e      	ldr	r2, [pc, #56]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059d0:	f7fd fa70 	bl	8002eb4 <HAL_GetTick>
 80059d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059d8:	f7fd fa6c 	bl	8002eb4 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b64      	cmp	r3, #100	; 0x64
 80059e4:	d901      	bls.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e007      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059ea:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059f6:	d1ef      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3720      	adds	r7, #32
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40023800 	.word	0x40023800

08005a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e049      	b.n	8005aae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d106      	bne.n	8005a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7fd f84c 	bl	8002acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4619      	mov	r1, r3
 8005a46:	4610      	mov	r0, r2
 8005a48:	f000 fc64 	bl	8006314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d001      	beq.n	8005ad0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e04c      	b.n	8005b6a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a26      	ldr	r2, [pc, #152]	; (8005b78 <HAL_TIM_Base_Start+0xc0>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d022      	beq.n	8005b28 <HAL_TIM_Base_Start+0x70>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aea:	d01d      	beq.n	8005b28 <HAL_TIM_Base_Start+0x70>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a22      	ldr	r2, [pc, #136]	; (8005b7c <HAL_TIM_Base_Start+0xc4>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d018      	beq.n	8005b28 <HAL_TIM_Base_Start+0x70>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a21      	ldr	r2, [pc, #132]	; (8005b80 <HAL_TIM_Base_Start+0xc8>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d013      	beq.n	8005b28 <HAL_TIM_Base_Start+0x70>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a1f      	ldr	r2, [pc, #124]	; (8005b84 <HAL_TIM_Base_Start+0xcc>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00e      	beq.n	8005b28 <HAL_TIM_Base_Start+0x70>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a1e      	ldr	r2, [pc, #120]	; (8005b88 <HAL_TIM_Base_Start+0xd0>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d009      	beq.n	8005b28 <HAL_TIM_Base_Start+0x70>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a1c      	ldr	r2, [pc, #112]	; (8005b8c <HAL_TIM_Base_Start+0xd4>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d004      	beq.n	8005b28 <HAL_TIM_Base_Start+0x70>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a1b      	ldr	r2, [pc, #108]	; (8005b90 <HAL_TIM_Base_Start+0xd8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d115      	bne.n	8005b54 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689a      	ldr	r2, [r3, #8]
 8005b2e:	4b19      	ldr	r3, [pc, #100]	; (8005b94 <HAL_TIM_Base_Start+0xdc>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b06      	cmp	r3, #6
 8005b38:	d015      	beq.n	8005b66 <HAL_TIM_Base_Start+0xae>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b40:	d011      	beq.n	8005b66 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f042 0201 	orr.w	r2, r2, #1
 8005b50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b52:	e008      	b.n	8005b66 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0201 	orr.w	r2, r2, #1
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	e000      	b.n	8005b68 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40010000 	.word	0x40010000
 8005b7c:	40000400 	.word	0x40000400
 8005b80:	40000800 	.word	0x40000800
 8005b84:	40000c00 	.word	0x40000c00
 8005b88:	40010400 	.word	0x40010400
 8005b8c:	40014000 	.word	0x40014000
 8005b90:	40001800 	.word	0x40001800
 8005b94:	00010007 	.word	0x00010007

08005b98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d001      	beq.n	8005bb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e054      	b.n	8005c5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0201 	orr.w	r2, r2, #1
 8005bc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a26      	ldr	r2, [pc, #152]	; (8005c68 <HAL_TIM_Base_Start_IT+0xd0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d022      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x80>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bda:	d01d      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x80>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a22      	ldr	r2, [pc, #136]	; (8005c6c <HAL_TIM_Base_Start_IT+0xd4>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d018      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x80>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a21      	ldr	r2, [pc, #132]	; (8005c70 <HAL_TIM_Base_Start_IT+0xd8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d013      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x80>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a1f      	ldr	r2, [pc, #124]	; (8005c74 <HAL_TIM_Base_Start_IT+0xdc>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d00e      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x80>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a1e      	ldr	r2, [pc, #120]	; (8005c78 <HAL_TIM_Base_Start_IT+0xe0>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d009      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x80>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a1c      	ldr	r2, [pc, #112]	; (8005c7c <HAL_TIM_Base_Start_IT+0xe4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d004      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x80>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1b      	ldr	r2, [pc, #108]	; (8005c80 <HAL_TIM_Base_Start_IT+0xe8>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d115      	bne.n	8005c44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689a      	ldr	r2, [r3, #8]
 8005c1e:	4b19      	ldr	r3, [pc, #100]	; (8005c84 <HAL_TIM_Base_Start_IT+0xec>)
 8005c20:	4013      	ands	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b06      	cmp	r3, #6
 8005c28:	d015      	beq.n	8005c56 <HAL_TIM_Base_Start_IT+0xbe>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c30:	d011      	beq.n	8005c56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f042 0201 	orr.w	r2, r2, #1
 8005c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c42:	e008      	b.n	8005c56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0201 	orr.w	r2, r2, #1
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	e000      	b.n	8005c58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	40010000 	.word	0x40010000
 8005c6c:	40000400 	.word	0x40000400
 8005c70:	40000800 	.word	0x40000800
 8005c74:	40000c00 	.word	0x40000c00
 8005c78:	40010400 	.word	0x40010400
 8005c7c:	40014000 	.word	0x40014000
 8005c80:	40001800 	.word	0x40001800
 8005c84:	00010007 	.word	0x00010007

08005c88 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e08f      	b.n	8005dbc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d106      	bne.n	8005cb6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7fc fec7 	bl	8002a44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6899      	ldr	r1, [r3, #8]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	4b3e      	ldr	r3, [pc, #248]	; (8005dc4 <HAL_TIM_Encoder_Init+0x13c>)
 8005cca:	400b      	ands	r3, r1
 8005ccc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4610      	mov	r0, r2
 8005cda:	f000 fb1b 	bl	8006314 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4b31      	ldr	r3, [pc, #196]	; (8005dc8 <HAL_TIM_Encoder_Init+0x140>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	021b      	lsls	r3, r3, #8
 8005d12:	4313      	orrs	r3, r2
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4b2b      	ldr	r3, [pc, #172]	; (8005dcc <HAL_TIM_Encoder_Init+0x144>)
 8005d1e:	4013      	ands	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4b2a      	ldr	r3, [pc, #168]	; (8005dd0 <HAL_TIM_Encoder_Init+0x148>)
 8005d26:	4013      	ands	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68da      	ldr	r2, [r3, #12]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	021b      	lsls	r3, r3, #8
 8005d34:	4313      	orrs	r3, r2
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	011a      	lsls	r2, r3, #4
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	031b      	lsls	r3, r3, #12
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005d56:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005d5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	fffebff8 	.word	0xfffebff8
 8005dc8:	fffffcfc 	.word	0xfffffcfc
 8005dcc:	fffff3f3 	.word	0xfffff3f3
 8005dd0:	ffff0f0f 	.word	0xffff0f0f

08005dd4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005de4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005df4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dfc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d110      	bne.n	8005e26 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d102      	bne.n	8005e10 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e0a:	7b7b      	ldrb	r3, [r7, #13]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d001      	beq.n	8005e14 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e069      	b.n	8005ee8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e24:	e031      	b.n	8005e8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d110      	bne.n	8005e4e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e2c:	7bbb      	ldrb	r3, [r7, #14]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d102      	bne.n	8005e38 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e32:	7b3b      	ldrb	r3, [r7, #12]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d001      	beq.n	8005e3c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e055      	b.n	8005ee8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e4c:	e01d      	b.n	8005e8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d108      	bne.n	8005e66 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e54:	7bbb      	ldrb	r3, [r7, #14]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d105      	bne.n	8005e66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e5a:	7b7b      	ldrb	r3, [r7, #13]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d102      	bne.n	8005e66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e60:	7b3b      	ldrb	r3, [r7, #12]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d001      	beq.n	8005e6a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e03e      	b.n	8005ee8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2202      	movs	r2, #2
 8005e76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2202      	movs	r2, #2
 8005e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <HAL_TIM_Encoder_Start+0xc4>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	d008      	beq.n	8005ea8 <HAL_TIM_Encoder_Start+0xd4>
 8005e96:	e00f      	b.n	8005eb8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 fb71 	bl	8006588 <TIM_CCxChannelCmd>
      break;
 8005ea6:	e016      	b.n	8005ed6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2201      	movs	r2, #1
 8005eae:	2104      	movs	r1, #4
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 fb69 	bl	8006588 <TIM_CCxChannelCmd>
      break;
 8005eb6:	e00e      	b.n	8005ed6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f000 fb61 	bl	8006588 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	2104      	movs	r1, #4
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 fb5a 	bl	8006588 <TIM_CCxChannelCmd>
      break;
 8005ed4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0201 	orr.w	r2, r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d122      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d11b      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0202 	mvn.w	r2, #2
 8005f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f9d0 	bl	80062d8 <HAL_TIM_IC_CaptureCallback>
 8005f38:	e005      	b.n	8005f46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f9c2 	bl	80062c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f9d3 	bl	80062ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f003 0304 	and.w	r3, r3, #4
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	d122      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f003 0304 	and.w	r3, r3, #4
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	d11b      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f06f 0204 	mvn.w	r2, #4
 8005f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2202      	movs	r2, #2
 8005f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f9a6 	bl	80062d8 <HAL_TIM_IC_CaptureCallback>
 8005f8c:	e005      	b.n	8005f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f998 	bl	80062c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f9a9 	bl	80062ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f003 0308 	and.w	r3, r3, #8
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	d122      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f003 0308 	and.w	r3, r3, #8
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d11b      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f06f 0208 	mvn.w	r2, #8
 8005fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2204      	movs	r2, #4
 8005fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f97c 	bl	80062d8 <HAL_TIM_IC_CaptureCallback>
 8005fe0:	e005      	b.n	8005fee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f96e 	bl	80062c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f97f 	bl	80062ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f003 0310 	and.w	r3, r3, #16
 8005ffe:	2b10      	cmp	r3, #16
 8006000:	d122      	bne.n	8006048 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f003 0310 	and.w	r3, r3, #16
 800600c:	2b10      	cmp	r3, #16
 800600e:	d11b      	bne.n	8006048 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0210 	mvn.w	r2, #16
 8006018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2208      	movs	r2, #8
 800601e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f952 	bl	80062d8 <HAL_TIM_IC_CaptureCallback>
 8006034:	e005      	b.n	8006042 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f944 	bl	80062c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f955 	bl	80062ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b01      	cmp	r3, #1
 8006054:	d10e      	bne.n	8006074 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b01      	cmp	r3, #1
 8006062:	d107      	bne.n	8006074 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f06f 0201 	mvn.w	r2, #1
 800606c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7fc fa54 	bl	800251c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607e:	2b80      	cmp	r3, #128	; 0x80
 8006080:	d10e      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608c:	2b80      	cmp	r3, #128	; 0x80
 800608e:	d107      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fb32 	bl	8006704 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ae:	d10e      	bne.n	80060ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ba:	2b80      	cmp	r3, #128	; 0x80
 80060bc:	d107      	bne.n	80060ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fb25 	bl	8006718 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d8:	2b40      	cmp	r3, #64	; 0x40
 80060da:	d10e      	bne.n	80060fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e6:	2b40      	cmp	r3, #64	; 0x40
 80060e8:	d107      	bne.n	80060fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f903 	bl	8006300 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b20      	cmp	r3, #32
 8006106:	d10e      	bne.n	8006126 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b20      	cmp	r3, #32
 8006114:	d107      	bne.n	8006126 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f06f 0220 	mvn.w	r2, #32
 800611e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fae5 	bl	80066f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006126:	bf00      	nop
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006144:	2b01      	cmp	r3, #1
 8006146:	d101      	bne.n	800614c <HAL_TIM_ConfigClockSource+0x1c>
 8006148:	2302      	movs	r3, #2
 800614a:	e0b4      	b.n	80062b6 <HAL_TIM_ConfigClockSource+0x186>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	4b56      	ldr	r3, [pc, #344]	; (80062c0 <HAL_TIM_ConfigClockSource+0x190>)
 8006168:	4013      	ands	r3, r2
 800616a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006172:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006184:	d03e      	beq.n	8006204 <HAL_TIM_ConfigClockSource+0xd4>
 8006186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800618a:	f200 8087 	bhi.w	800629c <HAL_TIM_ConfigClockSource+0x16c>
 800618e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006192:	f000 8086 	beq.w	80062a2 <HAL_TIM_ConfigClockSource+0x172>
 8006196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800619a:	d87f      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x16c>
 800619c:	2b70      	cmp	r3, #112	; 0x70
 800619e:	d01a      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0xa6>
 80061a0:	2b70      	cmp	r3, #112	; 0x70
 80061a2:	d87b      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x16c>
 80061a4:	2b60      	cmp	r3, #96	; 0x60
 80061a6:	d050      	beq.n	800624a <HAL_TIM_ConfigClockSource+0x11a>
 80061a8:	2b60      	cmp	r3, #96	; 0x60
 80061aa:	d877      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x16c>
 80061ac:	2b50      	cmp	r3, #80	; 0x50
 80061ae:	d03c      	beq.n	800622a <HAL_TIM_ConfigClockSource+0xfa>
 80061b0:	2b50      	cmp	r3, #80	; 0x50
 80061b2:	d873      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x16c>
 80061b4:	2b40      	cmp	r3, #64	; 0x40
 80061b6:	d058      	beq.n	800626a <HAL_TIM_ConfigClockSource+0x13a>
 80061b8:	2b40      	cmp	r3, #64	; 0x40
 80061ba:	d86f      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x16c>
 80061bc:	2b30      	cmp	r3, #48	; 0x30
 80061be:	d064      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x15a>
 80061c0:	2b30      	cmp	r3, #48	; 0x30
 80061c2:	d86b      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x16c>
 80061c4:	2b20      	cmp	r3, #32
 80061c6:	d060      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x15a>
 80061c8:	2b20      	cmp	r3, #32
 80061ca:	d867      	bhi.n	800629c <HAL_TIM_ConfigClockSource+0x16c>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d05c      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x15a>
 80061d0:	2b10      	cmp	r3, #16
 80061d2:	d05a      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x15a>
 80061d4:	e062      	b.n	800629c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6899      	ldr	r1, [r3, #8]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f000 f9af 	bl	8006548 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	609a      	str	r2, [r3, #8]
      break;
 8006202:	e04f      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6818      	ldr	r0, [r3, #0]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	6899      	ldr	r1, [r3, #8]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f000 f998 	bl	8006548 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006226:	609a      	str	r2, [r3, #8]
      break;
 8006228:	e03c      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6818      	ldr	r0, [r3, #0]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	6859      	ldr	r1, [r3, #4]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	461a      	mov	r2, r3
 8006238:	f000 f90c 	bl	8006454 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2150      	movs	r1, #80	; 0x50
 8006242:	4618      	mov	r0, r3
 8006244:	f000 f965 	bl	8006512 <TIM_ITRx_SetConfig>
      break;
 8006248:	e02c      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	6859      	ldr	r1, [r3, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	461a      	mov	r2, r3
 8006258:	f000 f92b 	bl	80064b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2160      	movs	r1, #96	; 0x60
 8006262:	4618      	mov	r0, r3
 8006264:	f000 f955 	bl	8006512 <TIM_ITRx_SetConfig>
      break;
 8006268:	e01c      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	6859      	ldr	r1, [r3, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	461a      	mov	r2, r3
 8006278:	f000 f8ec 	bl	8006454 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2140      	movs	r1, #64	; 0x40
 8006282:	4618      	mov	r0, r3
 8006284:	f000 f945 	bl	8006512 <TIM_ITRx_SetConfig>
      break;
 8006288:	e00c      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4619      	mov	r1, r3
 8006294:	4610      	mov	r0, r2
 8006296:	f000 f93c 	bl	8006512 <TIM_ITRx_SetConfig>
      break;
 800629a:	e003      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	73fb      	strb	r3, [r7, #15]
      break;
 80062a0:	e000      	b.n	80062a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80062a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	fffeff88 	.word	0xfffeff88

080062c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a40      	ldr	r2, [pc, #256]	; (8006428 <TIM_Base_SetConfig+0x114>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d013      	beq.n	8006354 <TIM_Base_SetConfig+0x40>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006332:	d00f      	beq.n	8006354 <TIM_Base_SetConfig+0x40>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a3d      	ldr	r2, [pc, #244]	; (800642c <TIM_Base_SetConfig+0x118>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00b      	beq.n	8006354 <TIM_Base_SetConfig+0x40>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a3c      	ldr	r2, [pc, #240]	; (8006430 <TIM_Base_SetConfig+0x11c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d007      	beq.n	8006354 <TIM_Base_SetConfig+0x40>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a3b      	ldr	r2, [pc, #236]	; (8006434 <TIM_Base_SetConfig+0x120>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d003      	beq.n	8006354 <TIM_Base_SetConfig+0x40>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a3a      	ldr	r2, [pc, #232]	; (8006438 <TIM_Base_SetConfig+0x124>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d108      	bne.n	8006366 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a2f      	ldr	r2, [pc, #188]	; (8006428 <TIM_Base_SetConfig+0x114>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d02b      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006374:	d027      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a2c      	ldr	r2, [pc, #176]	; (800642c <TIM_Base_SetConfig+0x118>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d023      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a2b      	ldr	r2, [pc, #172]	; (8006430 <TIM_Base_SetConfig+0x11c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d01f      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a2a      	ldr	r2, [pc, #168]	; (8006434 <TIM_Base_SetConfig+0x120>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d01b      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a29      	ldr	r2, [pc, #164]	; (8006438 <TIM_Base_SetConfig+0x124>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d017      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a28      	ldr	r2, [pc, #160]	; (800643c <TIM_Base_SetConfig+0x128>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d013      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a27      	ldr	r2, [pc, #156]	; (8006440 <TIM_Base_SetConfig+0x12c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00f      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a26      	ldr	r2, [pc, #152]	; (8006444 <TIM_Base_SetConfig+0x130>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00b      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a25      	ldr	r2, [pc, #148]	; (8006448 <TIM_Base_SetConfig+0x134>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d007      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a24      	ldr	r2, [pc, #144]	; (800644c <TIM_Base_SetConfig+0x138>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d003      	beq.n	80063c6 <TIM_Base_SetConfig+0xb2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a23      	ldr	r2, [pc, #140]	; (8006450 <TIM_Base_SetConfig+0x13c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d108      	bne.n	80063d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a0a      	ldr	r2, [pc, #40]	; (8006428 <TIM_Base_SetConfig+0x114>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d003      	beq.n	800640c <TIM_Base_SetConfig+0xf8>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a0c      	ldr	r2, [pc, #48]	; (8006438 <TIM_Base_SetConfig+0x124>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d103      	bne.n	8006414 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	691a      	ldr	r2, [r3, #16]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	615a      	str	r2, [r3, #20]
}
 800641a:	bf00      	nop
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	40010000 	.word	0x40010000
 800642c:	40000400 	.word	0x40000400
 8006430:	40000800 	.word	0x40000800
 8006434:	40000c00 	.word	0x40000c00
 8006438:	40010400 	.word	0x40010400
 800643c:	40014000 	.word	0x40014000
 8006440:	40014400 	.word	0x40014400
 8006444:	40014800 	.word	0x40014800
 8006448:	40001800 	.word	0x40001800
 800644c:	40001c00 	.word	0x40001c00
 8006450:	40002000 	.word	0x40002000

08006454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	f023 0201 	bic.w	r2, r3, #1
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800647e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	4313      	orrs	r3, r2
 8006488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f023 030a 	bic.w	r3, r3, #10
 8006490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	4313      	orrs	r3, r2
 8006498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	621a      	str	r2, [r3, #32]
}
 80064a6:	bf00      	nop
 80064a8:	371c      	adds	r7, #28
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b087      	sub	sp, #28
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	60f8      	str	r0, [r7, #12]
 80064ba:	60b9      	str	r1, [r7, #8]
 80064bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	f023 0210 	bic.w	r2, r3, #16
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	031b      	lsls	r3, r3, #12
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	621a      	str	r2, [r3, #32]
}
 8006506:	bf00      	nop
 8006508:	371c      	adds	r7, #28
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006512:	b480      	push	{r7}
 8006514:	b085      	sub	sp, #20
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006528:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4313      	orrs	r3, r2
 8006530:	f043 0307 	orr.w	r3, r3, #7
 8006534:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	609a      	str	r2, [r3, #8]
}
 800653c:	bf00      	nop
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006548:	b480      	push	{r7}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
 8006554:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006562:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	021a      	lsls	r2, r3, #8
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	431a      	orrs	r2, r3
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4313      	orrs	r3, r2
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	4313      	orrs	r3, r2
 8006574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	609a      	str	r2, [r3, #8]
}
 800657c:	bf00      	nop
 800657e:	371c      	adds	r7, #28
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f003 031f 	and.w	r3, r3, #31
 800659a:	2201      	movs	r2, #1
 800659c:	fa02 f303 	lsl.w	r3, r2, r3
 80065a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6a1a      	ldr	r2, [r3, #32]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	43db      	mvns	r3, r3
 80065aa:	401a      	ands	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6a1a      	ldr	r2, [r3, #32]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f003 031f 	and.w	r3, r3, #31
 80065ba:	6879      	ldr	r1, [r7, #4]
 80065bc:	fa01 f303 	lsl.w	r3, r1, r3
 80065c0:	431a      	orrs	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	621a      	str	r2, [r3, #32]
}
 80065c6:	bf00      	nop
 80065c8:	371c      	adds	r7, #28
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
	...

080065d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d101      	bne.n	80065ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065e8:	2302      	movs	r3, #2
 80065ea:	e06d      	b.n	80066c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2202      	movs	r2, #2
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a30      	ldr	r2, [pc, #192]	; (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d004      	beq.n	8006620 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a2f      	ldr	r2, [pc, #188]	; (80066d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d108      	bne.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006626:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	4313      	orrs	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006638:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	4313      	orrs	r3, r2
 8006642:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a20      	ldr	r2, [pc, #128]	; (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d022      	beq.n	800669c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800665e:	d01d      	beq.n	800669c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a1d      	ldr	r2, [pc, #116]	; (80066dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d018      	beq.n	800669c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a1c      	ldr	r2, [pc, #112]	; (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d013      	beq.n	800669c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a1a      	ldr	r2, [pc, #104]	; (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00e      	beq.n	800669c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a15      	ldr	r2, [pc, #84]	; (80066d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d009      	beq.n	800669c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a16      	ldr	r2, [pc, #88]	; (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d004      	beq.n	800669c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a15      	ldr	r2, [pc, #84]	; (80066ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d10c      	bne.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	40010000 	.word	0x40010000
 80066d8:	40010400 	.word	0x40010400
 80066dc:	40000400 	.word	0x40000400
 80066e0:	40000800 	.word	0x40000800
 80066e4:	40000c00 	.word	0x40000c00
 80066e8:	40014000 	.word	0x40014000
 80066ec:	40001800 	.word	0x40001800

080066f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e040      	b.n	80067c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006742:	2b00      	cmp	r3, #0
 8006744:	d106      	bne.n	8006754 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7fc fa26 	bl	8002ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2224      	movs	r2, #36	; 0x24
 8006758:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f022 0201 	bic.w	r2, r2, #1
 8006768:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fbe6 	bl	8006f3c <UART_SetConfig>
 8006770:	4603      	mov	r3, r0
 8006772:	2b01      	cmp	r3, #1
 8006774:	d101      	bne.n	800677a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e022      	b.n	80067c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677e:	2b00      	cmp	r3, #0
 8006780:	d002      	beq.n	8006788 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fe3e 	bl	8007404 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006796:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689a      	ldr	r2, [r3, #8]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f042 0201 	orr.w	r2, r2, #1
 80067b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fec5 	bl	8007548 <UART_CheckIdleState>
 80067be:	4603      	mov	r3, r0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08a      	sub	sp, #40	; 0x28
 80067cc:	af02      	add	r7, sp, #8
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	4613      	mov	r3, r2
 80067d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067dc:	2b20      	cmp	r3, #32
 80067de:	d171      	bne.n	80068c4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <HAL_UART_Transmit+0x24>
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e06a      	b.n	80068c6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2221      	movs	r2, #33	; 0x21
 80067fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067fe:	f7fc fb59 	bl	8002eb4 <HAL_GetTick>
 8006802:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	88fa      	ldrh	r2, [r7, #6]
 8006808:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	88fa      	ldrh	r2, [r7, #6]
 8006810:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800681c:	d108      	bne.n	8006830 <HAL_UART_Transmit+0x68>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d104      	bne.n	8006830 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006826:	2300      	movs	r3, #0
 8006828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	61bb      	str	r3, [r7, #24]
 800682e:	e003      	b.n	8006838 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006834:	2300      	movs	r3, #0
 8006836:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006838:	e02c      	b.n	8006894 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2200      	movs	r2, #0
 8006842:	2180      	movs	r1, #128	; 0x80
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 feb6 	bl	80075b6 <UART_WaitOnFlagUntilTimeout>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e038      	b.n	80068c6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10b      	bne.n	8006872 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006868:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	3302      	adds	r3, #2
 800686e:	61bb      	str	r3, [r7, #24]
 8006870:	e007      	b.n	8006882 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	781a      	ldrb	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	3301      	adds	r3, #1
 8006880:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006888:	b29b      	uxth	r3, r3
 800688a:	3b01      	subs	r3, #1
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800689a:	b29b      	uxth	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1cc      	bne.n	800683a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	2200      	movs	r2, #0
 80068a8:	2140      	movs	r1, #64	; 0x40
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 fe83 	bl	80075b6 <UART_WaitOnFlagUntilTimeout>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e005      	b.n	80068c6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2220      	movs	r2, #32
 80068be:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	e000      	b.n	80068c6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80068c4:	2302      	movs	r3, #2
  }
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3720      	adds	r7, #32
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b08a      	sub	sp, #40	; 0x28
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	4613      	mov	r3, r2
 80068da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	d132      	bne.n	800694c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d002      	beq.n	80068f2 <HAL_UART_Receive_IT+0x24>
 80068ec:	88fb      	ldrh	r3, [r7, #6]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e02b      	b.n	800694e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d018      	beq.n	800693c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	e853 3f00 	ldrex	r3, [r3]
 8006916:	613b      	str	r3, [r7, #16]
   return(result);
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800691e:	627b      	str	r3, [r7, #36]	; 0x24
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	461a      	mov	r2, r3
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	623b      	str	r3, [r7, #32]
 800692a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692c:	69f9      	ldr	r1, [r7, #28]
 800692e:	6a3a      	ldr	r2, [r7, #32]
 8006930:	e841 2300 	strex	r3, r2, [r1]
 8006934:	61bb      	str	r3, [r7, #24]
   return(result);
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1e6      	bne.n	800690a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800693c:	88fb      	ldrh	r3, [r7, #6]
 800693e:	461a      	mov	r2, r3
 8006940:	68b9      	ldr	r1, [r7, #8]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 fefe 	bl	8007744 <UART_Start_Receive_IT>
 8006948:	4603      	mov	r3, r0
 800694a:	e000      	b.n	800694e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800694c:	2302      	movs	r3, #2
  }
}
 800694e:	4618      	mov	r0, r3
 8006950:	3728      	adds	r7, #40	; 0x28
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
	...

08006958 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b0ba      	sub	sp, #232	; 0xe8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800697e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006982:	f640 030f 	movw	r3, #2063	; 0x80f
 8006986:	4013      	ands	r3, r2
 8006988:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800698c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006990:	2b00      	cmp	r3, #0
 8006992:	d115      	bne.n	80069c0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006998:	f003 0320 	and.w	r3, r3, #32
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00f      	beq.n	80069c0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80069a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a4:	f003 0320 	and.w	r3, r3, #32
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d009      	beq.n	80069c0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 8297 	beq.w	8006ee4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	4798      	blx	r3
      }
      return;
 80069be:	e291      	b.n	8006ee4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80069c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 8117 	beq.w	8006bf8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80069ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d106      	bne.n	80069e4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80069d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80069da:	4b85      	ldr	r3, [pc, #532]	; (8006bf0 <HAL_UART_IRQHandler+0x298>)
 80069dc:	4013      	ands	r3, r2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f000 810a 	beq.w	8006bf8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d011      	beq.n	8006a14 <HAL_UART_IRQHandler+0xbc>
 80069f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00b      	beq.n	8006a14 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2201      	movs	r2, #1
 8006a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a0a:	f043 0201 	orr.w	r2, r3, #1
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a18:	f003 0302 	and.w	r3, r3, #2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d011      	beq.n	8006a44 <HAL_UART_IRQHandler+0xec>
 8006a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00b      	beq.n	8006a44 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2202      	movs	r2, #2
 8006a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a3a:	f043 0204 	orr.w	r2, r3, #4
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d011      	beq.n	8006a74 <HAL_UART_IRQHandler+0x11c>
 8006a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00b      	beq.n	8006a74 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2204      	movs	r2, #4
 8006a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a6a:	f043 0202 	orr.w	r2, r3, #2
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a78:	f003 0308 	and.w	r3, r3, #8
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d017      	beq.n	8006ab0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a84:	f003 0320 	and.w	r3, r3, #32
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d105      	bne.n	8006a98 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a90:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00b      	beq.n	8006ab0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2208      	movs	r2, #8
 8006a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aa6:	f043 0208 	orr.w	r2, r3, #8
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d012      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x18a>
 8006abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00c      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ad0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ad8:	f043 0220 	orr.w	r2, r3, #32
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 81fd 	beq.w	8006ee8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00d      	beq.n	8006b16 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006afe:	f003 0320 	and.w	r3, r3, #32
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d007      	beq.n	8006b16 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2a:	2b40      	cmp	r3, #64	; 0x40
 8006b2c:	d005      	beq.n	8006b3a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d04f      	beq.n	8006bda <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fec8 	bl	80078d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4a:	2b40      	cmp	r3, #64	; 0x40
 8006b4c:	d141      	bne.n	8006bd2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3308      	adds	r3, #8
 8006b54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3308      	adds	r3, #8
 8006b76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b8a:	e841 2300 	strex	r3, r2, [r1]
 8006b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1d9      	bne.n	8006b4e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d013      	beq.n	8006bca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ba6:	4a13      	ldr	r2, [pc, #76]	; (8006bf4 <HAL_UART_IRQHandler+0x29c>)
 8006ba8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fc fc19 	bl	80033e6 <HAL_DMA_Abort_IT>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d017      	beq.n	8006bea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc8:	e00f      	b.n	8006bea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f9a0 	bl	8006f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd0:	e00b      	b.n	8006bea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f99c 	bl	8006f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd8:	e007      	b.n	8006bea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f998 	bl	8006f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006be8:	e17e      	b.n	8006ee8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bea:	bf00      	nop
    return;
 8006bec:	e17c      	b.n	8006ee8 <HAL_UART_IRQHandler+0x590>
 8006bee:	bf00      	nop
 8006bf0:	04000120 	.word	0x04000120
 8006bf4:	08007999 	.word	0x08007999

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	f040 814c 	bne.w	8006e9a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c06:	f003 0310 	and.w	r3, r3, #16
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 8145 	beq.w	8006e9a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c14:	f003 0310 	and.w	r3, r3, #16
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 813e 	beq.w	8006e9a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2210      	movs	r2, #16
 8006c24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c30:	2b40      	cmp	r3, #64	; 0x40
 8006c32:	f040 80b6 	bne.w	8006da2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c42:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 8150 	beq.w	8006eec <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c56:	429a      	cmp	r2, r3
 8006c58:	f080 8148 	bcs.w	8006eec <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c70:	f000 8086 	beq.w	8006d80 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ca2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006caa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1da      	bne.n	8006c74 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3308      	adds	r3, #8
 8006cc4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cc8:	e853 3f00 	ldrex	r3, [r3]
 8006ccc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006cce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cd0:	f023 0301 	bic.w	r3, r3, #1
 8006cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3308      	adds	r3, #8
 8006cde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ce2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ce6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006cea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e1      	bne.n	8006cbe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3308      	adds	r3, #8
 8006d00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3308      	adds	r3, #8
 8006d1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1e3      	bne.n	8006cfa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d50:	f023 0310 	bic.w	r3, r3, #16
 8006d54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d62:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d64:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e4      	bne.n	8006d40 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fc fac3 	bl	8003306 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f8c2 	bl	8006f24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006da0:	e0a4      	b.n	8006eec <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 8096 	beq.w	8006ef0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006dc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 8091 	beq.w	8006ef0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd6:	e853 3f00 	ldrex	r3, [r3]
 8006dda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006de2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006df0:	647b      	str	r3, [r7, #68]	; 0x44
 8006df2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006df6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006df8:	e841 2300 	strex	r3, r2, [r1]
 8006dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e4      	bne.n	8006dce <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3308      	adds	r3, #8
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	e853 3f00 	ldrex	r3, [r3]
 8006e12:	623b      	str	r3, [r7, #32]
   return(result);
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	f023 0301 	bic.w	r3, r3, #1
 8006e1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3308      	adds	r3, #8
 8006e24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e28:	633a      	str	r2, [r7, #48]	; 0x30
 8006e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e30:	e841 2300 	strex	r3, r2, [r1]
 8006e34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e3      	bne.n	8006e04 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2220      	movs	r2, #32
 8006e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	e853 3f00 	ldrex	r3, [r3]
 8006e5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f023 0310 	bic.w	r3, r3, #16
 8006e64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e72:	61fb      	str	r3, [r7, #28]
 8006e74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	69b9      	ldr	r1, [r7, #24]
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	e841 2300 	strex	r3, r2, [r1]
 8006e7e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1e4      	bne.n	8006e50 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2202      	movs	r2, #2
 8006e8a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f846 	bl	8006f24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e98:	e02a      	b.n	8006ef0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00e      	beq.n	8006ec4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d008      	beq.n	8006ec4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d01c      	beq.n	8006ef4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	4798      	blx	r3
    }
    return;
 8006ec2:	e017      	b.n	8006ef4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d012      	beq.n	8006ef6 <HAL_UART_IRQHandler+0x59e>
 8006ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00c      	beq.n	8006ef6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fd71 	bl	80079c4 <UART_EndTransmit_IT>
    return;
 8006ee2:	e008      	b.n	8006ef6 <HAL_UART_IRQHandler+0x59e>
      return;
 8006ee4:	bf00      	nop
 8006ee6:	e006      	b.n	8006ef6 <HAL_UART_IRQHandler+0x59e>
    return;
 8006ee8:	bf00      	nop
 8006eea:	e004      	b.n	8006ef6 <HAL_UART_IRQHandler+0x59e>
      return;
 8006eec:	bf00      	nop
 8006eee:	e002      	b.n	8006ef6 <HAL_UART_IRQHandler+0x59e>
      return;
 8006ef0:	bf00      	nop
 8006ef2:	e000      	b.n	8006ef6 <HAL_UART_IRQHandler+0x59e>
    return;
 8006ef4:	bf00      	nop
  }

}
 8006ef6:	37e8      	adds	r7, #232	; 0xe8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b088      	sub	sp, #32
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	431a      	orrs	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	431a      	orrs	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	4ba6      	ldr	r3, [pc, #664]	; (8007200 <UART_SetConfig+0x2c4>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6812      	ldr	r2, [r2, #0]
 8006f6e:	6979      	ldr	r1, [r7, #20]
 8006f70:	430b      	orrs	r3, r1
 8006f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68da      	ldr	r2, [r3, #12]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a94      	ldr	r2, [pc, #592]	; (8007204 <UART_SetConfig+0x2c8>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d120      	bne.n	8006ffa <UART_SetConfig+0xbe>
 8006fb8:	4b93      	ldr	r3, [pc, #588]	; (8007208 <UART_SetConfig+0x2cc>)
 8006fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fbe:	f003 0303 	and.w	r3, r3, #3
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d816      	bhi.n	8006ff4 <UART_SetConfig+0xb8>
 8006fc6:	a201      	add	r2, pc, #4	; (adr r2, 8006fcc <UART_SetConfig+0x90>)
 8006fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fcc:	08006fdd 	.word	0x08006fdd
 8006fd0:	08006fe9 	.word	0x08006fe9
 8006fd4:	08006fe3 	.word	0x08006fe3
 8006fd8:	08006fef 	.word	0x08006fef
 8006fdc:	2301      	movs	r3, #1
 8006fde:	77fb      	strb	r3, [r7, #31]
 8006fe0:	e150      	b.n	8007284 <UART_SetConfig+0x348>
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	77fb      	strb	r3, [r7, #31]
 8006fe6:	e14d      	b.n	8007284 <UART_SetConfig+0x348>
 8006fe8:	2304      	movs	r3, #4
 8006fea:	77fb      	strb	r3, [r7, #31]
 8006fec:	e14a      	b.n	8007284 <UART_SetConfig+0x348>
 8006fee:	2308      	movs	r3, #8
 8006ff0:	77fb      	strb	r3, [r7, #31]
 8006ff2:	e147      	b.n	8007284 <UART_SetConfig+0x348>
 8006ff4:	2310      	movs	r3, #16
 8006ff6:	77fb      	strb	r3, [r7, #31]
 8006ff8:	e144      	b.n	8007284 <UART_SetConfig+0x348>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a83      	ldr	r2, [pc, #524]	; (800720c <UART_SetConfig+0x2d0>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d132      	bne.n	800706a <UART_SetConfig+0x12e>
 8007004:	4b80      	ldr	r3, [pc, #512]	; (8007208 <UART_SetConfig+0x2cc>)
 8007006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800700a:	f003 030c 	and.w	r3, r3, #12
 800700e:	2b0c      	cmp	r3, #12
 8007010:	d828      	bhi.n	8007064 <UART_SetConfig+0x128>
 8007012:	a201      	add	r2, pc, #4	; (adr r2, 8007018 <UART_SetConfig+0xdc>)
 8007014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007018:	0800704d 	.word	0x0800704d
 800701c:	08007065 	.word	0x08007065
 8007020:	08007065 	.word	0x08007065
 8007024:	08007065 	.word	0x08007065
 8007028:	08007059 	.word	0x08007059
 800702c:	08007065 	.word	0x08007065
 8007030:	08007065 	.word	0x08007065
 8007034:	08007065 	.word	0x08007065
 8007038:	08007053 	.word	0x08007053
 800703c:	08007065 	.word	0x08007065
 8007040:	08007065 	.word	0x08007065
 8007044:	08007065 	.word	0x08007065
 8007048:	0800705f 	.word	0x0800705f
 800704c:	2300      	movs	r3, #0
 800704e:	77fb      	strb	r3, [r7, #31]
 8007050:	e118      	b.n	8007284 <UART_SetConfig+0x348>
 8007052:	2302      	movs	r3, #2
 8007054:	77fb      	strb	r3, [r7, #31]
 8007056:	e115      	b.n	8007284 <UART_SetConfig+0x348>
 8007058:	2304      	movs	r3, #4
 800705a:	77fb      	strb	r3, [r7, #31]
 800705c:	e112      	b.n	8007284 <UART_SetConfig+0x348>
 800705e:	2308      	movs	r3, #8
 8007060:	77fb      	strb	r3, [r7, #31]
 8007062:	e10f      	b.n	8007284 <UART_SetConfig+0x348>
 8007064:	2310      	movs	r3, #16
 8007066:	77fb      	strb	r3, [r7, #31]
 8007068:	e10c      	b.n	8007284 <UART_SetConfig+0x348>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a68      	ldr	r2, [pc, #416]	; (8007210 <UART_SetConfig+0x2d4>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d120      	bne.n	80070b6 <UART_SetConfig+0x17a>
 8007074:	4b64      	ldr	r3, [pc, #400]	; (8007208 <UART_SetConfig+0x2cc>)
 8007076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800707a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800707e:	2b30      	cmp	r3, #48	; 0x30
 8007080:	d013      	beq.n	80070aa <UART_SetConfig+0x16e>
 8007082:	2b30      	cmp	r3, #48	; 0x30
 8007084:	d814      	bhi.n	80070b0 <UART_SetConfig+0x174>
 8007086:	2b20      	cmp	r3, #32
 8007088:	d009      	beq.n	800709e <UART_SetConfig+0x162>
 800708a:	2b20      	cmp	r3, #32
 800708c:	d810      	bhi.n	80070b0 <UART_SetConfig+0x174>
 800708e:	2b00      	cmp	r3, #0
 8007090:	d002      	beq.n	8007098 <UART_SetConfig+0x15c>
 8007092:	2b10      	cmp	r3, #16
 8007094:	d006      	beq.n	80070a4 <UART_SetConfig+0x168>
 8007096:	e00b      	b.n	80070b0 <UART_SetConfig+0x174>
 8007098:	2300      	movs	r3, #0
 800709a:	77fb      	strb	r3, [r7, #31]
 800709c:	e0f2      	b.n	8007284 <UART_SetConfig+0x348>
 800709e:	2302      	movs	r3, #2
 80070a0:	77fb      	strb	r3, [r7, #31]
 80070a2:	e0ef      	b.n	8007284 <UART_SetConfig+0x348>
 80070a4:	2304      	movs	r3, #4
 80070a6:	77fb      	strb	r3, [r7, #31]
 80070a8:	e0ec      	b.n	8007284 <UART_SetConfig+0x348>
 80070aa:	2308      	movs	r3, #8
 80070ac:	77fb      	strb	r3, [r7, #31]
 80070ae:	e0e9      	b.n	8007284 <UART_SetConfig+0x348>
 80070b0:	2310      	movs	r3, #16
 80070b2:	77fb      	strb	r3, [r7, #31]
 80070b4:	e0e6      	b.n	8007284 <UART_SetConfig+0x348>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a56      	ldr	r2, [pc, #344]	; (8007214 <UART_SetConfig+0x2d8>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d120      	bne.n	8007102 <UART_SetConfig+0x1c6>
 80070c0:	4b51      	ldr	r3, [pc, #324]	; (8007208 <UART_SetConfig+0x2cc>)
 80070c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80070ca:	2bc0      	cmp	r3, #192	; 0xc0
 80070cc:	d013      	beq.n	80070f6 <UART_SetConfig+0x1ba>
 80070ce:	2bc0      	cmp	r3, #192	; 0xc0
 80070d0:	d814      	bhi.n	80070fc <UART_SetConfig+0x1c0>
 80070d2:	2b80      	cmp	r3, #128	; 0x80
 80070d4:	d009      	beq.n	80070ea <UART_SetConfig+0x1ae>
 80070d6:	2b80      	cmp	r3, #128	; 0x80
 80070d8:	d810      	bhi.n	80070fc <UART_SetConfig+0x1c0>
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d002      	beq.n	80070e4 <UART_SetConfig+0x1a8>
 80070de:	2b40      	cmp	r3, #64	; 0x40
 80070e0:	d006      	beq.n	80070f0 <UART_SetConfig+0x1b4>
 80070e2:	e00b      	b.n	80070fc <UART_SetConfig+0x1c0>
 80070e4:	2300      	movs	r3, #0
 80070e6:	77fb      	strb	r3, [r7, #31]
 80070e8:	e0cc      	b.n	8007284 <UART_SetConfig+0x348>
 80070ea:	2302      	movs	r3, #2
 80070ec:	77fb      	strb	r3, [r7, #31]
 80070ee:	e0c9      	b.n	8007284 <UART_SetConfig+0x348>
 80070f0:	2304      	movs	r3, #4
 80070f2:	77fb      	strb	r3, [r7, #31]
 80070f4:	e0c6      	b.n	8007284 <UART_SetConfig+0x348>
 80070f6:	2308      	movs	r3, #8
 80070f8:	77fb      	strb	r3, [r7, #31]
 80070fa:	e0c3      	b.n	8007284 <UART_SetConfig+0x348>
 80070fc:	2310      	movs	r3, #16
 80070fe:	77fb      	strb	r3, [r7, #31]
 8007100:	e0c0      	b.n	8007284 <UART_SetConfig+0x348>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a44      	ldr	r2, [pc, #272]	; (8007218 <UART_SetConfig+0x2dc>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d125      	bne.n	8007158 <UART_SetConfig+0x21c>
 800710c:	4b3e      	ldr	r3, [pc, #248]	; (8007208 <UART_SetConfig+0x2cc>)
 800710e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800711a:	d017      	beq.n	800714c <UART_SetConfig+0x210>
 800711c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007120:	d817      	bhi.n	8007152 <UART_SetConfig+0x216>
 8007122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007126:	d00b      	beq.n	8007140 <UART_SetConfig+0x204>
 8007128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800712c:	d811      	bhi.n	8007152 <UART_SetConfig+0x216>
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <UART_SetConfig+0x1fe>
 8007132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007136:	d006      	beq.n	8007146 <UART_SetConfig+0x20a>
 8007138:	e00b      	b.n	8007152 <UART_SetConfig+0x216>
 800713a:	2300      	movs	r3, #0
 800713c:	77fb      	strb	r3, [r7, #31]
 800713e:	e0a1      	b.n	8007284 <UART_SetConfig+0x348>
 8007140:	2302      	movs	r3, #2
 8007142:	77fb      	strb	r3, [r7, #31]
 8007144:	e09e      	b.n	8007284 <UART_SetConfig+0x348>
 8007146:	2304      	movs	r3, #4
 8007148:	77fb      	strb	r3, [r7, #31]
 800714a:	e09b      	b.n	8007284 <UART_SetConfig+0x348>
 800714c:	2308      	movs	r3, #8
 800714e:	77fb      	strb	r3, [r7, #31]
 8007150:	e098      	b.n	8007284 <UART_SetConfig+0x348>
 8007152:	2310      	movs	r3, #16
 8007154:	77fb      	strb	r3, [r7, #31]
 8007156:	e095      	b.n	8007284 <UART_SetConfig+0x348>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a2f      	ldr	r2, [pc, #188]	; (800721c <UART_SetConfig+0x2e0>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d125      	bne.n	80071ae <UART_SetConfig+0x272>
 8007162:	4b29      	ldr	r3, [pc, #164]	; (8007208 <UART_SetConfig+0x2cc>)
 8007164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007168:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800716c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007170:	d017      	beq.n	80071a2 <UART_SetConfig+0x266>
 8007172:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007176:	d817      	bhi.n	80071a8 <UART_SetConfig+0x26c>
 8007178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800717c:	d00b      	beq.n	8007196 <UART_SetConfig+0x25a>
 800717e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007182:	d811      	bhi.n	80071a8 <UART_SetConfig+0x26c>
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <UART_SetConfig+0x254>
 8007188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800718c:	d006      	beq.n	800719c <UART_SetConfig+0x260>
 800718e:	e00b      	b.n	80071a8 <UART_SetConfig+0x26c>
 8007190:	2301      	movs	r3, #1
 8007192:	77fb      	strb	r3, [r7, #31]
 8007194:	e076      	b.n	8007284 <UART_SetConfig+0x348>
 8007196:	2302      	movs	r3, #2
 8007198:	77fb      	strb	r3, [r7, #31]
 800719a:	e073      	b.n	8007284 <UART_SetConfig+0x348>
 800719c:	2304      	movs	r3, #4
 800719e:	77fb      	strb	r3, [r7, #31]
 80071a0:	e070      	b.n	8007284 <UART_SetConfig+0x348>
 80071a2:	2308      	movs	r3, #8
 80071a4:	77fb      	strb	r3, [r7, #31]
 80071a6:	e06d      	b.n	8007284 <UART_SetConfig+0x348>
 80071a8:	2310      	movs	r3, #16
 80071aa:	77fb      	strb	r3, [r7, #31]
 80071ac:	e06a      	b.n	8007284 <UART_SetConfig+0x348>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a1b      	ldr	r2, [pc, #108]	; (8007220 <UART_SetConfig+0x2e4>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d138      	bne.n	800722a <UART_SetConfig+0x2ee>
 80071b8:	4b13      	ldr	r3, [pc, #76]	; (8007208 <UART_SetConfig+0x2cc>)
 80071ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071be:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80071c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071c6:	d017      	beq.n	80071f8 <UART_SetConfig+0x2bc>
 80071c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071cc:	d82a      	bhi.n	8007224 <UART_SetConfig+0x2e8>
 80071ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071d2:	d00b      	beq.n	80071ec <UART_SetConfig+0x2b0>
 80071d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071d8:	d824      	bhi.n	8007224 <UART_SetConfig+0x2e8>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <UART_SetConfig+0x2aa>
 80071de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e2:	d006      	beq.n	80071f2 <UART_SetConfig+0x2b6>
 80071e4:	e01e      	b.n	8007224 <UART_SetConfig+0x2e8>
 80071e6:	2300      	movs	r3, #0
 80071e8:	77fb      	strb	r3, [r7, #31]
 80071ea:	e04b      	b.n	8007284 <UART_SetConfig+0x348>
 80071ec:	2302      	movs	r3, #2
 80071ee:	77fb      	strb	r3, [r7, #31]
 80071f0:	e048      	b.n	8007284 <UART_SetConfig+0x348>
 80071f2:	2304      	movs	r3, #4
 80071f4:	77fb      	strb	r3, [r7, #31]
 80071f6:	e045      	b.n	8007284 <UART_SetConfig+0x348>
 80071f8:	2308      	movs	r3, #8
 80071fa:	77fb      	strb	r3, [r7, #31]
 80071fc:	e042      	b.n	8007284 <UART_SetConfig+0x348>
 80071fe:	bf00      	nop
 8007200:	efff69f3 	.word	0xefff69f3
 8007204:	40011000 	.word	0x40011000
 8007208:	40023800 	.word	0x40023800
 800720c:	40004400 	.word	0x40004400
 8007210:	40004800 	.word	0x40004800
 8007214:	40004c00 	.word	0x40004c00
 8007218:	40005000 	.word	0x40005000
 800721c:	40011400 	.word	0x40011400
 8007220:	40007800 	.word	0x40007800
 8007224:	2310      	movs	r3, #16
 8007226:	77fb      	strb	r3, [r7, #31]
 8007228:	e02c      	b.n	8007284 <UART_SetConfig+0x348>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a72      	ldr	r2, [pc, #456]	; (80073f8 <UART_SetConfig+0x4bc>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d125      	bne.n	8007280 <UART_SetConfig+0x344>
 8007234:	4b71      	ldr	r3, [pc, #452]	; (80073fc <UART_SetConfig+0x4c0>)
 8007236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800723e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007242:	d017      	beq.n	8007274 <UART_SetConfig+0x338>
 8007244:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007248:	d817      	bhi.n	800727a <UART_SetConfig+0x33e>
 800724a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800724e:	d00b      	beq.n	8007268 <UART_SetConfig+0x32c>
 8007250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007254:	d811      	bhi.n	800727a <UART_SetConfig+0x33e>
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <UART_SetConfig+0x326>
 800725a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800725e:	d006      	beq.n	800726e <UART_SetConfig+0x332>
 8007260:	e00b      	b.n	800727a <UART_SetConfig+0x33e>
 8007262:	2300      	movs	r3, #0
 8007264:	77fb      	strb	r3, [r7, #31]
 8007266:	e00d      	b.n	8007284 <UART_SetConfig+0x348>
 8007268:	2302      	movs	r3, #2
 800726a:	77fb      	strb	r3, [r7, #31]
 800726c:	e00a      	b.n	8007284 <UART_SetConfig+0x348>
 800726e:	2304      	movs	r3, #4
 8007270:	77fb      	strb	r3, [r7, #31]
 8007272:	e007      	b.n	8007284 <UART_SetConfig+0x348>
 8007274:	2308      	movs	r3, #8
 8007276:	77fb      	strb	r3, [r7, #31]
 8007278:	e004      	b.n	8007284 <UART_SetConfig+0x348>
 800727a:	2310      	movs	r3, #16
 800727c:	77fb      	strb	r3, [r7, #31]
 800727e:	e001      	b.n	8007284 <UART_SetConfig+0x348>
 8007280:	2310      	movs	r3, #16
 8007282:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800728c:	d15b      	bne.n	8007346 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800728e:	7ffb      	ldrb	r3, [r7, #31]
 8007290:	2b08      	cmp	r3, #8
 8007292:	d828      	bhi.n	80072e6 <UART_SetConfig+0x3aa>
 8007294:	a201      	add	r2, pc, #4	; (adr r2, 800729c <UART_SetConfig+0x360>)
 8007296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729a:	bf00      	nop
 800729c:	080072c1 	.word	0x080072c1
 80072a0:	080072c9 	.word	0x080072c9
 80072a4:	080072d1 	.word	0x080072d1
 80072a8:	080072e7 	.word	0x080072e7
 80072ac:	080072d7 	.word	0x080072d7
 80072b0:	080072e7 	.word	0x080072e7
 80072b4:	080072e7 	.word	0x080072e7
 80072b8:	080072e7 	.word	0x080072e7
 80072bc:	080072df 	.word	0x080072df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072c0:	f7fd ff8a 	bl	80051d8 <HAL_RCC_GetPCLK1Freq>
 80072c4:	61b8      	str	r0, [r7, #24]
        break;
 80072c6:	e013      	b.n	80072f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072c8:	f7fd ff9a 	bl	8005200 <HAL_RCC_GetPCLK2Freq>
 80072cc:	61b8      	str	r0, [r7, #24]
        break;
 80072ce:	e00f      	b.n	80072f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072d0:	4b4b      	ldr	r3, [pc, #300]	; (8007400 <UART_SetConfig+0x4c4>)
 80072d2:	61bb      	str	r3, [r7, #24]
        break;
 80072d4:	e00c      	b.n	80072f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072d6:	f7fd fe6d 	bl	8004fb4 <HAL_RCC_GetSysClockFreq>
 80072da:	61b8      	str	r0, [r7, #24]
        break;
 80072dc:	e008      	b.n	80072f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072e2:	61bb      	str	r3, [r7, #24]
        break;
 80072e4:	e004      	b.n	80072f0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80072e6:	2300      	movs	r3, #0
 80072e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	77bb      	strb	r3, [r7, #30]
        break;
 80072ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d074      	beq.n	80073e0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	005a      	lsls	r2, r3, #1
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	085b      	lsrs	r3, r3, #1
 8007300:	441a      	add	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	fbb2 f3f3 	udiv	r3, r2, r3
 800730a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	2b0f      	cmp	r3, #15
 8007310:	d916      	bls.n	8007340 <UART_SetConfig+0x404>
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007318:	d212      	bcs.n	8007340 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	b29b      	uxth	r3, r3
 800731e:	f023 030f 	bic.w	r3, r3, #15
 8007322:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	085b      	lsrs	r3, r3, #1
 8007328:	b29b      	uxth	r3, r3
 800732a:	f003 0307 	and.w	r3, r3, #7
 800732e:	b29a      	uxth	r2, r3
 8007330:	89fb      	ldrh	r3, [r7, #14]
 8007332:	4313      	orrs	r3, r2
 8007334:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	89fa      	ldrh	r2, [r7, #14]
 800733c:	60da      	str	r2, [r3, #12]
 800733e:	e04f      	b.n	80073e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	77bb      	strb	r3, [r7, #30]
 8007344:	e04c      	b.n	80073e0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007346:	7ffb      	ldrb	r3, [r7, #31]
 8007348:	2b08      	cmp	r3, #8
 800734a:	d828      	bhi.n	800739e <UART_SetConfig+0x462>
 800734c:	a201      	add	r2, pc, #4	; (adr r2, 8007354 <UART_SetConfig+0x418>)
 800734e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007352:	bf00      	nop
 8007354:	08007379 	.word	0x08007379
 8007358:	08007381 	.word	0x08007381
 800735c:	08007389 	.word	0x08007389
 8007360:	0800739f 	.word	0x0800739f
 8007364:	0800738f 	.word	0x0800738f
 8007368:	0800739f 	.word	0x0800739f
 800736c:	0800739f 	.word	0x0800739f
 8007370:	0800739f 	.word	0x0800739f
 8007374:	08007397 	.word	0x08007397
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007378:	f7fd ff2e 	bl	80051d8 <HAL_RCC_GetPCLK1Freq>
 800737c:	61b8      	str	r0, [r7, #24]
        break;
 800737e:	e013      	b.n	80073a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007380:	f7fd ff3e 	bl	8005200 <HAL_RCC_GetPCLK2Freq>
 8007384:	61b8      	str	r0, [r7, #24]
        break;
 8007386:	e00f      	b.n	80073a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007388:	4b1d      	ldr	r3, [pc, #116]	; (8007400 <UART_SetConfig+0x4c4>)
 800738a:	61bb      	str	r3, [r7, #24]
        break;
 800738c:	e00c      	b.n	80073a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800738e:	f7fd fe11 	bl	8004fb4 <HAL_RCC_GetSysClockFreq>
 8007392:	61b8      	str	r0, [r7, #24]
        break;
 8007394:	e008      	b.n	80073a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800739a:	61bb      	str	r3, [r7, #24]
        break;
 800739c:	e004      	b.n	80073a8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800739e:	2300      	movs	r3, #0
 80073a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	77bb      	strb	r3, [r7, #30]
        break;
 80073a6:	bf00      	nop
    }

    if (pclk != 0U)
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d018      	beq.n	80073e0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	085a      	lsrs	r2, r3, #1
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	441a      	add	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	2b0f      	cmp	r3, #15
 80073c6:	d909      	bls.n	80073dc <UART_SetConfig+0x4a0>
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ce:	d205      	bcs.n	80073dc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	60da      	str	r2, [r3, #12]
 80073da:	e001      	b.n	80073e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80073ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3720      	adds	r7, #32
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	40007c00 	.word	0x40007c00
 80073fc:	40023800 	.word	0x40023800
 8007400:	00f42400 	.word	0x00f42400

08007404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00a      	beq.n	800742e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	f003 0302 	and.w	r3, r3, #2
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	430a      	orrs	r2, r1
 800744e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007454:	f003 0304 	and.w	r3, r3, #4
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00a      	beq.n	8007472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	f003 0308 	and.w	r3, r3, #8
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00a      	beq.n	8007494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	430a      	orrs	r2, r1
 8007492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	f003 0310 	and.w	r3, r3, #16
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00a      	beq.n	80074b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ba:	f003 0320 	and.w	r3, r3, #32
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	430a      	orrs	r2, r1
 80074d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d01a      	beq.n	800751a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007502:	d10a      	bne.n	800751a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	430a      	orrs	r2, r1
 800753a:	605a      	str	r2, [r3, #4]
  }
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af02      	add	r7, sp, #8
 800754e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007558:	f7fb fcac 	bl	8002eb4 <HAL_GetTick>
 800755c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0308 	and.w	r3, r3, #8
 8007568:	2b08      	cmp	r3, #8
 800756a:	d10e      	bne.n	800758a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800756c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f81b 	bl	80075b6 <UART_WaitOnFlagUntilTimeout>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e011      	b.n	80075ae <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2220      	movs	r2, #32
 800758e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2220      	movs	r2, #32
 8007594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b09c      	sub	sp, #112	; 0x70
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	603b      	str	r3, [r7, #0]
 80075c2:	4613      	mov	r3, r2
 80075c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075c6:	e0a7      	b.n	8007718 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ce:	f000 80a3 	beq.w	8007718 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075d2:	f7fb fc6f 	bl	8002eb4 <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80075de:	429a      	cmp	r2, r3
 80075e0:	d302      	bcc.n	80075e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80075e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d13f      	bne.n	8007668 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80075f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075fc:	667b      	str	r3, [r7, #100]	; 0x64
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007606:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007608:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800760c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e6      	bne.n	80075e8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3308      	adds	r3, #8
 8007620:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007624:	e853 3f00 	ldrex	r3, [r3]
 8007628:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800762a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762c:	f023 0301 	bic.w	r3, r3, #1
 8007630:	663b      	str	r3, [r7, #96]	; 0x60
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3308      	adds	r3, #8
 8007638:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800763a:	64ba      	str	r2, [r7, #72]	; 0x48
 800763c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007640:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007642:	e841 2300 	strex	r3, r2, [r1]
 8007646:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1e5      	bne.n	800761a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2220      	movs	r2, #32
 8007652:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2220      	movs	r2, #32
 8007658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e068      	b.n	800773a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0304 	and.w	r3, r3, #4
 8007672:	2b00      	cmp	r3, #0
 8007674:	d050      	beq.n	8007718 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007684:	d148      	bne.n	8007718 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800768e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ae:	637b      	str	r3, [r7, #52]	; 0x34
 80076b0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80076bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e6      	bne.n	8007690 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	3308      	adds	r3, #8
 80076c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	e853 3f00 	ldrex	r3, [r3]
 80076d0:	613b      	str	r3, [r7, #16]
   return(result);
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f023 0301 	bic.w	r3, r3, #1
 80076d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3308      	adds	r3, #8
 80076e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80076e2:	623a      	str	r2, [r7, #32]
 80076e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e6:	69f9      	ldr	r1, [r7, #28]
 80076e8:	6a3a      	ldr	r2, [r7, #32]
 80076ea:	e841 2300 	strex	r3, r2, [r1]
 80076ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1e5      	bne.n	80076c2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2220      	movs	r2, #32
 80076fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2220      	movs	r2, #32
 8007700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2220      	movs	r2, #32
 8007708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e010      	b.n	800773a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	69da      	ldr	r2, [r3, #28]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	4013      	ands	r3, r2
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	429a      	cmp	r2, r3
 8007726:	bf0c      	ite	eq
 8007728:	2301      	moveq	r3, #1
 800772a:	2300      	movne	r3, #0
 800772c:	b2db      	uxtb	r3, r3
 800772e:	461a      	mov	r2, r3
 8007730:	79fb      	ldrb	r3, [r7, #7]
 8007732:	429a      	cmp	r2, r3
 8007734:	f43f af48 	beq.w	80075c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3770      	adds	r7, #112	; 0x70
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
	...

08007744 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007744:	b480      	push	{r7}
 8007746:	b097      	sub	sp, #92	; 0x5c
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	4613      	mov	r3, r2
 8007750:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	88fa      	ldrh	r2, [r7, #6]
 800775c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	88fa      	ldrh	r2, [r7, #6]
 8007764:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007776:	d10e      	bne.n	8007796 <UART_Start_Receive_IT+0x52>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d105      	bne.n	800778c <UART_Start_Receive_IT+0x48>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007786:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800778a:	e02d      	b.n	80077e8 <UART_Start_Receive_IT+0xa4>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	22ff      	movs	r2, #255	; 0xff
 8007790:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007794:	e028      	b.n	80077e8 <UART_Start_Receive_IT+0xa4>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10d      	bne.n	80077ba <UART_Start_Receive_IT+0x76>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d104      	bne.n	80077b0 <UART_Start_Receive_IT+0x6c>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	22ff      	movs	r2, #255	; 0xff
 80077aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077ae:	e01b      	b.n	80077e8 <UART_Start_Receive_IT+0xa4>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	227f      	movs	r2, #127	; 0x7f
 80077b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077b8:	e016      	b.n	80077e8 <UART_Start_Receive_IT+0xa4>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077c2:	d10d      	bne.n	80077e0 <UART_Start_Receive_IT+0x9c>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d104      	bne.n	80077d6 <UART_Start_Receive_IT+0x92>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	227f      	movs	r2, #127	; 0x7f
 80077d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077d4:	e008      	b.n	80077e8 <UART_Start_Receive_IT+0xa4>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	223f      	movs	r2, #63	; 0x3f
 80077da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077de:	e003      	b.n	80077e8 <UART_Start_Receive_IT+0xa4>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2222      	movs	r2, #34	; 0x22
 80077f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3308      	adds	r3, #8
 80077fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007802:	e853 3f00 	ldrex	r3, [r3]
 8007806:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780a:	f043 0301 	orr.w	r3, r3, #1
 800780e:	657b      	str	r3, [r7, #84]	; 0x54
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3308      	adds	r3, #8
 8007816:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007818:	64ba      	str	r2, [r7, #72]	; 0x48
 800781a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800781e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007820:	e841 2300 	strex	r3, r2, [r1]
 8007824:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1e5      	bne.n	80077f8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007834:	d107      	bne.n	8007846 <UART_Start_Receive_IT+0x102>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d103      	bne.n	8007846 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	4a21      	ldr	r2, [pc, #132]	; (80078c8 <UART_Start_Receive_IT+0x184>)
 8007842:	669a      	str	r2, [r3, #104]	; 0x68
 8007844:	e002      	b.n	800784c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4a20      	ldr	r2, [pc, #128]	; (80078cc <UART_Start_Receive_IT+0x188>)
 800784a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d019      	beq.n	8007888 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	e853 3f00 	ldrex	r3, [r3]
 8007860:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007868:	64fb      	str	r3, [r7, #76]	; 0x4c
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007872:	637b      	str	r3, [r7, #52]	; 0x34
 8007874:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007876:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007878:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800787a:	e841 2300 	strex	r3, r2, [r1]
 800787e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1e6      	bne.n	8007854 <UART_Start_Receive_IT+0x110>
 8007886:	e018      	b.n	80078ba <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	e853 3f00 	ldrex	r3, [r3]
 8007894:	613b      	str	r3, [r7, #16]
   return(result);
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	f043 0320 	orr.w	r3, r3, #32
 800789c:	653b      	str	r3, [r7, #80]	; 0x50
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078a6:	623b      	str	r3, [r7, #32]
 80078a8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	69f9      	ldr	r1, [r7, #28]
 80078ac:	6a3a      	ldr	r2, [r7, #32]
 80078ae:	e841 2300 	strex	r3, r2, [r1]
 80078b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1e6      	bne.n	8007888 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	375c      	adds	r7, #92	; 0x5c
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	08007b7f 	.word	0x08007b7f
 80078cc:	08007a19 	.word	0x08007a19

080078d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b095      	sub	sp, #84	; 0x54
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e0:	e853 3f00 	ldrex	r3, [r3]
 80078e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	461a      	mov	r2, r3
 80078f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078f6:	643b      	str	r3, [r7, #64]	; 0x40
 80078f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078fe:	e841 2300 	strex	r3, r2, [r1]
 8007902:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1e6      	bne.n	80078d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	3308      	adds	r3, #8
 8007910:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007912:	6a3b      	ldr	r3, [r7, #32]
 8007914:	e853 3f00 	ldrex	r3, [r3]
 8007918:	61fb      	str	r3, [r7, #28]
   return(result);
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	f023 0301 	bic.w	r3, r3, #1
 8007920:	64bb      	str	r3, [r7, #72]	; 0x48
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3308      	adds	r3, #8
 8007928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800792a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800792c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007932:	e841 2300 	strex	r3, r2, [r1]
 8007936:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1e5      	bne.n	800790a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007942:	2b01      	cmp	r3, #1
 8007944:	d118      	bne.n	8007978 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	e853 3f00 	ldrex	r3, [r3]
 8007952:	60bb      	str	r3, [r7, #8]
   return(result);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f023 0310 	bic.w	r3, r3, #16
 800795a:	647b      	str	r3, [r7, #68]	; 0x44
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007964:	61bb      	str	r3, [r7, #24]
 8007966:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	6979      	ldr	r1, [r7, #20]
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	613b      	str	r3, [r7, #16]
   return(result);
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e6      	bne.n	8007946 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2220      	movs	r2, #32
 800797c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800798c:	bf00      	nop
 800798e:	3754      	adds	r7, #84	; 0x54
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f7ff faaa 	bl	8006f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079bc:	bf00      	nop
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079e0:	61fb      	str	r3, [r7, #28]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	61bb      	str	r3, [r7, #24]
 80079ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	6979      	ldr	r1, [r7, #20]
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	613b      	str	r3, [r7, #16]
   return(result);
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e6      	bne.n	80079cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2220      	movs	r2, #32
 8007a02:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7ff fa76 	bl	8006efc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a10:	bf00      	nop
 8007a12:	3720      	adds	r7, #32
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b096      	sub	sp, #88	; 0x58
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a26:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a30:	2b22      	cmp	r3, #34	; 0x22
 8007a32:	f040 8098 	bne.w	8007b66 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a40:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007a44:	b2d9      	uxtb	r1, r3
 8007a46:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a50:	400a      	ands	r2, r1
 8007a52:	b2d2      	uxtb	r2, r2
 8007a54:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d17b      	bne.n	8007b76 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a92:	653b      	str	r3, [r7, #80]	; 0x50
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007aa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007aa4:	e841 2300 	strex	r3, r2, [r1]
 8007aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1e6      	bne.n	8007a7e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3308      	adds	r3, #8
 8007ab6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	e853 3f00 	ldrex	r3, [r3]
 8007abe:	623b      	str	r3, [r7, #32]
   return(result);
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	f023 0301 	bic.w	r3, r3, #1
 8007ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	3308      	adds	r3, #8
 8007ace:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ad0:	633a      	str	r2, [r7, #48]	; 0x30
 8007ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ad8:	e841 2300 	strex	r3, r2, [r1]
 8007adc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1e5      	bne.n	8007ab0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d12e      	bne.n	8007b5e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	e853 3f00 	ldrex	r3, [r3]
 8007b12:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0310 	bic.w	r3, r3, #16
 8007b1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	461a      	mov	r2, r3
 8007b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b24:	61fb      	str	r3, [r7, #28]
 8007b26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b28:	69b9      	ldr	r1, [r7, #24]
 8007b2a:	69fa      	ldr	r2, [r7, #28]
 8007b2c:	e841 2300 	strex	r3, r2, [r1]
 8007b30:	617b      	str	r3, [r7, #20]
   return(result);
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1e6      	bne.n	8007b06 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	f003 0310 	and.w	r3, r3, #16
 8007b42:	2b10      	cmp	r3, #16
 8007b44:	d103      	bne.n	8007b4e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2210      	movs	r2, #16
 8007b4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7ff f9e4 	bl	8006f24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b5c:	e00b      	b.n	8007b76 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7fa fd1c 	bl	800259c <HAL_UART_RxCpltCallback>
}
 8007b64:	e007      	b.n	8007b76 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	699a      	ldr	r2, [r3, #24]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f042 0208 	orr.w	r2, r2, #8
 8007b74:	619a      	str	r2, [r3, #24]
}
 8007b76:	bf00      	nop
 8007b78:	3758      	adds	r7, #88	; 0x58
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b096      	sub	sp, #88	; 0x58
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b8c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b96:	2b22      	cmp	r3, #34	; 0x22
 8007b98:	f040 8098 	bne.w	8007ccc <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007baa:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007bac:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007bb0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc0:	1c9a      	adds	r2, r3, #2
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d17b      	bne.n	8007cdc <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bec:	e853 3f00 	ldrex	r3, [r3]
 8007bf0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c02:	643b      	str	r3, [r7, #64]	; 0x40
 8007c04:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c0a:	e841 2300 	strex	r3, r2, [r1]
 8007c0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1e6      	bne.n	8007be4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3308      	adds	r3, #8
 8007c1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	f023 0301 	bic.w	r3, r3, #1
 8007c2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3308      	adds	r3, #8
 8007c34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1e5      	bne.n	8007c16 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2220      	movs	r2, #32
 8007c4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d12e      	bne.n	8007cc4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	e853 3f00 	ldrex	r3, [r3]
 8007c78:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	f023 0310 	bic.w	r3, r3, #16
 8007c80:	647b      	str	r3, [r7, #68]	; 0x44
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c8a:	61bb      	str	r3, [r7, #24]
 8007c8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8e:	6979      	ldr	r1, [r7, #20]
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	e841 2300 	strex	r3, r2, [r1]
 8007c96:	613b      	str	r3, [r7, #16]
   return(result);
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1e6      	bne.n	8007c6c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69db      	ldr	r3, [r3, #28]
 8007ca4:	f003 0310 	and.w	r3, r3, #16
 8007ca8:	2b10      	cmp	r3, #16
 8007caa:	d103      	bne.n	8007cb4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2210      	movs	r2, #16
 8007cb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7ff f931 	bl	8006f24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cc2:	e00b      	b.n	8007cdc <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7fa fc69 	bl	800259c <HAL_UART_RxCpltCallback>
}
 8007cca:	e007      	b.n	8007cdc <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	699a      	ldr	r2, [r3, #24]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f042 0208 	orr.w	r2, r2, #8
 8007cda:	619a      	str	r2, [r3, #24]
}
 8007cdc:	bf00      	nop
 8007cde:	3758      	adds	r7, #88	; 0x58
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b084      	sub	sp, #16
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	f107 001c 	add.w	r0, r7, #28
 8007cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d120      	bne.n	8007d3e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68da      	ldr	r2, [r3, #12]
 8007d0c:	4b20      	ldr	r3, [pc, #128]	; (8007d90 <USB_CoreInit+0xac>)
 8007d0e:	4013      	ands	r3, r2
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d105      	bne.n	8007d32 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fa96 	bl	8008264 <USB_CoreReset>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	73fb      	strb	r3, [r7, #15]
 8007d3c:	e010      	b.n	8007d60 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fa8a 	bl	8008264 <USB_CoreReset>
 8007d50:	4603      	mov	r3, r0
 8007d52:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d58:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d10b      	bne.n	8007d7e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f043 0206 	orr.w	r2, r3, #6
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f043 0220 	orr.w	r2, r3, #32
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d8a:	b004      	add	sp, #16
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	ffbdffbf 	.word	0xffbdffbf

08007d94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f023 0201 	bic.w	r2, r3, #1
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b084      	sub	sp, #16
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007dd2:	78fb      	ldrb	r3, [r7, #3]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d115      	bne.n	8007e04 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007de4:	2001      	movs	r0, #1
 8007de6:	f7fb f871 	bl	8002ecc <HAL_Delay>
      ms++;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3301      	adds	r3, #1
 8007dee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fa29 	bl	8008248 <USB_GetMode>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d01e      	beq.n	8007e3a <USB_SetCurrentMode+0x84>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2b31      	cmp	r3, #49	; 0x31
 8007e00:	d9f0      	bls.n	8007de4 <USB_SetCurrentMode+0x2e>
 8007e02:	e01a      	b.n	8007e3a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e04:	78fb      	ldrb	r3, [r7, #3]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d115      	bne.n	8007e36 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e16:	2001      	movs	r0, #1
 8007e18:	f7fb f858 	bl	8002ecc <HAL_Delay>
      ms++;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fa10 	bl	8008248 <USB_GetMode>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d005      	beq.n	8007e3a <USB_SetCurrentMode+0x84>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b31      	cmp	r3, #49	; 0x31
 8007e32:	d9f0      	bls.n	8007e16 <USB_SetCurrentMode+0x60>
 8007e34:	e001      	b.n	8007e3a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e005      	b.n	8007e46 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2b32      	cmp	r3, #50	; 0x32
 8007e3e:	d101      	bne.n	8007e44 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e000      	b.n	8007e46 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e50:	b084      	sub	sp, #16
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b086      	sub	sp, #24
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	613b      	str	r3, [r7, #16]
 8007e6e:	e009      	b.n	8007e84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	3340      	adds	r3, #64	; 0x40
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	3301      	adds	r3, #1
 8007e82:	613b      	str	r3, [r7, #16]
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	2b0e      	cmp	r3, #14
 8007e88:	d9f2      	bls.n	8007e70 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d11c      	bne.n	8007eca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e9e:	f043 0302 	orr.w	r3, r3, #2
 8007ea2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	601a      	str	r2, [r3, #0]
 8007ec8:	e005      	b.n	8007ed6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ece:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007edc:	461a      	mov	r2, r3
 8007ede:	2300      	movs	r3, #0
 8007ee0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ee8:	4619      	mov	r1, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	680b      	ldr	r3, [r1, #0]
 8007ef4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d10c      	bne.n	8007f16 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d104      	bne.n	8007f0c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007f02:	2100      	movs	r1, #0
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f965 	bl	80081d4 <USB_SetDevSpeed>
 8007f0a:	e008      	b.n	8007f1e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f960 	bl	80081d4 <USB_SetDevSpeed>
 8007f14:	e003      	b.n	8007f1e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f16:	2103      	movs	r1, #3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f95b 	bl	80081d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f1e:	2110      	movs	r1, #16
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f8f3 	bl	800810c <USB_FlushTxFifo>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f91f 	bl	8008174 <USB_FlushRxFifo>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f46:	461a      	mov	r2, r3
 8007f48:	2300      	movs	r3, #0
 8007f4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f52:	461a      	mov	r2, r3
 8007f54:	2300      	movs	r3, #0
 8007f56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f5e:	461a      	mov	r2, r3
 8007f60:	2300      	movs	r3, #0
 8007f62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f64:	2300      	movs	r3, #0
 8007f66:	613b      	str	r3, [r7, #16]
 8007f68:	e043      	b.n	8007ff2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f80:	d118      	bne.n	8007fb4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10a      	bne.n	8007f9e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f94:	461a      	mov	r2, r3
 8007f96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	e013      	b.n	8007fc6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	015a      	lsls	r2, r3, #5
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007faa:	461a      	mov	r2, r3
 8007fac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007fb0:	6013      	str	r3, [r2, #0]
 8007fb2:	e008      	b.n	8007fc6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	015a      	lsls	r2, r3, #5
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4413      	add	r3, r2
 8007fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	613b      	str	r3, [r7, #16]
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d3b7      	bcc.n	8007f6a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	613b      	str	r3, [r7, #16]
 8007ffe:	e043      	b.n	8008088 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	4413      	add	r3, r2
 8008008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008016:	d118      	bne.n	800804a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10a      	bne.n	8008034 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	4413      	add	r3, r2
 8008026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802a:	461a      	mov	r2, r3
 800802c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	e013      	b.n	800805c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	015a      	lsls	r2, r3, #5
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	4413      	add	r3, r2
 800803c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008040:	461a      	mov	r2, r3
 8008042:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008046:	6013      	str	r3, [r2, #0]
 8008048:	e008      	b.n	800805c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	015a      	lsls	r2, r3, #5
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	4413      	add	r3, r2
 8008052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008056:	461a      	mov	r2, r3
 8008058:	2300      	movs	r3, #0
 800805a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008068:	461a      	mov	r2, r3
 800806a:	2300      	movs	r3, #0
 800806c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	4413      	add	r3, r2
 8008076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807a:	461a      	mov	r2, r3
 800807c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008080:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	3301      	adds	r3, #1
 8008086:	613b      	str	r3, [r7, #16]
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	429a      	cmp	r2, r3
 800808e:	d3b7      	bcc.n	8008000 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800809e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80080b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d105      	bne.n	80080c4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	f043 0210 	orr.w	r2, r3, #16
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	699a      	ldr	r2, [r3, #24]
 80080c8:	4b0e      	ldr	r3, [pc, #56]	; (8008104 <USB_DevInit+0x2b4>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80080d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d005      	beq.n	80080e2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	f043 0208 	orr.w	r2, r3, #8
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80080e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d105      	bne.n	80080f4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	699a      	ldr	r2, [r3, #24]
 80080ec:	4b06      	ldr	r3, [pc, #24]	; (8008108 <USB_DevInit+0x2b8>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3718      	adds	r7, #24
 80080fa:	46bd      	mov	sp, r7
 80080fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008100:	b004      	add	sp, #16
 8008102:	4770      	bx	lr
 8008104:	803c3800 	.word	0x803c3800
 8008108:	40000004 	.word	0x40000004

0800810c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3301      	adds	r3, #1
 800811e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	4a13      	ldr	r2, [pc, #76]	; (8008170 <USB_FlushTxFifo+0x64>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d901      	bls.n	800812c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e01b      	b.n	8008164 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	daf2      	bge.n	800811a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008134:	2300      	movs	r3, #0
 8008136:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	019b      	lsls	r3, r3, #6
 800813c:	f043 0220 	orr.w	r2, r3, #32
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	3301      	adds	r3, #1
 8008148:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	4a08      	ldr	r2, [pc, #32]	; (8008170 <USB_FlushTxFifo+0x64>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d901      	bls.n	8008156 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e006      	b.n	8008164 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	f003 0320 	and.w	r3, r3, #32
 800815e:	2b20      	cmp	r3, #32
 8008160:	d0f0      	beq.n	8008144 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr
 8008170:	00030d40 	.word	0x00030d40

08008174 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800817c:	2300      	movs	r3, #0
 800817e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	3301      	adds	r3, #1
 8008184:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4a11      	ldr	r2, [pc, #68]	; (80081d0 <USB_FlushRxFifo+0x5c>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d901      	bls.n	8008192 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e018      	b.n	80081c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	2b00      	cmp	r3, #0
 8008198:	daf2      	bge.n	8008180 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2210      	movs	r2, #16
 80081a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3301      	adds	r3, #1
 80081a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4a08      	ldr	r2, [pc, #32]	; (80081d0 <USB_FlushRxFifo+0x5c>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d901      	bls.n	80081b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e006      	b.n	80081c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	f003 0310 	and.w	r3, r3, #16
 80081be:	2b10      	cmp	r3, #16
 80081c0:	d0f0      	beq.n	80081a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	00030d40 	.word	0x00030d40

080081d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	78fb      	ldrb	r3, [r7, #3]
 80081ee:	68f9      	ldr	r1, [r7, #12]
 80081f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081f4:	4313      	orrs	r3, r2
 80081f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3714      	adds	r7, #20
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008206:	b480      	push	{r7}
 8008208:	b085      	sub	sp, #20
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008220:	f023 0303 	bic.w	r3, r3, #3
 8008224:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008234:	f043 0302 	orr.w	r3, r3, #2
 8008238:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	f003 0301 	and.w	r3, r3, #1
}
 8008258:	4618      	mov	r0, r3
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800826c:	2300      	movs	r3, #0
 800826e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	3301      	adds	r3, #1
 8008274:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	4a13      	ldr	r2, [pc, #76]	; (80082c8 <USB_CoreReset+0x64>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d901      	bls.n	8008282 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e01b      	b.n	80082ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	2b00      	cmp	r3, #0
 8008288:	daf2      	bge.n	8008270 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800828a:	2300      	movs	r3, #0
 800828c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	f043 0201 	orr.w	r2, r3, #1
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	3301      	adds	r3, #1
 800829e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4a09      	ldr	r2, [pc, #36]	; (80082c8 <USB_CoreReset+0x64>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d901      	bls.n	80082ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e006      	b.n	80082ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	f003 0301 	and.w	r3, r3, #1
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d0f0      	beq.n	800829a <USB_CoreReset+0x36>

  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	00030d40 	.word	0x00030d40

080082cc <atoi>:
 80082cc:	220a      	movs	r2, #10
 80082ce:	2100      	movs	r1, #0
 80082d0:	f000 bd3e 	b.w	8008d50 <strtol>

080082d4 <__errno>:
 80082d4:	4b01      	ldr	r3, [pc, #4]	; (80082dc <__errno+0x8>)
 80082d6:	6818      	ldr	r0, [r3, #0]
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	20000028 	.word	0x20000028

080082e0 <__libc_init_array>:
 80082e0:	b570      	push	{r4, r5, r6, lr}
 80082e2:	4d0d      	ldr	r5, [pc, #52]	; (8008318 <__libc_init_array+0x38>)
 80082e4:	4c0d      	ldr	r4, [pc, #52]	; (800831c <__libc_init_array+0x3c>)
 80082e6:	1b64      	subs	r4, r4, r5
 80082e8:	10a4      	asrs	r4, r4, #2
 80082ea:	2600      	movs	r6, #0
 80082ec:	42a6      	cmp	r6, r4
 80082ee:	d109      	bne.n	8008304 <__libc_init_array+0x24>
 80082f0:	4d0b      	ldr	r5, [pc, #44]	; (8008320 <__libc_init_array+0x40>)
 80082f2:	4c0c      	ldr	r4, [pc, #48]	; (8008324 <__libc_init_array+0x44>)
 80082f4:	f002 ff90 	bl	800b218 <_init>
 80082f8:	1b64      	subs	r4, r4, r5
 80082fa:	10a4      	asrs	r4, r4, #2
 80082fc:	2600      	movs	r6, #0
 80082fe:	42a6      	cmp	r6, r4
 8008300:	d105      	bne.n	800830e <__libc_init_array+0x2e>
 8008302:	bd70      	pop	{r4, r5, r6, pc}
 8008304:	f855 3b04 	ldr.w	r3, [r5], #4
 8008308:	4798      	blx	r3
 800830a:	3601      	adds	r6, #1
 800830c:	e7ee      	b.n	80082ec <__libc_init_array+0xc>
 800830e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008312:	4798      	blx	r3
 8008314:	3601      	adds	r6, #1
 8008316:	e7f2      	b.n	80082fe <__libc_init_array+0x1e>
 8008318:	0800b66c 	.word	0x0800b66c
 800831c:	0800b66c 	.word	0x0800b66c
 8008320:	0800b66c 	.word	0x0800b66c
 8008324:	0800b670 	.word	0x0800b670

08008328 <memset>:
 8008328:	4402      	add	r2, r0
 800832a:	4603      	mov	r3, r0
 800832c:	4293      	cmp	r3, r2
 800832e:	d100      	bne.n	8008332 <memset+0xa>
 8008330:	4770      	bx	lr
 8008332:	f803 1b01 	strb.w	r1, [r3], #1
 8008336:	e7f9      	b.n	800832c <memset+0x4>

08008338 <__cvt>:
 8008338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800833c:	ec55 4b10 	vmov	r4, r5, d0
 8008340:	2d00      	cmp	r5, #0
 8008342:	460e      	mov	r6, r1
 8008344:	4619      	mov	r1, r3
 8008346:	462b      	mov	r3, r5
 8008348:	bfbb      	ittet	lt
 800834a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800834e:	461d      	movlt	r5, r3
 8008350:	2300      	movge	r3, #0
 8008352:	232d      	movlt	r3, #45	; 0x2d
 8008354:	700b      	strb	r3, [r1, #0]
 8008356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008358:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800835c:	4691      	mov	r9, r2
 800835e:	f023 0820 	bic.w	r8, r3, #32
 8008362:	bfbc      	itt	lt
 8008364:	4622      	movlt	r2, r4
 8008366:	4614      	movlt	r4, r2
 8008368:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800836c:	d005      	beq.n	800837a <__cvt+0x42>
 800836e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008372:	d100      	bne.n	8008376 <__cvt+0x3e>
 8008374:	3601      	adds	r6, #1
 8008376:	2102      	movs	r1, #2
 8008378:	e000      	b.n	800837c <__cvt+0x44>
 800837a:	2103      	movs	r1, #3
 800837c:	ab03      	add	r3, sp, #12
 800837e:	9301      	str	r3, [sp, #4]
 8008380:	ab02      	add	r3, sp, #8
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	ec45 4b10 	vmov	d0, r4, r5
 8008388:	4653      	mov	r3, sl
 800838a:	4632      	mov	r2, r6
 800838c:	f000 fd78 	bl	8008e80 <_dtoa_r>
 8008390:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008394:	4607      	mov	r7, r0
 8008396:	d102      	bne.n	800839e <__cvt+0x66>
 8008398:	f019 0f01 	tst.w	r9, #1
 800839c:	d022      	beq.n	80083e4 <__cvt+0xac>
 800839e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083a2:	eb07 0906 	add.w	r9, r7, r6
 80083a6:	d110      	bne.n	80083ca <__cvt+0x92>
 80083a8:	783b      	ldrb	r3, [r7, #0]
 80083aa:	2b30      	cmp	r3, #48	; 0x30
 80083ac:	d10a      	bne.n	80083c4 <__cvt+0x8c>
 80083ae:	2200      	movs	r2, #0
 80083b0:	2300      	movs	r3, #0
 80083b2:	4620      	mov	r0, r4
 80083b4:	4629      	mov	r1, r5
 80083b6:	f7f8 fba7 	bl	8000b08 <__aeabi_dcmpeq>
 80083ba:	b918      	cbnz	r0, 80083c4 <__cvt+0x8c>
 80083bc:	f1c6 0601 	rsb	r6, r6, #1
 80083c0:	f8ca 6000 	str.w	r6, [sl]
 80083c4:	f8da 3000 	ldr.w	r3, [sl]
 80083c8:	4499      	add	r9, r3
 80083ca:	2200      	movs	r2, #0
 80083cc:	2300      	movs	r3, #0
 80083ce:	4620      	mov	r0, r4
 80083d0:	4629      	mov	r1, r5
 80083d2:	f7f8 fb99 	bl	8000b08 <__aeabi_dcmpeq>
 80083d6:	b108      	cbz	r0, 80083dc <__cvt+0xa4>
 80083d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80083dc:	2230      	movs	r2, #48	; 0x30
 80083de:	9b03      	ldr	r3, [sp, #12]
 80083e0:	454b      	cmp	r3, r9
 80083e2:	d307      	bcc.n	80083f4 <__cvt+0xbc>
 80083e4:	9b03      	ldr	r3, [sp, #12]
 80083e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083e8:	1bdb      	subs	r3, r3, r7
 80083ea:	4638      	mov	r0, r7
 80083ec:	6013      	str	r3, [r2, #0]
 80083ee:	b004      	add	sp, #16
 80083f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f4:	1c59      	adds	r1, r3, #1
 80083f6:	9103      	str	r1, [sp, #12]
 80083f8:	701a      	strb	r2, [r3, #0]
 80083fa:	e7f0      	b.n	80083de <__cvt+0xa6>

080083fc <__exponent>:
 80083fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083fe:	4603      	mov	r3, r0
 8008400:	2900      	cmp	r1, #0
 8008402:	bfb8      	it	lt
 8008404:	4249      	neglt	r1, r1
 8008406:	f803 2b02 	strb.w	r2, [r3], #2
 800840a:	bfb4      	ite	lt
 800840c:	222d      	movlt	r2, #45	; 0x2d
 800840e:	222b      	movge	r2, #43	; 0x2b
 8008410:	2909      	cmp	r1, #9
 8008412:	7042      	strb	r2, [r0, #1]
 8008414:	dd2a      	ble.n	800846c <__exponent+0x70>
 8008416:	f10d 0407 	add.w	r4, sp, #7
 800841a:	46a4      	mov	ip, r4
 800841c:	270a      	movs	r7, #10
 800841e:	46a6      	mov	lr, r4
 8008420:	460a      	mov	r2, r1
 8008422:	fb91 f6f7 	sdiv	r6, r1, r7
 8008426:	fb07 1516 	mls	r5, r7, r6, r1
 800842a:	3530      	adds	r5, #48	; 0x30
 800842c:	2a63      	cmp	r2, #99	; 0x63
 800842e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008432:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008436:	4631      	mov	r1, r6
 8008438:	dcf1      	bgt.n	800841e <__exponent+0x22>
 800843a:	3130      	adds	r1, #48	; 0x30
 800843c:	f1ae 0502 	sub.w	r5, lr, #2
 8008440:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008444:	1c44      	adds	r4, r0, #1
 8008446:	4629      	mov	r1, r5
 8008448:	4561      	cmp	r1, ip
 800844a:	d30a      	bcc.n	8008462 <__exponent+0x66>
 800844c:	f10d 0209 	add.w	r2, sp, #9
 8008450:	eba2 020e 	sub.w	r2, r2, lr
 8008454:	4565      	cmp	r5, ip
 8008456:	bf88      	it	hi
 8008458:	2200      	movhi	r2, #0
 800845a:	4413      	add	r3, r2
 800845c:	1a18      	subs	r0, r3, r0
 800845e:	b003      	add	sp, #12
 8008460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008466:	f804 2f01 	strb.w	r2, [r4, #1]!
 800846a:	e7ed      	b.n	8008448 <__exponent+0x4c>
 800846c:	2330      	movs	r3, #48	; 0x30
 800846e:	3130      	adds	r1, #48	; 0x30
 8008470:	7083      	strb	r3, [r0, #2]
 8008472:	70c1      	strb	r1, [r0, #3]
 8008474:	1d03      	adds	r3, r0, #4
 8008476:	e7f1      	b.n	800845c <__exponent+0x60>

08008478 <_printf_float>:
 8008478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847c:	ed2d 8b02 	vpush	{d8}
 8008480:	b08d      	sub	sp, #52	; 0x34
 8008482:	460c      	mov	r4, r1
 8008484:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008488:	4616      	mov	r6, r2
 800848a:	461f      	mov	r7, r3
 800848c:	4605      	mov	r5, r0
 800848e:	f001 fae5 	bl	8009a5c <_localeconv_r>
 8008492:	f8d0 a000 	ldr.w	sl, [r0]
 8008496:	4650      	mov	r0, sl
 8008498:	f7f7 feba 	bl	8000210 <strlen>
 800849c:	2300      	movs	r3, #0
 800849e:	930a      	str	r3, [sp, #40]	; 0x28
 80084a0:	6823      	ldr	r3, [r4, #0]
 80084a2:	9305      	str	r3, [sp, #20]
 80084a4:	f8d8 3000 	ldr.w	r3, [r8]
 80084a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80084ac:	3307      	adds	r3, #7
 80084ae:	f023 0307 	bic.w	r3, r3, #7
 80084b2:	f103 0208 	add.w	r2, r3, #8
 80084b6:	f8c8 2000 	str.w	r2, [r8]
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80084c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80084c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80084ca:	9307      	str	r3, [sp, #28]
 80084cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80084d0:	ee08 0a10 	vmov	s16, r0
 80084d4:	4b9f      	ldr	r3, [pc, #636]	; (8008754 <_printf_float+0x2dc>)
 80084d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084da:	f04f 32ff 	mov.w	r2, #4294967295
 80084de:	f7f8 fb45 	bl	8000b6c <__aeabi_dcmpun>
 80084e2:	bb88      	cbnz	r0, 8008548 <_printf_float+0xd0>
 80084e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084e8:	4b9a      	ldr	r3, [pc, #616]	; (8008754 <_printf_float+0x2dc>)
 80084ea:	f04f 32ff 	mov.w	r2, #4294967295
 80084ee:	f7f8 fb1f 	bl	8000b30 <__aeabi_dcmple>
 80084f2:	bb48      	cbnz	r0, 8008548 <_printf_float+0xd0>
 80084f4:	2200      	movs	r2, #0
 80084f6:	2300      	movs	r3, #0
 80084f8:	4640      	mov	r0, r8
 80084fa:	4649      	mov	r1, r9
 80084fc:	f7f8 fb0e 	bl	8000b1c <__aeabi_dcmplt>
 8008500:	b110      	cbz	r0, 8008508 <_printf_float+0x90>
 8008502:	232d      	movs	r3, #45	; 0x2d
 8008504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008508:	4b93      	ldr	r3, [pc, #588]	; (8008758 <_printf_float+0x2e0>)
 800850a:	4894      	ldr	r0, [pc, #592]	; (800875c <_printf_float+0x2e4>)
 800850c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008510:	bf94      	ite	ls
 8008512:	4698      	movls	r8, r3
 8008514:	4680      	movhi	r8, r0
 8008516:	2303      	movs	r3, #3
 8008518:	6123      	str	r3, [r4, #16]
 800851a:	9b05      	ldr	r3, [sp, #20]
 800851c:	f023 0204 	bic.w	r2, r3, #4
 8008520:	6022      	str	r2, [r4, #0]
 8008522:	f04f 0900 	mov.w	r9, #0
 8008526:	9700      	str	r7, [sp, #0]
 8008528:	4633      	mov	r3, r6
 800852a:	aa0b      	add	r2, sp, #44	; 0x2c
 800852c:	4621      	mov	r1, r4
 800852e:	4628      	mov	r0, r5
 8008530:	f000 f9d8 	bl	80088e4 <_printf_common>
 8008534:	3001      	adds	r0, #1
 8008536:	f040 8090 	bne.w	800865a <_printf_float+0x1e2>
 800853a:	f04f 30ff 	mov.w	r0, #4294967295
 800853e:	b00d      	add	sp, #52	; 0x34
 8008540:	ecbd 8b02 	vpop	{d8}
 8008544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008548:	4642      	mov	r2, r8
 800854a:	464b      	mov	r3, r9
 800854c:	4640      	mov	r0, r8
 800854e:	4649      	mov	r1, r9
 8008550:	f7f8 fb0c 	bl	8000b6c <__aeabi_dcmpun>
 8008554:	b140      	cbz	r0, 8008568 <_printf_float+0xf0>
 8008556:	464b      	mov	r3, r9
 8008558:	2b00      	cmp	r3, #0
 800855a:	bfbc      	itt	lt
 800855c:	232d      	movlt	r3, #45	; 0x2d
 800855e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008562:	487f      	ldr	r0, [pc, #508]	; (8008760 <_printf_float+0x2e8>)
 8008564:	4b7f      	ldr	r3, [pc, #508]	; (8008764 <_printf_float+0x2ec>)
 8008566:	e7d1      	b.n	800850c <_printf_float+0x94>
 8008568:	6863      	ldr	r3, [r4, #4]
 800856a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800856e:	9206      	str	r2, [sp, #24]
 8008570:	1c5a      	adds	r2, r3, #1
 8008572:	d13f      	bne.n	80085f4 <_printf_float+0x17c>
 8008574:	2306      	movs	r3, #6
 8008576:	6063      	str	r3, [r4, #4]
 8008578:	9b05      	ldr	r3, [sp, #20]
 800857a:	6861      	ldr	r1, [r4, #4]
 800857c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008580:	2300      	movs	r3, #0
 8008582:	9303      	str	r3, [sp, #12]
 8008584:	ab0a      	add	r3, sp, #40	; 0x28
 8008586:	e9cd b301 	strd	fp, r3, [sp, #4]
 800858a:	ab09      	add	r3, sp, #36	; 0x24
 800858c:	ec49 8b10 	vmov	d0, r8, r9
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	6022      	str	r2, [r4, #0]
 8008594:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008598:	4628      	mov	r0, r5
 800859a:	f7ff fecd 	bl	8008338 <__cvt>
 800859e:	9b06      	ldr	r3, [sp, #24]
 80085a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085a2:	2b47      	cmp	r3, #71	; 0x47
 80085a4:	4680      	mov	r8, r0
 80085a6:	d108      	bne.n	80085ba <_printf_float+0x142>
 80085a8:	1cc8      	adds	r0, r1, #3
 80085aa:	db02      	blt.n	80085b2 <_printf_float+0x13a>
 80085ac:	6863      	ldr	r3, [r4, #4]
 80085ae:	4299      	cmp	r1, r3
 80085b0:	dd41      	ble.n	8008636 <_printf_float+0x1be>
 80085b2:	f1ab 0b02 	sub.w	fp, fp, #2
 80085b6:	fa5f fb8b 	uxtb.w	fp, fp
 80085ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80085be:	d820      	bhi.n	8008602 <_printf_float+0x18a>
 80085c0:	3901      	subs	r1, #1
 80085c2:	465a      	mov	r2, fp
 80085c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80085c8:	9109      	str	r1, [sp, #36]	; 0x24
 80085ca:	f7ff ff17 	bl	80083fc <__exponent>
 80085ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085d0:	1813      	adds	r3, r2, r0
 80085d2:	2a01      	cmp	r2, #1
 80085d4:	4681      	mov	r9, r0
 80085d6:	6123      	str	r3, [r4, #16]
 80085d8:	dc02      	bgt.n	80085e0 <_printf_float+0x168>
 80085da:	6822      	ldr	r2, [r4, #0]
 80085dc:	07d2      	lsls	r2, r2, #31
 80085de:	d501      	bpl.n	80085e4 <_printf_float+0x16c>
 80085e0:	3301      	adds	r3, #1
 80085e2:	6123      	str	r3, [r4, #16]
 80085e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d09c      	beq.n	8008526 <_printf_float+0xae>
 80085ec:	232d      	movs	r3, #45	; 0x2d
 80085ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085f2:	e798      	b.n	8008526 <_printf_float+0xae>
 80085f4:	9a06      	ldr	r2, [sp, #24]
 80085f6:	2a47      	cmp	r2, #71	; 0x47
 80085f8:	d1be      	bne.n	8008578 <_printf_float+0x100>
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1bc      	bne.n	8008578 <_printf_float+0x100>
 80085fe:	2301      	movs	r3, #1
 8008600:	e7b9      	b.n	8008576 <_printf_float+0xfe>
 8008602:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008606:	d118      	bne.n	800863a <_printf_float+0x1c2>
 8008608:	2900      	cmp	r1, #0
 800860a:	6863      	ldr	r3, [r4, #4]
 800860c:	dd0b      	ble.n	8008626 <_printf_float+0x1ae>
 800860e:	6121      	str	r1, [r4, #16]
 8008610:	b913      	cbnz	r3, 8008618 <_printf_float+0x1a0>
 8008612:	6822      	ldr	r2, [r4, #0]
 8008614:	07d0      	lsls	r0, r2, #31
 8008616:	d502      	bpl.n	800861e <_printf_float+0x1a6>
 8008618:	3301      	adds	r3, #1
 800861a:	440b      	add	r3, r1
 800861c:	6123      	str	r3, [r4, #16]
 800861e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008620:	f04f 0900 	mov.w	r9, #0
 8008624:	e7de      	b.n	80085e4 <_printf_float+0x16c>
 8008626:	b913      	cbnz	r3, 800862e <_printf_float+0x1b6>
 8008628:	6822      	ldr	r2, [r4, #0]
 800862a:	07d2      	lsls	r2, r2, #31
 800862c:	d501      	bpl.n	8008632 <_printf_float+0x1ba>
 800862e:	3302      	adds	r3, #2
 8008630:	e7f4      	b.n	800861c <_printf_float+0x1a4>
 8008632:	2301      	movs	r3, #1
 8008634:	e7f2      	b.n	800861c <_printf_float+0x1a4>
 8008636:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800863a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800863c:	4299      	cmp	r1, r3
 800863e:	db05      	blt.n	800864c <_printf_float+0x1d4>
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	6121      	str	r1, [r4, #16]
 8008644:	07d8      	lsls	r0, r3, #31
 8008646:	d5ea      	bpl.n	800861e <_printf_float+0x1a6>
 8008648:	1c4b      	adds	r3, r1, #1
 800864a:	e7e7      	b.n	800861c <_printf_float+0x1a4>
 800864c:	2900      	cmp	r1, #0
 800864e:	bfd4      	ite	le
 8008650:	f1c1 0202 	rsble	r2, r1, #2
 8008654:	2201      	movgt	r2, #1
 8008656:	4413      	add	r3, r2
 8008658:	e7e0      	b.n	800861c <_printf_float+0x1a4>
 800865a:	6823      	ldr	r3, [r4, #0]
 800865c:	055a      	lsls	r2, r3, #21
 800865e:	d407      	bmi.n	8008670 <_printf_float+0x1f8>
 8008660:	6923      	ldr	r3, [r4, #16]
 8008662:	4642      	mov	r2, r8
 8008664:	4631      	mov	r1, r6
 8008666:	4628      	mov	r0, r5
 8008668:	47b8      	blx	r7
 800866a:	3001      	adds	r0, #1
 800866c:	d12c      	bne.n	80086c8 <_printf_float+0x250>
 800866e:	e764      	b.n	800853a <_printf_float+0xc2>
 8008670:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008674:	f240 80e0 	bls.w	8008838 <_printf_float+0x3c0>
 8008678:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800867c:	2200      	movs	r2, #0
 800867e:	2300      	movs	r3, #0
 8008680:	f7f8 fa42 	bl	8000b08 <__aeabi_dcmpeq>
 8008684:	2800      	cmp	r0, #0
 8008686:	d034      	beq.n	80086f2 <_printf_float+0x27a>
 8008688:	4a37      	ldr	r2, [pc, #220]	; (8008768 <_printf_float+0x2f0>)
 800868a:	2301      	movs	r3, #1
 800868c:	4631      	mov	r1, r6
 800868e:	4628      	mov	r0, r5
 8008690:	47b8      	blx	r7
 8008692:	3001      	adds	r0, #1
 8008694:	f43f af51 	beq.w	800853a <_printf_float+0xc2>
 8008698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800869c:	429a      	cmp	r2, r3
 800869e:	db02      	blt.n	80086a6 <_printf_float+0x22e>
 80086a0:	6823      	ldr	r3, [r4, #0]
 80086a2:	07d8      	lsls	r0, r3, #31
 80086a4:	d510      	bpl.n	80086c8 <_printf_float+0x250>
 80086a6:	ee18 3a10 	vmov	r3, s16
 80086aa:	4652      	mov	r2, sl
 80086ac:	4631      	mov	r1, r6
 80086ae:	4628      	mov	r0, r5
 80086b0:	47b8      	blx	r7
 80086b2:	3001      	adds	r0, #1
 80086b4:	f43f af41 	beq.w	800853a <_printf_float+0xc2>
 80086b8:	f04f 0800 	mov.w	r8, #0
 80086bc:	f104 091a 	add.w	r9, r4, #26
 80086c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086c2:	3b01      	subs	r3, #1
 80086c4:	4543      	cmp	r3, r8
 80086c6:	dc09      	bgt.n	80086dc <_printf_float+0x264>
 80086c8:	6823      	ldr	r3, [r4, #0]
 80086ca:	079b      	lsls	r3, r3, #30
 80086cc:	f100 8105 	bmi.w	80088da <_printf_float+0x462>
 80086d0:	68e0      	ldr	r0, [r4, #12]
 80086d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086d4:	4298      	cmp	r0, r3
 80086d6:	bfb8      	it	lt
 80086d8:	4618      	movlt	r0, r3
 80086da:	e730      	b.n	800853e <_printf_float+0xc6>
 80086dc:	2301      	movs	r3, #1
 80086de:	464a      	mov	r2, r9
 80086e0:	4631      	mov	r1, r6
 80086e2:	4628      	mov	r0, r5
 80086e4:	47b8      	blx	r7
 80086e6:	3001      	adds	r0, #1
 80086e8:	f43f af27 	beq.w	800853a <_printf_float+0xc2>
 80086ec:	f108 0801 	add.w	r8, r8, #1
 80086f0:	e7e6      	b.n	80086c0 <_printf_float+0x248>
 80086f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	dc39      	bgt.n	800876c <_printf_float+0x2f4>
 80086f8:	4a1b      	ldr	r2, [pc, #108]	; (8008768 <_printf_float+0x2f0>)
 80086fa:	2301      	movs	r3, #1
 80086fc:	4631      	mov	r1, r6
 80086fe:	4628      	mov	r0, r5
 8008700:	47b8      	blx	r7
 8008702:	3001      	adds	r0, #1
 8008704:	f43f af19 	beq.w	800853a <_printf_float+0xc2>
 8008708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800870c:	4313      	orrs	r3, r2
 800870e:	d102      	bne.n	8008716 <_printf_float+0x29e>
 8008710:	6823      	ldr	r3, [r4, #0]
 8008712:	07d9      	lsls	r1, r3, #31
 8008714:	d5d8      	bpl.n	80086c8 <_printf_float+0x250>
 8008716:	ee18 3a10 	vmov	r3, s16
 800871a:	4652      	mov	r2, sl
 800871c:	4631      	mov	r1, r6
 800871e:	4628      	mov	r0, r5
 8008720:	47b8      	blx	r7
 8008722:	3001      	adds	r0, #1
 8008724:	f43f af09 	beq.w	800853a <_printf_float+0xc2>
 8008728:	f04f 0900 	mov.w	r9, #0
 800872c:	f104 0a1a 	add.w	sl, r4, #26
 8008730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008732:	425b      	negs	r3, r3
 8008734:	454b      	cmp	r3, r9
 8008736:	dc01      	bgt.n	800873c <_printf_float+0x2c4>
 8008738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800873a:	e792      	b.n	8008662 <_printf_float+0x1ea>
 800873c:	2301      	movs	r3, #1
 800873e:	4652      	mov	r2, sl
 8008740:	4631      	mov	r1, r6
 8008742:	4628      	mov	r0, r5
 8008744:	47b8      	blx	r7
 8008746:	3001      	adds	r0, #1
 8008748:	f43f aef7 	beq.w	800853a <_printf_float+0xc2>
 800874c:	f109 0901 	add.w	r9, r9, #1
 8008750:	e7ee      	b.n	8008730 <_printf_float+0x2b8>
 8008752:	bf00      	nop
 8008754:	7fefffff 	.word	0x7fefffff
 8008758:	0800b28c 	.word	0x0800b28c
 800875c:	0800b290 	.word	0x0800b290
 8008760:	0800b298 	.word	0x0800b298
 8008764:	0800b294 	.word	0x0800b294
 8008768:	0800b29c 	.word	0x0800b29c
 800876c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800876e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008770:	429a      	cmp	r2, r3
 8008772:	bfa8      	it	ge
 8008774:	461a      	movge	r2, r3
 8008776:	2a00      	cmp	r2, #0
 8008778:	4691      	mov	r9, r2
 800877a:	dc37      	bgt.n	80087ec <_printf_float+0x374>
 800877c:	f04f 0b00 	mov.w	fp, #0
 8008780:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008784:	f104 021a 	add.w	r2, r4, #26
 8008788:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800878a:	9305      	str	r3, [sp, #20]
 800878c:	eba3 0309 	sub.w	r3, r3, r9
 8008790:	455b      	cmp	r3, fp
 8008792:	dc33      	bgt.n	80087fc <_printf_float+0x384>
 8008794:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008798:	429a      	cmp	r2, r3
 800879a:	db3b      	blt.n	8008814 <_printf_float+0x39c>
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	07da      	lsls	r2, r3, #31
 80087a0:	d438      	bmi.n	8008814 <_printf_float+0x39c>
 80087a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a4:	9a05      	ldr	r2, [sp, #20]
 80087a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087a8:	1a9a      	subs	r2, r3, r2
 80087aa:	eba3 0901 	sub.w	r9, r3, r1
 80087ae:	4591      	cmp	r9, r2
 80087b0:	bfa8      	it	ge
 80087b2:	4691      	movge	r9, r2
 80087b4:	f1b9 0f00 	cmp.w	r9, #0
 80087b8:	dc35      	bgt.n	8008826 <_printf_float+0x3ae>
 80087ba:	f04f 0800 	mov.w	r8, #0
 80087be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087c2:	f104 0a1a 	add.w	sl, r4, #26
 80087c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087ca:	1a9b      	subs	r3, r3, r2
 80087cc:	eba3 0309 	sub.w	r3, r3, r9
 80087d0:	4543      	cmp	r3, r8
 80087d2:	f77f af79 	ble.w	80086c8 <_printf_float+0x250>
 80087d6:	2301      	movs	r3, #1
 80087d8:	4652      	mov	r2, sl
 80087da:	4631      	mov	r1, r6
 80087dc:	4628      	mov	r0, r5
 80087de:	47b8      	blx	r7
 80087e0:	3001      	adds	r0, #1
 80087e2:	f43f aeaa 	beq.w	800853a <_printf_float+0xc2>
 80087e6:	f108 0801 	add.w	r8, r8, #1
 80087ea:	e7ec      	b.n	80087c6 <_printf_float+0x34e>
 80087ec:	4613      	mov	r3, r2
 80087ee:	4631      	mov	r1, r6
 80087f0:	4642      	mov	r2, r8
 80087f2:	4628      	mov	r0, r5
 80087f4:	47b8      	blx	r7
 80087f6:	3001      	adds	r0, #1
 80087f8:	d1c0      	bne.n	800877c <_printf_float+0x304>
 80087fa:	e69e      	b.n	800853a <_printf_float+0xc2>
 80087fc:	2301      	movs	r3, #1
 80087fe:	4631      	mov	r1, r6
 8008800:	4628      	mov	r0, r5
 8008802:	9205      	str	r2, [sp, #20]
 8008804:	47b8      	blx	r7
 8008806:	3001      	adds	r0, #1
 8008808:	f43f ae97 	beq.w	800853a <_printf_float+0xc2>
 800880c:	9a05      	ldr	r2, [sp, #20]
 800880e:	f10b 0b01 	add.w	fp, fp, #1
 8008812:	e7b9      	b.n	8008788 <_printf_float+0x310>
 8008814:	ee18 3a10 	vmov	r3, s16
 8008818:	4652      	mov	r2, sl
 800881a:	4631      	mov	r1, r6
 800881c:	4628      	mov	r0, r5
 800881e:	47b8      	blx	r7
 8008820:	3001      	adds	r0, #1
 8008822:	d1be      	bne.n	80087a2 <_printf_float+0x32a>
 8008824:	e689      	b.n	800853a <_printf_float+0xc2>
 8008826:	9a05      	ldr	r2, [sp, #20]
 8008828:	464b      	mov	r3, r9
 800882a:	4442      	add	r2, r8
 800882c:	4631      	mov	r1, r6
 800882e:	4628      	mov	r0, r5
 8008830:	47b8      	blx	r7
 8008832:	3001      	adds	r0, #1
 8008834:	d1c1      	bne.n	80087ba <_printf_float+0x342>
 8008836:	e680      	b.n	800853a <_printf_float+0xc2>
 8008838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800883a:	2a01      	cmp	r2, #1
 800883c:	dc01      	bgt.n	8008842 <_printf_float+0x3ca>
 800883e:	07db      	lsls	r3, r3, #31
 8008840:	d538      	bpl.n	80088b4 <_printf_float+0x43c>
 8008842:	2301      	movs	r3, #1
 8008844:	4642      	mov	r2, r8
 8008846:	4631      	mov	r1, r6
 8008848:	4628      	mov	r0, r5
 800884a:	47b8      	blx	r7
 800884c:	3001      	adds	r0, #1
 800884e:	f43f ae74 	beq.w	800853a <_printf_float+0xc2>
 8008852:	ee18 3a10 	vmov	r3, s16
 8008856:	4652      	mov	r2, sl
 8008858:	4631      	mov	r1, r6
 800885a:	4628      	mov	r0, r5
 800885c:	47b8      	blx	r7
 800885e:	3001      	adds	r0, #1
 8008860:	f43f ae6b 	beq.w	800853a <_printf_float+0xc2>
 8008864:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008868:	2200      	movs	r2, #0
 800886a:	2300      	movs	r3, #0
 800886c:	f7f8 f94c 	bl	8000b08 <__aeabi_dcmpeq>
 8008870:	b9d8      	cbnz	r0, 80088aa <_printf_float+0x432>
 8008872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008874:	f108 0201 	add.w	r2, r8, #1
 8008878:	3b01      	subs	r3, #1
 800887a:	4631      	mov	r1, r6
 800887c:	4628      	mov	r0, r5
 800887e:	47b8      	blx	r7
 8008880:	3001      	adds	r0, #1
 8008882:	d10e      	bne.n	80088a2 <_printf_float+0x42a>
 8008884:	e659      	b.n	800853a <_printf_float+0xc2>
 8008886:	2301      	movs	r3, #1
 8008888:	4652      	mov	r2, sl
 800888a:	4631      	mov	r1, r6
 800888c:	4628      	mov	r0, r5
 800888e:	47b8      	blx	r7
 8008890:	3001      	adds	r0, #1
 8008892:	f43f ae52 	beq.w	800853a <_printf_float+0xc2>
 8008896:	f108 0801 	add.w	r8, r8, #1
 800889a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800889c:	3b01      	subs	r3, #1
 800889e:	4543      	cmp	r3, r8
 80088a0:	dcf1      	bgt.n	8008886 <_printf_float+0x40e>
 80088a2:	464b      	mov	r3, r9
 80088a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80088a8:	e6dc      	b.n	8008664 <_printf_float+0x1ec>
 80088aa:	f04f 0800 	mov.w	r8, #0
 80088ae:	f104 0a1a 	add.w	sl, r4, #26
 80088b2:	e7f2      	b.n	800889a <_printf_float+0x422>
 80088b4:	2301      	movs	r3, #1
 80088b6:	4642      	mov	r2, r8
 80088b8:	e7df      	b.n	800887a <_printf_float+0x402>
 80088ba:	2301      	movs	r3, #1
 80088bc:	464a      	mov	r2, r9
 80088be:	4631      	mov	r1, r6
 80088c0:	4628      	mov	r0, r5
 80088c2:	47b8      	blx	r7
 80088c4:	3001      	adds	r0, #1
 80088c6:	f43f ae38 	beq.w	800853a <_printf_float+0xc2>
 80088ca:	f108 0801 	add.w	r8, r8, #1
 80088ce:	68e3      	ldr	r3, [r4, #12]
 80088d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088d2:	1a5b      	subs	r3, r3, r1
 80088d4:	4543      	cmp	r3, r8
 80088d6:	dcf0      	bgt.n	80088ba <_printf_float+0x442>
 80088d8:	e6fa      	b.n	80086d0 <_printf_float+0x258>
 80088da:	f04f 0800 	mov.w	r8, #0
 80088de:	f104 0919 	add.w	r9, r4, #25
 80088e2:	e7f4      	b.n	80088ce <_printf_float+0x456>

080088e4 <_printf_common>:
 80088e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e8:	4616      	mov	r6, r2
 80088ea:	4699      	mov	r9, r3
 80088ec:	688a      	ldr	r2, [r1, #8]
 80088ee:	690b      	ldr	r3, [r1, #16]
 80088f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088f4:	4293      	cmp	r3, r2
 80088f6:	bfb8      	it	lt
 80088f8:	4613      	movlt	r3, r2
 80088fa:	6033      	str	r3, [r6, #0]
 80088fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008900:	4607      	mov	r7, r0
 8008902:	460c      	mov	r4, r1
 8008904:	b10a      	cbz	r2, 800890a <_printf_common+0x26>
 8008906:	3301      	adds	r3, #1
 8008908:	6033      	str	r3, [r6, #0]
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	0699      	lsls	r1, r3, #26
 800890e:	bf42      	ittt	mi
 8008910:	6833      	ldrmi	r3, [r6, #0]
 8008912:	3302      	addmi	r3, #2
 8008914:	6033      	strmi	r3, [r6, #0]
 8008916:	6825      	ldr	r5, [r4, #0]
 8008918:	f015 0506 	ands.w	r5, r5, #6
 800891c:	d106      	bne.n	800892c <_printf_common+0x48>
 800891e:	f104 0a19 	add.w	sl, r4, #25
 8008922:	68e3      	ldr	r3, [r4, #12]
 8008924:	6832      	ldr	r2, [r6, #0]
 8008926:	1a9b      	subs	r3, r3, r2
 8008928:	42ab      	cmp	r3, r5
 800892a:	dc26      	bgt.n	800897a <_printf_common+0x96>
 800892c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008930:	1e13      	subs	r3, r2, #0
 8008932:	6822      	ldr	r2, [r4, #0]
 8008934:	bf18      	it	ne
 8008936:	2301      	movne	r3, #1
 8008938:	0692      	lsls	r2, r2, #26
 800893a:	d42b      	bmi.n	8008994 <_printf_common+0xb0>
 800893c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008940:	4649      	mov	r1, r9
 8008942:	4638      	mov	r0, r7
 8008944:	47c0      	blx	r8
 8008946:	3001      	adds	r0, #1
 8008948:	d01e      	beq.n	8008988 <_printf_common+0xa4>
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	68e5      	ldr	r5, [r4, #12]
 800894e:	6832      	ldr	r2, [r6, #0]
 8008950:	f003 0306 	and.w	r3, r3, #6
 8008954:	2b04      	cmp	r3, #4
 8008956:	bf08      	it	eq
 8008958:	1aad      	subeq	r5, r5, r2
 800895a:	68a3      	ldr	r3, [r4, #8]
 800895c:	6922      	ldr	r2, [r4, #16]
 800895e:	bf0c      	ite	eq
 8008960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008964:	2500      	movne	r5, #0
 8008966:	4293      	cmp	r3, r2
 8008968:	bfc4      	itt	gt
 800896a:	1a9b      	subgt	r3, r3, r2
 800896c:	18ed      	addgt	r5, r5, r3
 800896e:	2600      	movs	r6, #0
 8008970:	341a      	adds	r4, #26
 8008972:	42b5      	cmp	r5, r6
 8008974:	d11a      	bne.n	80089ac <_printf_common+0xc8>
 8008976:	2000      	movs	r0, #0
 8008978:	e008      	b.n	800898c <_printf_common+0xa8>
 800897a:	2301      	movs	r3, #1
 800897c:	4652      	mov	r2, sl
 800897e:	4649      	mov	r1, r9
 8008980:	4638      	mov	r0, r7
 8008982:	47c0      	blx	r8
 8008984:	3001      	adds	r0, #1
 8008986:	d103      	bne.n	8008990 <_printf_common+0xac>
 8008988:	f04f 30ff 	mov.w	r0, #4294967295
 800898c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008990:	3501      	adds	r5, #1
 8008992:	e7c6      	b.n	8008922 <_printf_common+0x3e>
 8008994:	18e1      	adds	r1, r4, r3
 8008996:	1c5a      	adds	r2, r3, #1
 8008998:	2030      	movs	r0, #48	; 0x30
 800899a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800899e:	4422      	add	r2, r4
 80089a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089a8:	3302      	adds	r3, #2
 80089aa:	e7c7      	b.n	800893c <_printf_common+0x58>
 80089ac:	2301      	movs	r3, #1
 80089ae:	4622      	mov	r2, r4
 80089b0:	4649      	mov	r1, r9
 80089b2:	4638      	mov	r0, r7
 80089b4:	47c0      	blx	r8
 80089b6:	3001      	adds	r0, #1
 80089b8:	d0e6      	beq.n	8008988 <_printf_common+0xa4>
 80089ba:	3601      	adds	r6, #1
 80089bc:	e7d9      	b.n	8008972 <_printf_common+0x8e>
	...

080089c0 <_printf_i>:
 80089c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089c4:	7e0f      	ldrb	r7, [r1, #24]
 80089c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80089c8:	2f78      	cmp	r7, #120	; 0x78
 80089ca:	4691      	mov	r9, r2
 80089cc:	4680      	mov	r8, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	469a      	mov	sl, r3
 80089d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80089d6:	d807      	bhi.n	80089e8 <_printf_i+0x28>
 80089d8:	2f62      	cmp	r7, #98	; 0x62
 80089da:	d80a      	bhi.n	80089f2 <_printf_i+0x32>
 80089dc:	2f00      	cmp	r7, #0
 80089de:	f000 80d8 	beq.w	8008b92 <_printf_i+0x1d2>
 80089e2:	2f58      	cmp	r7, #88	; 0x58
 80089e4:	f000 80a3 	beq.w	8008b2e <_printf_i+0x16e>
 80089e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089f0:	e03a      	b.n	8008a68 <_printf_i+0xa8>
 80089f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089f6:	2b15      	cmp	r3, #21
 80089f8:	d8f6      	bhi.n	80089e8 <_printf_i+0x28>
 80089fa:	a101      	add	r1, pc, #4	; (adr r1, 8008a00 <_printf_i+0x40>)
 80089fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a00:	08008a59 	.word	0x08008a59
 8008a04:	08008a6d 	.word	0x08008a6d
 8008a08:	080089e9 	.word	0x080089e9
 8008a0c:	080089e9 	.word	0x080089e9
 8008a10:	080089e9 	.word	0x080089e9
 8008a14:	080089e9 	.word	0x080089e9
 8008a18:	08008a6d 	.word	0x08008a6d
 8008a1c:	080089e9 	.word	0x080089e9
 8008a20:	080089e9 	.word	0x080089e9
 8008a24:	080089e9 	.word	0x080089e9
 8008a28:	080089e9 	.word	0x080089e9
 8008a2c:	08008b79 	.word	0x08008b79
 8008a30:	08008a9d 	.word	0x08008a9d
 8008a34:	08008b5b 	.word	0x08008b5b
 8008a38:	080089e9 	.word	0x080089e9
 8008a3c:	080089e9 	.word	0x080089e9
 8008a40:	08008b9b 	.word	0x08008b9b
 8008a44:	080089e9 	.word	0x080089e9
 8008a48:	08008a9d 	.word	0x08008a9d
 8008a4c:	080089e9 	.word	0x080089e9
 8008a50:	080089e9 	.word	0x080089e9
 8008a54:	08008b63 	.word	0x08008b63
 8008a58:	682b      	ldr	r3, [r5, #0]
 8008a5a:	1d1a      	adds	r2, r3, #4
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	602a      	str	r2, [r5, #0]
 8008a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e0a3      	b.n	8008bb4 <_printf_i+0x1f4>
 8008a6c:	6820      	ldr	r0, [r4, #0]
 8008a6e:	6829      	ldr	r1, [r5, #0]
 8008a70:	0606      	lsls	r6, r0, #24
 8008a72:	f101 0304 	add.w	r3, r1, #4
 8008a76:	d50a      	bpl.n	8008a8e <_printf_i+0xce>
 8008a78:	680e      	ldr	r6, [r1, #0]
 8008a7a:	602b      	str	r3, [r5, #0]
 8008a7c:	2e00      	cmp	r6, #0
 8008a7e:	da03      	bge.n	8008a88 <_printf_i+0xc8>
 8008a80:	232d      	movs	r3, #45	; 0x2d
 8008a82:	4276      	negs	r6, r6
 8008a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a88:	485e      	ldr	r0, [pc, #376]	; (8008c04 <_printf_i+0x244>)
 8008a8a:	230a      	movs	r3, #10
 8008a8c:	e019      	b.n	8008ac2 <_printf_i+0x102>
 8008a8e:	680e      	ldr	r6, [r1, #0]
 8008a90:	602b      	str	r3, [r5, #0]
 8008a92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a96:	bf18      	it	ne
 8008a98:	b236      	sxthne	r6, r6
 8008a9a:	e7ef      	b.n	8008a7c <_printf_i+0xbc>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	6820      	ldr	r0, [r4, #0]
 8008aa0:	1d19      	adds	r1, r3, #4
 8008aa2:	6029      	str	r1, [r5, #0]
 8008aa4:	0601      	lsls	r1, r0, #24
 8008aa6:	d501      	bpl.n	8008aac <_printf_i+0xec>
 8008aa8:	681e      	ldr	r6, [r3, #0]
 8008aaa:	e002      	b.n	8008ab2 <_printf_i+0xf2>
 8008aac:	0646      	lsls	r6, r0, #25
 8008aae:	d5fb      	bpl.n	8008aa8 <_printf_i+0xe8>
 8008ab0:	881e      	ldrh	r6, [r3, #0]
 8008ab2:	4854      	ldr	r0, [pc, #336]	; (8008c04 <_printf_i+0x244>)
 8008ab4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ab6:	bf0c      	ite	eq
 8008ab8:	2308      	moveq	r3, #8
 8008aba:	230a      	movne	r3, #10
 8008abc:	2100      	movs	r1, #0
 8008abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ac2:	6865      	ldr	r5, [r4, #4]
 8008ac4:	60a5      	str	r5, [r4, #8]
 8008ac6:	2d00      	cmp	r5, #0
 8008ac8:	bfa2      	ittt	ge
 8008aca:	6821      	ldrge	r1, [r4, #0]
 8008acc:	f021 0104 	bicge.w	r1, r1, #4
 8008ad0:	6021      	strge	r1, [r4, #0]
 8008ad2:	b90e      	cbnz	r6, 8008ad8 <_printf_i+0x118>
 8008ad4:	2d00      	cmp	r5, #0
 8008ad6:	d04d      	beq.n	8008b74 <_printf_i+0x1b4>
 8008ad8:	4615      	mov	r5, r2
 8008ada:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ade:	fb03 6711 	mls	r7, r3, r1, r6
 8008ae2:	5dc7      	ldrb	r7, [r0, r7]
 8008ae4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ae8:	4637      	mov	r7, r6
 8008aea:	42bb      	cmp	r3, r7
 8008aec:	460e      	mov	r6, r1
 8008aee:	d9f4      	bls.n	8008ada <_printf_i+0x11a>
 8008af0:	2b08      	cmp	r3, #8
 8008af2:	d10b      	bne.n	8008b0c <_printf_i+0x14c>
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	07de      	lsls	r6, r3, #31
 8008af8:	d508      	bpl.n	8008b0c <_printf_i+0x14c>
 8008afa:	6923      	ldr	r3, [r4, #16]
 8008afc:	6861      	ldr	r1, [r4, #4]
 8008afe:	4299      	cmp	r1, r3
 8008b00:	bfde      	ittt	le
 8008b02:	2330      	movle	r3, #48	; 0x30
 8008b04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b0c:	1b52      	subs	r2, r2, r5
 8008b0e:	6122      	str	r2, [r4, #16]
 8008b10:	f8cd a000 	str.w	sl, [sp]
 8008b14:	464b      	mov	r3, r9
 8008b16:	aa03      	add	r2, sp, #12
 8008b18:	4621      	mov	r1, r4
 8008b1a:	4640      	mov	r0, r8
 8008b1c:	f7ff fee2 	bl	80088e4 <_printf_common>
 8008b20:	3001      	adds	r0, #1
 8008b22:	d14c      	bne.n	8008bbe <_printf_i+0x1fe>
 8008b24:	f04f 30ff 	mov.w	r0, #4294967295
 8008b28:	b004      	add	sp, #16
 8008b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b2e:	4835      	ldr	r0, [pc, #212]	; (8008c04 <_printf_i+0x244>)
 8008b30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008b34:	6829      	ldr	r1, [r5, #0]
 8008b36:	6823      	ldr	r3, [r4, #0]
 8008b38:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b3c:	6029      	str	r1, [r5, #0]
 8008b3e:	061d      	lsls	r5, r3, #24
 8008b40:	d514      	bpl.n	8008b6c <_printf_i+0x1ac>
 8008b42:	07df      	lsls	r7, r3, #31
 8008b44:	bf44      	itt	mi
 8008b46:	f043 0320 	orrmi.w	r3, r3, #32
 8008b4a:	6023      	strmi	r3, [r4, #0]
 8008b4c:	b91e      	cbnz	r6, 8008b56 <_printf_i+0x196>
 8008b4e:	6823      	ldr	r3, [r4, #0]
 8008b50:	f023 0320 	bic.w	r3, r3, #32
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	2310      	movs	r3, #16
 8008b58:	e7b0      	b.n	8008abc <_printf_i+0xfc>
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	f043 0320 	orr.w	r3, r3, #32
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	2378      	movs	r3, #120	; 0x78
 8008b64:	4828      	ldr	r0, [pc, #160]	; (8008c08 <_printf_i+0x248>)
 8008b66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b6a:	e7e3      	b.n	8008b34 <_printf_i+0x174>
 8008b6c:	0659      	lsls	r1, r3, #25
 8008b6e:	bf48      	it	mi
 8008b70:	b2b6      	uxthmi	r6, r6
 8008b72:	e7e6      	b.n	8008b42 <_printf_i+0x182>
 8008b74:	4615      	mov	r5, r2
 8008b76:	e7bb      	b.n	8008af0 <_printf_i+0x130>
 8008b78:	682b      	ldr	r3, [r5, #0]
 8008b7a:	6826      	ldr	r6, [r4, #0]
 8008b7c:	6961      	ldr	r1, [r4, #20]
 8008b7e:	1d18      	adds	r0, r3, #4
 8008b80:	6028      	str	r0, [r5, #0]
 8008b82:	0635      	lsls	r5, r6, #24
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	d501      	bpl.n	8008b8c <_printf_i+0x1cc>
 8008b88:	6019      	str	r1, [r3, #0]
 8008b8a:	e002      	b.n	8008b92 <_printf_i+0x1d2>
 8008b8c:	0670      	lsls	r0, r6, #25
 8008b8e:	d5fb      	bpl.n	8008b88 <_printf_i+0x1c8>
 8008b90:	8019      	strh	r1, [r3, #0]
 8008b92:	2300      	movs	r3, #0
 8008b94:	6123      	str	r3, [r4, #16]
 8008b96:	4615      	mov	r5, r2
 8008b98:	e7ba      	b.n	8008b10 <_printf_i+0x150>
 8008b9a:	682b      	ldr	r3, [r5, #0]
 8008b9c:	1d1a      	adds	r2, r3, #4
 8008b9e:	602a      	str	r2, [r5, #0]
 8008ba0:	681d      	ldr	r5, [r3, #0]
 8008ba2:	6862      	ldr	r2, [r4, #4]
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	f7f7 fb3a 	bl	8000220 <memchr>
 8008bac:	b108      	cbz	r0, 8008bb2 <_printf_i+0x1f2>
 8008bae:	1b40      	subs	r0, r0, r5
 8008bb0:	6060      	str	r0, [r4, #4]
 8008bb2:	6863      	ldr	r3, [r4, #4]
 8008bb4:	6123      	str	r3, [r4, #16]
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bbc:	e7a8      	b.n	8008b10 <_printf_i+0x150>
 8008bbe:	6923      	ldr	r3, [r4, #16]
 8008bc0:	462a      	mov	r2, r5
 8008bc2:	4649      	mov	r1, r9
 8008bc4:	4640      	mov	r0, r8
 8008bc6:	47d0      	blx	sl
 8008bc8:	3001      	adds	r0, #1
 8008bca:	d0ab      	beq.n	8008b24 <_printf_i+0x164>
 8008bcc:	6823      	ldr	r3, [r4, #0]
 8008bce:	079b      	lsls	r3, r3, #30
 8008bd0:	d413      	bmi.n	8008bfa <_printf_i+0x23a>
 8008bd2:	68e0      	ldr	r0, [r4, #12]
 8008bd4:	9b03      	ldr	r3, [sp, #12]
 8008bd6:	4298      	cmp	r0, r3
 8008bd8:	bfb8      	it	lt
 8008bda:	4618      	movlt	r0, r3
 8008bdc:	e7a4      	b.n	8008b28 <_printf_i+0x168>
 8008bde:	2301      	movs	r3, #1
 8008be0:	4632      	mov	r2, r6
 8008be2:	4649      	mov	r1, r9
 8008be4:	4640      	mov	r0, r8
 8008be6:	47d0      	blx	sl
 8008be8:	3001      	adds	r0, #1
 8008bea:	d09b      	beq.n	8008b24 <_printf_i+0x164>
 8008bec:	3501      	adds	r5, #1
 8008bee:	68e3      	ldr	r3, [r4, #12]
 8008bf0:	9903      	ldr	r1, [sp, #12]
 8008bf2:	1a5b      	subs	r3, r3, r1
 8008bf4:	42ab      	cmp	r3, r5
 8008bf6:	dcf2      	bgt.n	8008bde <_printf_i+0x21e>
 8008bf8:	e7eb      	b.n	8008bd2 <_printf_i+0x212>
 8008bfa:	2500      	movs	r5, #0
 8008bfc:	f104 0619 	add.w	r6, r4, #25
 8008c00:	e7f5      	b.n	8008bee <_printf_i+0x22e>
 8008c02:	bf00      	nop
 8008c04:	0800b29e 	.word	0x0800b29e
 8008c08:	0800b2af 	.word	0x0800b2af

08008c0c <siprintf>:
 8008c0c:	b40e      	push	{r1, r2, r3}
 8008c0e:	b500      	push	{lr}
 8008c10:	b09c      	sub	sp, #112	; 0x70
 8008c12:	ab1d      	add	r3, sp, #116	; 0x74
 8008c14:	9002      	str	r0, [sp, #8]
 8008c16:	9006      	str	r0, [sp, #24]
 8008c18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c1c:	4809      	ldr	r0, [pc, #36]	; (8008c44 <siprintf+0x38>)
 8008c1e:	9107      	str	r1, [sp, #28]
 8008c20:	9104      	str	r1, [sp, #16]
 8008c22:	4909      	ldr	r1, [pc, #36]	; (8008c48 <siprintf+0x3c>)
 8008c24:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c28:	9105      	str	r1, [sp, #20]
 8008c2a:	6800      	ldr	r0, [r0, #0]
 8008c2c:	9301      	str	r3, [sp, #4]
 8008c2e:	a902      	add	r1, sp, #8
 8008c30:	f001 fc04 	bl	800a43c <_svfiprintf_r>
 8008c34:	9b02      	ldr	r3, [sp, #8]
 8008c36:	2200      	movs	r2, #0
 8008c38:	701a      	strb	r2, [r3, #0]
 8008c3a:	b01c      	add	sp, #112	; 0x70
 8008c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c40:	b003      	add	sp, #12
 8008c42:	4770      	bx	lr
 8008c44:	20000028 	.word	0x20000028
 8008c48:	ffff0208 	.word	0xffff0208

08008c4c <_strtol_l.constprop.0>:
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c52:	d001      	beq.n	8008c58 <_strtol_l.constprop.0+0xc>
 8008c54:	2b24      	cmp	r3, #36	; 0x24
 8008c56:	d906      	bls.n	8008c66 <_strtol_l.constprop.0+0x1a>
 8008c58:	f7ff fb3c 	bl	80082d4 <__errno>
 8008c5c:	2316      	movs	r3, #22
 8008c5e:	6003      	str	r3, [r0, #0]
 8008c60:	2000      	movs	r0, #0
 8008c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c66:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008d4c <_strtol_l.constprop.0+0x100>
 8008c6a:	460d      	mov	r5, r1
 8008c6c:	462e      	mov	r6, r5
 8008c6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c72:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008c76:	f017 0708 	ands.w	r7, r7, #8
 8008c7a:	d1f7      	bne.n	8008c6c <_strtol_l.constprop.0+0x20>
 8008c7c:	2c2d      	cmp	r4, #45	; 0x2d
 8008c7e:	d132      	bne.n	8008ce6 <_strtol_l.constprop.0+0x9a>
 8008c80:	782c      	ldrb	r4, [r5, #0]
 8008c82:	2701      	movs	r7, #1
 8008c84:	1cb5      	adds	r5, r6, #2
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d05b      	beq.n	8008d42 <_strtol_l.constprop.0+0xf6>
 8008c8a:	2b10      	cmp	r3, #16
 8008c8c:	d109      	bne.n	8008ca2 <_strtol_l.constprop.0+0x56>
 8008c8e:	2c30      	cmp	r4, #48	; 0x30
 8008c90:	d107      	bne.n	8008ca2 <_strtol_l.constprop.0+0x56>
 8008c92:	782c      	ldrb	r4, [r5, #0]
 8008c94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008c98:	2c58      	cmp	r4, #88	; 0x58
 8008c9a:	d14d      	bne.n	8008d38 <_strtol_l.constprop.0+0xec>
 8008c9c:	786c      	ldrb	r4, [r5, #1]
 8008c9e:	2310      	movs	r3, #16
 8008ca0:	3502      	adds	r5, #2
 8008ca2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008ca6:	f108 38ff 	add.w	r8, r8, #4294967295
 8008caa:	f04f 0c00 	mov.w	ip, #0
 8008cae:	fbb8 f9f3 	udiv	r9, r8, r3
 8008cb2:	4666      	mov	r6, ip
 8008cb4:	fb03 8a19 	mls	sl, r3, r9, r8
 8008cb8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008cbc:	f1be 0f09 	cmp.w	lr, #9
 8008cc0:	d816      	bhi.n	8008cf0 <_strtol_l.constprop.0+0xa4>
 8008cc2:	4674      	mov	r4, lr
 8008cc4:	42a3      	cmp	r3, r4
 8008cc6:	dd24      	ble.n	8008d12 <_strtol_l.constprop.0+0xc6>
 8008cc8:	f1bc 0f00 	cmp.w	ip, #0
 8008ccc:	db1e      	blt.n	8008d0c <_strtol_l.constprop.0+0xc0>
 8008cce:	45b1      	cmp	r9, r6
 8008cd0:	d31c      	bcc.n	8008d0c <_strtol_l.constprop.0+0xc0>
 8008cd2:	d101      	bne.n	8008cd8 <_strtol_l.constprop.0+0x8c>
 8008cd4:	45a2      	cmp	sl, r4
 8008cd6:	db19      	blt.n	8008d0c <_strtol_l.constprop.0+0xc0>
 8008cd8:	fb06 4603 	mla	r6, r6, r3, r4
 8008cdc:	f04f 0c01 	mov.w	ip, #1
 8008ce0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ce4:	e7e8      	b.n	8008cb8 <_strtol_l.constprop.0+0x6c>
 8008ce6:	2c2b      	cmp	r4, #43	; 0x2b
 8008ce8:	bf04      	itt	eq
 8008cea:	782c      	ldrbeq	r4, [r5, #0]
 8008cec:	1cb5      	addeq	r5, r6, #2
 8008cee:	e7ca      	b.n	8008c86 <_strtol_l.constprop.0+0x3a>
 8008cf0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008cf4:	f1be 0f19 	cmp.w	lr, #25
 8008cf8:	d801      	bhi.n	8008cfe <_strtol_l.constprop.0+0xb2>
 8008cfa:	3c37      	subs	r4, #55	; 0x37
 8008cfc:	e7e2      	b.n	8008cc4 <_strtol_l.constprop.0+0x78>
 8008cfe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008d02:	f1be 0f19 	cmp.w	lr, #25
 8008d06:	d804      	bhi.n	8008d12 <_strtol_l.constprop.0+0xc6>
 8008d08:	3c57      	subs	r4, #87	; 0x57
 8008d0a:	e7db      	b.n	8008cc4 <_strtol_l.constprop.0+0x78>
 8008d0c:	f04f 3cff 	mov.w	ip, #4294967295
 8008d10:	e7e6      	b.n	8008ce0 <_strtol_l.constprop.0+0x94>
 8008d12:	f1bc 0f00 	cmp.w	ip, #0
 8008d16:	da05      	bge.n	8008d24 <_strtol_l.constprop.0+0xd8>
 8008d18:	2322      	movs	r3, #34	; 0x22
 8008d1a:	6003      	str	r3, [r0, #0]
 8008d1c:	4646      	mov	r6, r8
 8008d1e:	b942      	cbnz	r2, 8008d32 <_strtol_l.constprop.0+0xe6>
 8008d20:	4630      	mov	r0, r6
 8008d22:	e79e      	b.n	8008c62 <_strtol_l.constprop.0+0x16>
 8008d24:	b107      	cbz	r7, 8008d28 <_strtol_l.constprop.0+0xdc>
 8008d26:	4276      	negs	r6, r6
 8008d28:	2a00      	cmp	r2, #0
 8008d2a:	d0f9      	beq.n	8008d20 <_strtol_l.constprop.0+0xd4>
 8008d2c:	f1bc 0f00 	cmp.w	ip, #0
 8008d30:	d000      	beq.n	8008d34 <_strtol_l.constprop.0+0xe8>
 8008d32:	1e69      	subs	r1, r5, #1
 8008d34:	6011      	str	r1, [r2, #0]
 8008d36:	e7f3      	b.n	8008d20 <_strtol_l.constprop.0+0xd4>
 8008d38:	2430      	movs	r4, #48	; 0x30
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1b1      	bne.n	8008ca2 <_strtol_l.constprop.0+0x56>
 8008d3e:	2308      	movs	r3, #8
 8008d40:	e7af      	b.n	8008ca2 <_strtol_l.constprop.0+0x56>
 8008d42:	2c30      	cmp	r4, #48	; 0x30
 8008d44:	d0a5      	beq.n	8008c92 <_strtol_l.constprop.0+0x46>
 8008d46:	230a      	movs	r3, #10
 8008d48:	e7ab      	b.n	8008ca2 <_strtol_l.constprop.0+0x56>
 8008d4a:	bf00      	nop
 8008d4c:	0800b2c1 	.word	0x0800b2c1

08008d50 <strtol>:
 8008d50:	4613      	mov	r3, r2
 8008d52:	460a      	mov	r2, r1
 8008d54:	4601      	mov	r1, r0
 8008d56:	4802      	ldr	r0, [pc, #8]	; (8008d60 <strtol+0x10>)
 8008d58:	6800      	ldr	r0, [r0, #0]
 8008d5a:	f7ff bf77 	b.w	8008c4c <_strtol_l.constprop.0>
 8008d5e:	bf00      	nop
 8008d60:	20000028 	.word	0x20000028

08008d64 <quorem>:
 8008d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d68:	6903      	ldr	r3, [r0, #16]
 8008d6a:	690c      	ldr	r4, [r1, #16]
 8008d6c:	42a3      	cmp	r3, r4
 8008d6e:	4607      	mov	r7, r0
 8008d70:	f2c0 8081 	blt.w	8008e76 <quorem+0x112>
 8008d74:	3c01      	subs	r4, #1
 8008d76:	f101 0814 	add.w	r8, r1, #20
 8008d7a:	f100 0514 	add.w	r5, r0, #20
 8008d7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d82:	9301      	str	r3, [sp, #4]
 8008d84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d98:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d9c:	d331      	bcc.n	8008e02 <quorem+0x9e>
 8008d9e:	f04f 0e00 	mov.w	lr, #0
 8008da2:	4640      	mov	r0, r8
 8008da4:	46ac      	mov	ip, r5
 8008da6:	46f2      	mov	sl, lr
 8008da8:	f850 2b04 	ldr.w	r2, [r0], #4
 8008dac:	b293      	uxth	r3, r2
 8008dae:	fb06 e303 	mla	r3, r6, r3, lr
 8008db2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	ebaa 0303 	sub.w	r3, sl, r3
 8008dbc:	f8dc a000 	ldr.w	sl, [ip]
 8008dc0:	0c12      	lsrs	r2, r2, #16
 8008dc2:	fa13 f38a 	uxtah	r3, r3, sl
 8008dc6:	fb06 e202 	mla	r2, r6, r2, lr
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	9b00      	ldr	r3, [sp, #0]
 8008dce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008dd2:	b292      	uxth	r2, r2
 8008dd4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008dd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ddc:	f8bd 3000 	ldrh.w	r3, [sp]
 8008de0:	4581      	cmp	r9, r0
 8008de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008de6:	f84c 3b04 	str.w	r3, [ip], #4
 8008dea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008dee:	d2db      	bcs.n	8008da8 <quorem+0x44>
 8008df0:	f855 300b 	ldr.w	r3, [r5, fp]
 8008df4:	b92b      	cbnz	r3, 8008e02 <quorem+0x9e>
 8008df6:	9b01      	ldr	r3, [sp, #4]
 8008df8:	3b04      	subs	r3, #4
 8008dfa:	429d      	cmp	r5, r3
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	d32e      	bcc.n	8008e5e <quorem+0xfa>
 8008e00:	613c      	str	r4, [r7, #16]
 8008e02:	4638      	mov	r0, r7
 8008e04:	f001 f8c6 	bl	8009f94 <__mcmp>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	db24      	blt.n	8008e56 <quorem+0xf2>
 8008e0c:	3601      	adds	r6, #1
 8008e0e:	4628      	mov	r0, r5
 8008e10:	f04f 0c00 	mov.w	ip, #0
 8008e14:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e18:	f8d0 e000 	ldr.w	lr, [r0]
 8008e1c:	b293      	uxth	r3, r2
 8008e1e:	ebac 0303 	sub.w	r3, ip, r3
 8008e22:	0c12      	lsrs	r2, r2, #16
 8008e24:	fa13 f38e 	uxtah	r3, r3, lr
 8008e28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008e2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e36:	45c1      	cmp	r9, r8
 8008e38:	f840 3b04 	str.w	r3, [r0], #4
 8008e3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008e40:	d2e8      	bcs.n	8008e14 <quorem+0xb0>
 8008e42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e4a:	b922      	cbnz	r2, 8008e56 <quorem+0xf2>
 8008e4c:	3b04      	subs	r3, #4
 8008e4e:	429d      	cmp	r5, r3
 8008e50:	461a      	mov	r2, r3
 8008e52:	d30a      	bcc.n	8008e6a <quorem+0x106>
 8008e54:	613c      	str	r4, [r7, #16]
 8008e56:	4630      	mov	r0, r6
 8008e58:	b003      	add	sp, #12
 8008e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5e:	6812      	ldr	r2, [r2, #0]
 8008e60:	3b04      	subs	r3, #4
 8008e62:	2a00      	cmp	r2, #0
 8008e64:	d1cc      	bne.n	8008e00 <quorem+0x9c>
 8008e66:	3c01      	subs	r4, #1
 8008e68:	e7c7      	b.n	8008dfa <quorem+0x96>
 8008e6a:	6812      	ldr	r2, [r2, #0]
 8008e6c:	3b04      	subs	r3, #4
 8008e6e:	2a00      	cmp	r2, #0
 8008e70:	d1f0      	bne.n	8008e54 <quorem+0xf0>
 8008e72:	3c01      	subs	r4, #1
 8008e74:	e7eb      	b.n	8008e4e <quorem+0xea>
 8008e76:	2000      	movs	r0, #0
 8008e78:	e7ee      	b.n	8008e58 <quorem+0xf4>
 8008e7a:	0000      	movs	r0, r0
 8008e7c:	0000      	movs	r0, r0
	...

08008e80 <_dtoa_r>:
 8008e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	ed2d 8b04 	vpush	{d8-d9}
 8008e88:	ec57 6b10 	vmov	r6, r7, d0
 8008e8c:	b093      	sub	sp, #76	; 0x4c
 8008e8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008e94:	9106      	str	r1, [sp, #24]
 8008e96:	ee10 aa10 	vmov	sl, s0
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e9e:	930c      	str	r3, [sp, #48]	; 0x30
 8008ea0:	46bb      	mov	fp, r7
 8008ea2:	b975      	cbnz	r5, 8008ec2 <_dtoa_r+0x42>
 8008ea4:	2010      	movs	r0, #16
 8008ea6:	f000 fddd 	bl	8009a64 <malloc>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	6260      	str	r0, [r4, #36]	; 0x24
 8008eae:	b920      	cbnz	r0, 8008eba <_dtoa_r+0x3a>
 8008eb0:	4ba7      	ldr	r3, [pc, #668]	; (8009150 <_dtoa_r+0x2d0>)
 8008eb2:	21ea      	movs	r1, #234	; 0xea
 8008eb4:	48a7      	ldr	r0, [pc, #668]	; (8009154 <_dtoa_r+0x2d4>)
 8008eb6:	f001 fbd1 	bl	800a65c <__assert_func>
 8008eba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ebe:	6005      	str	r5, [r0, #0]
 8008ec0:	60c5      	str	r5, [r0, #12]
 8008ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ec4:	6819      	ldr	r1, [r3, #0]
 8008ec6:	b151      	cbz	r1, 8008ede <_dtoa_r+0x5e>
 8008ec8:	685a      	ldr	r2, [r3, #4]
 8008eca:	604a      	str	r2, [r1, #4]
 8008ecc:	2301      	movs	r3, #1
 8008ece:	4093      	lsls	r3, r2
 8008ed0:	608b      	str	r3, [r1, #8]
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f000 fe1c 	bl	8009b10 <_Bfree>
 8008ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eda:	2200      	movs	r2, #0
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	1e3b      	subs	r3, r7, #0
 8008ee0:	bfaa      	itet	ge
 8008ee2:	2300      	movge	r3, #0
 8008ee4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008ee8:	f8c8 3000 	strge.w	r3, [r8]
 8008eec:	4b9a      	ldr	r3, [pc, #616]	; (8009158 <_dtoa_r+0x2d8>)
 8008eee:	bfbc      	itt	lt
 8008ef0:	2201      	movlt	r2, #1
 8008ef2:	f8c8 2000 	strlt.w	r2, [r8]
 8008ef6:	ea33 030b 	bics.w	r3, r3, fp
 8008efa:	d11b      	bne.n	8008f34 <_dtoa_r+0xb4>
 8008efc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008efe:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f02:	6013      	str	r3, [r2, #0]
 8008f04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f08:	4333      	orrs	r3, r6
 8008f0a:	f000 8592 	beq.w	8009a32 <_dtoa_r+0xbb2>
 8008f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f10:	b963      	cbnz	r3, 8008f2c <_dtoa_r+0xac>
 8008f12:	4b92      	ldr	r3, [pc, #584]	; (800915c <_dtoa_r+0x2dc>)
 8008f14:	e022      	b.n	8008f5c <_dtoa_r+0xdc>
 8008f16:	4b92      	ldr	r3, [pc, #584]	; (8009160 <_dtoa_r+0x2e0>)
 8008f18:	9301      	str	r3, [sp, #4]
 8008f1a:	3308      	adds	r3, #8
 8008f1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f1e:	6013      	str	r3, [r2, #0]
 8008f20:	9801      	ldr	r0, [sp, #4]
 8008f22:	b013      	add	sp, #76	; 0x4c
 8008f24:	ecbd 8b04 	vpop	{d8-d9}
 8008f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f2c:	4b8b      	ldr	r3, [pc, #556]	; (800915c <_dtoa_r+0x2dc>)
 8008f2e:	9301      	str	r3, [sp, #4]
 8008f30:	3303      	adds	r3, #3
 8008f32:	e7f3      	b.n	8008f1c <_dtoa_r+0x9c>
 8008f34:	2200      	movs	r2, #0
 8008f36:	2300      	movs	r3, #0
 8008f38:	4650      	mov	r0, sl
 8008f3a:	4659      	mov	r1, fp
 8008f3c:	f7f7 fde4 	bl	8000b08 <__aeabi_dcmpeq>
 8008f40:	ec4b ab19 	vmov	d9, sl, fp
 8008f44:	4680      	mov	r8, r0
 8008f46:	b158      	cbz	r0, 8008f60 <_dtoa_r+0xe0>
 8008f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	6013      	str	r3, [r2, #0]
 8008f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f000 856b 	beq.w	8009a2c <_dtoa_r+0xbac>
 8008f56:	4883      	ldr	r0, [pc, #524]	; (8009164 <_dtoa_r+0x2e4>)
 8008f58:	6018      	str	r0, [r3, #0]
 8008f5a:	1e43      	subs	r3, r0, #1
 8008f5c:	9301      	str	r3, [sp, #4]
 8008f5e:	e7df      	b.n	8008f20 <_dtoa_r+0xa0>
 8008f60:	ec4b ab10 	vmov	d0, sl, fp
 8008f64:	aa10      	add	r2, sp, #64	; 0x40
 8008f66:	a911      	add	r1, sp, #68	; 0x44
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f001 f8b9 	bl	800a0e0 <__d2b>
 8008f6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008f72:	ee08 0a10 	vmov	s16, r0
 8008f76:	2d00      	cmp	r5, #0
 8008f78:	f000 8084 	beq.w	8009084 <_dtoa_r+0x204>
 8008f7c:	ee19 3a90 	vmov	r3, s19
 8008f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008f88:	4656      	mov	r6, sl
 8008f8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008f8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008f96:	4b74      	ldr	r3, [pc, #464]	; (8009168 <_dtoa_r+0x2e8>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	4639      	mov	r1, r7
 8008f9e:	f7f7 f993 	bl	80002c8 <__aeabi_dsub>
 8008fa2:	a365      	add	r3, pc, #404	; (adr r3, 8009138 <_dtoa_r+0x2b8>)
 8008fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa8:	f7f7 fb46 	bl	8000638 <__aeabi_dmul>
 8008fac:	a364      	add	r3, pc, #400	; (adr r3, 8009140 <_dtoa_r+0x2c0>)
 8008fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb2:	f7f7 f98b 	bl	80002cc <__adddf3>
 8008fb6:	4606      	mov	r6, r0
 8008fb8:	4628      	mov	r0, r5
 8008fba:	460f      	mov	r7, r1
 8008fbc:	f7f7 fad2 	bl	8000564 <__aeabi_i2d>
 8008fc0:	a361      	add	r3, pc, #388	; (adr r3, 8009148 <_dtoa_r+0x2c8>)
 8008fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc6:	f7f7 fb37 	bl	8000638 <__aeabi_dmul>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	4630      	mov	r0, r6
 8008fd0:	4639      	mov	r1, r7
 8008fd2:	f7f7 f97b 	bl	80002cc <__adddf3>
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	460f      	mov	r7, r1
 8008fda:	f7f7 fddd 	bl	8000b98 <__aeabi_d2iz>
 8008fde:	2200      	movs	r2, #0
 8008fe0:	9000      	str	r0, [sp, #0]
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	4639      	mov	r1, r7
 8008fe8:	f7f7 fd98 	bl	8000b1c <__aeabi_dcmplt>
 8008fec:	b150      	cbz	r0, 8009004 <_dtoa_r+0x184>
 8008fee:	9800      	ldr	r0, [sp, #0]
 8008ff0:	f7f7 fab8 	bl	8000564 <__aeabi_i2d>
 8008ff4:	4632      	mov	r2, r6
 8008ff6:	463b      	mov	r3, r7
 8008ff8:	f7f7 fd86 	bl	8000b08 <__aeabi_dcmpeq>
 8008ffc:	b910      	cbnz	r0, 8009004 <_dtoa_r+0x184>
 8008ffe:	9b00      	ldr	r3, [sp, #0]
 8009000:	3b01      	subs	r3, #1
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	9b00      	ldr	r3, [sp, #0]
 8009006:	2b16      	cmp	r3, #22
 8009008:	d85a      	bhi.n	80090c0 <_dtoa_r+0x240>
 800900a:	9a00      	ldr	r2, [sp, #0]
 800900c:	4b57      	ldr	r3, [pc, #348]	; (800916c <_dtoa_r+0x2ec>)
 800900e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	ec51 0b19 	vmov	r0, r1, d9
 800901a:	f7f7 fd7f 	bl	8000b1c <__aeabi_dcmplt>
 800901e:	2800      	cmp	r0, #0
 8009020:	d050      	beq.n	80090c4 <_dtoa_r+0x244>
 8009022:	9b00      	ldr	r3, [sp, #0]
 8009024:	3b01      	subs	r3, #1
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	2300      	movs	r3, #0
 800902a:	930b      	str	r3, [sp, #44]	; 0x2c
 800902c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800902e:	1b5d      	subs	r5, r3, r5
 8009030:	1e6b      	subs	r3, r5, #1
 8009032:	9305      	str	r3, [sp, #20]
 8009034:	bf45      	ittet	mi
 8009036:	f1c5 0301 	rsbmi	r3, r5, #1
 800903a:	9304      	strmi	r3, [sp, #16]
 800903c:	2300      	movpl	r3, #0
 800903e:	2300      	movmi	r3, #0
 8009040:	bf4c      	ite	mi
 8009042:	9305      	strmi	r3, [sp, #20]
 8009044:	9304      	strpl	r3, [sp, #16]
 8009046:	9b00      	ldr	r3, [sp, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	db3d      	blt.n	80090c8 <_dtoa_r+0x248>
 800904c:	9b05      	ldr	r3, [sp, #20]
 800904e:	9a00      	ldr	r2, [sp, #0]
 8009050:	920a      	str	r2, [sp, #40]	; 0x28
 8009052:	4413      	add	r3, r2
 8009054:	9305      	str	r3, [sp, #20]
 8009056:	2300      	movs	r3, #0
 8009058:	9307      	str	r3, [sp, #28]
 800905a:	9b06      	ldr	r3, [sp, #24]
 800905c:	2b09      	cmp	r3, #9
 800905e:	f200 8089 	bhi.w	8009174 <_dtoa_r+0x2f4>
 8009062:	2b05      	cmp	r3, #5
 8009064:	bfc4      	itt	gt
 8009066:	3b04      	subgt	r3, #4
 8009068:	9306      	strgt	r3, [sp, #24]
 800906a:	9b06      	ldr	r3, [sp, #24]
 800906c:	f1a3 0302 	sub.w	r3, r3, #2
 8009070:	bfcc      	ite	gt
 8009072:	2500      	movgt	r5, #0
 8009074:	2501      	movle	r5, #1
 8009076:	2b03      	cmp	r3, #3
 8009078:	f200 8087 	bhi.w	800918a <_dtoa_r+0x30a>
 800907c:	e8df f003 	tbb	[pc, r3]
 8009080:	59383a2d 	.word	0x59383a2d
 8009084:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009088:	441d      	add	r5, r3
 800908a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800908e:	2b20      	cmp	r3, #32
 8009090:	bfc1      	itttt	gt
 8009092:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009096:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800909a:	fa0b f303 	lslgt.w	r3, fp, r3
 800909e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80090a2:	bfda      	itte	le
 80090a4:	f1c3 0320 	rsble	r3, r3, #32
 80090a8:	fa06 f003 	lslle.w	r0, r6, r3
 80090ac:	4318      	orrgt	r0, r3
 80090ae:	f7f7 fa49 	bl	8000544 <__aeabi_ui2d>
 80090b2:	2301      	movs	r3, #1
 80090b4:	4606      	mov	r6, r0
 80090b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80090ba:	3d01      	subs	r5, #1
 80090bc:	930e      	str	r3, [sp, #56]	; 0x38
 80090be:	e76a      	b.n	8008f96 <_dtoa_r+0x116>
 80090c0:	2301      	movs	r3, #1
 80090c2:	e7b2      	b.n	800902a <_dtoa_r+0x1aa>
 80090c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80090c6:	e7b1      	b.n	800902c <_dtoa_r+0x1ac>
 80090c8:	9b04      	ldr	r3, [sp, #16]
 80090ca:	9a00      	ldr	r2, [sp, #0]
 80090cc:	1a9b      	subs	r3, r3, r2
 80090ce:	9304      	str	r3, [sp, #16]
 80090d0:	4253      	negs	r3, r2
 80090d2:	9307      	str	r3, [sp, #28]
 80090d4:	2300      	movs	r3, #0
 80090d6:	930a      	str	r3, [sp, #40]	; 0x28
 80090d8:	e7bf      	b.n	800905a <_dtoa_r+0x1da>
 80090da:	2300      	movs	r3, #0
 80090dc:	9308      	str	r3, [sp, #32]
 80090de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	dc55      	bgt.n	8009190 <_dtoa_r+0x310>
 80090e4:	2301      	movs	r3, #1
 80090e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090ea:	461a      	mov	r2, r3
 80090ec:	9209      	str	r2, [sp, #36]	; 0x24
 80090ee:	e00c      	b.n	800910a <_dtoa_r+0x28a>
 80090f0:	2301      	movs	r3, #1
 80090f2:	e7f3      	b.n	80090dc <_dtoa_r+0x25c>
 80090f4:	2300      	movs	r3, #0
 80090f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090f8:	9308      	str	r3, [sp, #32]
 80090fa:	9b00      	ldr	r3, [sp, #0]
 80090fc:	4413      	add	r3, r2
 80090fe:	9302      	str	r3, [sp, #8]
 8009100:	3301      	adds	r3, #1
 8009102:	2b01      	cmp	r3, #1
 8009104:	9303      	str	r3, [sp, #12]
 8009106:	bfb8      	it	lt
 8009108:	2301      	movlt	r3, #1
 800910a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800910c:	2200      	movs	r2, #0
 800910e:	6042      	str	r2, [r0, #4]
 8009110:	2204      	movs	r2, #4
 8009112:	f102 0614 	add.w	r6, r2, #20
 8009116:	429e      	cmp	r6, r3
 8009118:	6841      	ldr	r1, [r0, #4]
 800911a:	d93d      	bls.n	8009198 <_dtoa_r+0x318>
 800911c:	4620      	mov	r0, r4
 800911e:	f000 fcb7 	bl	8009a90 <_Balloc>
 8009122:	9001      	str	r0, [sp, #4]
 8009124:	2800      	cmp	r0, #0
 8009126:	d13b      	bne.n	80091a0 <_dtoa_r+0x320>
 8009128:	4b11      	ldr	r3, [pc, #68]	; (8009170 <_dtoa_r+0x2f0>)
 800912a:	4602      	mov	r2, r0
 800912c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009130:	e6c0      	b.n	8008eb4 <_dtoa_r+0x34>
 8009132:	2301      	movs	r3, #1
 8009134:	e7df      	b.n	80090f6 <_dtoa_r+0x276>
 8009136:	bf00      	nop
 8009138:	636f4361 	.word	0x636f4361
 800913c:	3fd287a7 	.word	0x3fd287a7
 8009140:	8b60c8b3 	.word	0x8b60c8b3
 8009144:	3fc68a28 	.word	0x3fc68a28
 8009148:	509f79fb 	.word	0x509f79fb
 800914c:	3fd34413 	.word	0x3fd34413
 8009150:	0800b3ce 	.word	0x0800b3ce
 8009154:	0800b3e5 	.word	0x0800b3e5
 8009158:	7ff00000 	.word	0x7ff00000
 800915c:	0800b3ca 	.word	0x0800b3ca
 8009160:	0800b3c1 	.word	0x0800b3c1
 8009164:	0800b29d 	.word	0x0800b29d
 8009168:	3ff80000 	.word	0x3ff80000
 800916c:	0800b4d8 	.word	0x0800b4d8
 8009170:	0800b440 	.word	0x0800b440
 8009174:	2501      	movs	r5, #1
 8009176:	2300      	movs	r3, #0
 8009178:	9306      	str	r3, [sp, #24]
 800917a:	9508      	str	r5, [sp, #32]
 800917c:	f04f 33ff 	mov.w	r3, #4294967295
 8009180:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009184:	2200      	movs	r2, #0
 8009186:	2312      	movs	r3, #18
 8009188:	e7b0      	b.n	80090ec <_dtoa_r+0x26c>
 800918a:	2301      	movs	r3, #1
 800918c:	9308      	str	r3, [sp, #32]
 800918e:	e7f5      	b.n	800917c <_dtoa_r+0x2fc>
 8009190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009192:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009196:	e7b8      	b.n	800910a <_dtoa_r+0x28a>
 8009198:	3101      	adds	r1, #1
 800919a:	6041      	str	r1, [r0, #4]
 800919c:	0052      	lsls	r2, r2, #1
 800919e:	e7b8      	b.n	8009112 <_dtoa_r+0x292>
 80091a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091a2:	9a01      	ldr	r2, [sp, #4]
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	9b03      	ldr	r3, [sp, #12]
 80091a8:	2b0e      	cmp	r3, #14
 80091aa:	f200 809d 	bhi.w	80092e8 <_dtoa_r+0x468>
 80091ae:	2d00      	cmp	r5, #0
 80091b0:	f000 809a 	beq.w	80092e8 <_dtoa_r+0x468>
 80091b4:	9b00      	ldr	r3, [sp, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	dd32      	ble.n	8009220 <_dtoa_r+0x3a0>
 80091ba:	4ab7      	ldr	r2, [pc, #732]	; (8009498 <_dtoa_r+0x618>)
 80091bc:	f003 030f 	and.w	r3, r3, #15
 80091c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80091c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091c8:	9b00      	ldr	r3, [sp, #0]
 80091ca:	05d8      	lsls	r0, r3, #23
 80091cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80091d0:	d516      	bpl.n	8009200 <_dtoa_r+0x380>
 80091d2:	4bb2      	ldr	r3, [pc, #712]	; (800949c <_dtoa_r+0x61c>)
 80091d4:	ec51 0b19 	vmov	r0, r1, d9
 80091d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091dc:	f7f7 fb56 	bl	800088c <__aeabi_ddiv>
 80091e0:	f007 070f 	and.w	r7, r7, #15
 80091e4:	4682      	mov	sl, r0
 80091e6:	468b      	mov	fp, r1
 80091e8:	2503      	movs	r5, #3
 80091ea:	4eac      	ldr	r6, [pc, #688]	; (800949c <_dtoa_r+0x61c>)
 80091ec:	b957      	cbnz	r7, 8009204 <_dtoa_r+0x384>
 80091ee:	4642      	mov	r2, r8
 80091f0:	464b      	mov	r3, r9
 80091f2:	4650      	mov	r0, sl
 80091f4:	4659      	mov	r1, fp
 80091f6:	f7f7 fb49 	bl	800088c <__aeabi_ddiv>
 80091fa:	4682      	mov	sl, r0
 80091fc:	468b      	mov	fp, r1
 80091fe:	e028      	b.n	8009252 <_dtoa_r+0x3d2>
 8009200:	2502      	movs	r5, #2
 8009202:	e7f2      	b.n	80091ea <_dtoa_r+0x36a>
 8009204:	07f9      	lsls	r1, r7, #31
 8009206:	d508      	bpl.n	800921a <_dtoa_r+0x39a>
 8009208:	4640      	mov	r0, r8
 800920a:	4649      	mov	r1, r9
 800920c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009210:	f7f7 fa12 	bl	8000638 <__aeabi_dmul>
 8009214:	3501      	adds	r5, #1
 8009216:	4680      	mov	r8, r0
 8009218:	4689      	mov	r9, r1
 800921a:	107f      	asrs	r7, r7, #1
 800921c:	3608      	adds	r6, #8
 800921e:	e7e5      	b.n	80091ec <_dtoa_r+0x36c>
 8009220:	f000 809b 	beq.w	800935a <_dtoa_r+0x4da>
 8009224:	9b00      	ldr	r3, [sp, #0]
 8009226:	4f9d      	ldr	r7, [pc, #628]	; (800949c <_dtoa_r+0x61c>)
 8009228:	425e      	negs	r6, r3
 800922a:	4b9b      	ldr	r3, [pc, #620]	; (8009498 <_dtoa_r+0x618>)
 800922c:	f006 020f 	and.w	r2, r6, #15
 8009230:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009238:	ec51 0b19 	vmov	r0, r1, d9
 800923c:	f7f7 f9fc 	bl	8000638 <__aeabi_dmul>
 8009240:	1136      	asrs	r6, r6, #4
 8009242:	4682      	mov	sl, r0
 8009244:	468b      	mov	fp, r1
 8009246:	2300      	movs	r3, #0
 8009248:	2502      	movs	r5, #2
 800924a:	2e00      	cmp	r6, #0
 800924c:	d17a      	bne.n	8009344 <_dtoa_r+0x4c4>
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1d3      	bne.n	80091fa <_dtoa_r+0x37a>
 8009252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009254:	2b00      	cmp	r3, #0
 8009256:	f000 8082 	beq.w	800935e <_dtoa_r+0x4de>
 800925a:	4b91      	ldr	r3, [pc, #580]	; (80094a0 <_dtoa_r+0x620>)
 800925c:	2200      	movs	r2, #0
 800925e:	4650      	mov	r0, sl
 8009260:	4659      	mov	r1, fp
 8009262:	f7f7 fc5b 	bl	8000b1c <__aeabi_dcmplt>
 8009266:	2800      	cmp	r0, #0
 8009268:	d079      	beq.n	800935e <_dtoa_r+0x4de>
 800926a:	9b03      	ldr	r3, [sp, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d076      	beq.n	800935e <_dtoa_r+0x4de>
 8009270:	9b02      	ldr	r3, [sp, #8]
 8009272:	2b00      	cmp	r3, #0
 8009274:	dd36      	ble.n	80092e4 <_dtoa_r+0x464>
 8009276:	9b00      	ldr	r3, [sp, #0]
 8009278:	4650      	mov	r0, sl
 800927a:	4659      	mov	r1, fp
 800927c:	1e5f      	subs	r7, r3, #1
 800927e:	2200      	movs	r2, #0
 8009280:	4b88      	ldr	r3, [pc, #544]	; (80094a4 <_dtoa_r+0x624>)
 8009282:	f7f7 f9d9 	bl	8000638 <__aeabi_dmul>
 8009286:	9e02      	ldr	r6, [sp, #8]
 8009288:	4682      	mov	sl, r0
 800928a:	468b      	mov	fp, r1
 800928c:	3501      	adds	r5, #1
 800928e:	4628      	mov	r0, r5
 8009290:	f7f7 f968 	bl	8000564 <__aeabi_i2d>
 8009294:	4652      	mov	r2, sl
 8009296:	465b      	mov	r3, fp
 8009298:	f7f7 f9ce 	bl	8000638 <__aeabi_dmul>
 800929c:	4b82      	ldr	r3, [pc, #520]	; (80094a8 <_dtoa_r+0x628>)
 800929e:	2200      	movs	r2, #0
 80092a0:	f7f7 f814 	bl	80002cc <__adddf3>
 80092a4:	46d0      	mov	r8, sl
 80092a6:	46d9      	mov	r9, fp
 80092a8:	4682      	mov	sl, r0
 80092aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80092ae:	2e00      	cmp	r6, #0
 80092b0:	d158      	bne.n	8009364 <_dtoa_r+0x4e4>
 80092b2:	4b7e      	ldr	r3, [pc, #504]	; (80094ac <_dtoa_r+0x62c>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	4640      	mov	r0, r8
 80092b8:	4649      	mov	r1, r9
 80092ba:	f7f7 f805 	bl	80002c8 <__aeabi_dsub>
 80092be:	4652      	mov	r2, sl
 80092c0:	465b      	mov	r3, fp
 80092c2:	4680      	mov	r8, r0
 80092c4:	4689      	mov	r9, r1
 80092c6:	f7f7 fc47 	bl	8000b58 <__aeabi_dcmpgt>
 80092ca:	2800      	cmp	r0, #0
 80092cc:	f040 8295 	bne.w	80097fa <_dtoa_r+0x97a>
 80092d0:	4652      	mov	r2, sl
 80092d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80092d6:	4640      	mov	r0, r8
 80092d8:	4649      	mov	r1, r9
 80092da:	f7f7 fc1f 	bl	8000b1c <__aeabi_dcmplt>
 80092de:	2800      	cmp	r0, #0
 80092e0:	f040 8289 	bne.w	80097f6 <_dtoa_r+0x976>
 80092e4:	ec5b ab19 	vmov	sl, fp, d9
 80092e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f2c0 8148 	blt.w	8009580 <_dtoa_r+0x700>
 80092f0:	9a00      	ldr	r2, [sp, #0]
 80092f2:	2a0e      	cmp	r2, #14
 80092f4:	f300 8144 	bgt.w	8009580 <_dtoa_r+0x700>
 80092f8:	4b67      	ldr	r3, [pc, #412]	; (8009498 <_dtoa_r+0x618>)
 80092fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009304:	2b00      	cmp	r3, #0
 8009306:	f280 80d5 	bge.w	80094b4 <_dtoa_r+0x634>
 800930a:	9b03      	ldr	r3, [sp, #12]
 800930c:	2b00      	cmp	r3, #0
 800930e:	f300 80d1 	bgt.w	80094b4 <_dtoa_r+0x634>
 8009312:	f040 826f 	bne.w	80097f4 <_dtoa_r+0x974>
 8009316:	4b65      	ldr	r3, [pc, #404]	; (80094ac <_dtoa_r+0x62c>)
 8009318:	2200      	movs	r2, #0
 800931a:	4640      	mov	r0, r8
 800931c:	4649      	mov	r1, r9
 800931e:	f7f7 f98b 	bl	8000638 <__aeabi_dmul>
 8009322:	4652      	mov	r2, sl
 8009324:	465b      	mov	r3, fp
 8009326:	f7f7 fc0d 	bl	8000b44 <__aeabi_dcmpge>
 800932a:	9e03      	ldr	r6, [sp, #12]
 800932c:	4637      	mov	r7, r6
 800932e:	2800      	cmp	r0, #0
 8009330:	f040 8245 	bne.w	80097be <_dtoa_r+0x93e>
 8009334:	9d01      	ldr	r5, [sp, #4]
 8009336:	2331      	movs	r3, #49	; 0x31
 8009338:	f805 3b01 	strb.w	r3, [r5], #1
 800933c:	9b00      	ldr	r3, [sp, #0]
 800933e:	3301      	adds	r3, #1
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	e240      	b.n	80097c6 <_dtoa_r+0x946>
 8009344:	07f2      	lsls	r2, r6, #31
 8009346:	d505      	bpl.n	8009354 <_dtoa_r+0x4d4>
 8009348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800934c:	f7f7 f974 	bl	8000638 <__aeabi_dmul>
 8009350:	3501      	adds	r5, #1
 8009352:	2301      	movs	r3, #1
 8009354:	1076      	asrs	r6, r6, #1
 8009356:	3708      	adds	r7, #8
 8009358:	e777      	b.n	800924a <_dtoa_r+0x3ca>
 800935a:	2502      	movs	r5, #2
 800935c:	e779      	b.n	8009252 <_dtoa_r+0x3d2>
 800935e:	9f00      	ldr	r7, [sp, #0]
 8009360:	9e03      	ldr	r6, [sp, #12]
 8009362:	e794      	b.n	800928e <_dtoa_r+0x40e>
 8009364:	9901      	ldr	r1, [sp, #4]
 8009366:	4b4c      	ldr	r3, [pc, #304]	; (8009498 <_dtoa_r+0x618>)
 8009368:	4431      	add	r1, r6
 800936a:	910d      	str	r1, [sp, #52]	; 0x34
 800936c:	9908      	ldr	r1, [sp, #32]
 800936e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009372:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009376:	2900      	cmp	r1, #0
 8009378:	d043      	beq.n	8009402 <_dtoa_r+0x582>
 800937a:	494d      	ldr	r1, [pc, #308]	; (80094b0 <_dtoa_r+0x630>)
 800937c:	2000      	movs	r0, #0
 800937e:	f7f7 fa85 	bl	800088c <__aeabi_ddiv>
 8009382:	4652      	mov	r2, sl
 8009384:	465b      	mov	r3, fp
 8009386:	f7f6 ff9f 	bl	80002c8 <__aeabi_dsub>
 800938a:	9d01      	ldr	r5, [sp, #4]
 800938c:	4682      	mov	sl, r0
 800938e:	468b      	mov	fp, r1
 8009390:	4649      	mov	r1, r9
 8009392:	4640      	mov	r0, r8
 8009394:	f7f7 fc00 	bl	8000b98 <__aeabi_d2iz>
 8009398:	4606      	mov	r6, r0
 800939a:	f7f7 f8e3 	bl	8000564 <__aeabi_i2d>
 800939e:	4602      	mov	r2, r0
 80093a0:	460b      	mov	r3, r1
 80093a2:	4640      	mov	r0, r8
 80093a4:	4649      	mov	r1, r9
 80093a6:	f7f6 ff8f 	bl	80002c8 <__aeabi_dsub>
 80093aa:	3630      	adds	r6, #48	; 0x30
 80093ac:	f805 6b01 	strb.w	r6, [r5], #1
 80093b0:	4652      	mov	r2, sl
 80093b2:	465b      	mov	r3, fp
 80093b4:	4680      	mov	r8, r0
 80093b6:	4689      	mov	r9, r1
 80093b8:	f7f7 fbb0 	bl	8000b1c <__aeabi_dcmplt>
 80093bc:	2800      	cmp	r0, #0
 80093be:	d163      	bne.n	8009488 <_dtoa_r+0x608>
 80093c0:	4642      	mov	r2, r8
 80093c2:	464b      	mov	r3, r9
 80093c4:	4936      	ldr	r1, [pc, #216]	; (80094a0 <_dtoa_r+0x620>)
 80093c6:	2000      	movs	r0, #0
 80093c8:	f7f6 ff7e 	bl	80002c8 <__aeabi_dsub>
 80093cc:	4652      	mov	r2, sl
 80093ce:	465b      	mov	r3, fp
 80093d0:	f7f7 fba4 	bl	8000b1c <__aeabi_dcmplt>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	f040 80b5 	bne.w	8009544 <_dtoa_r+0x6c4>
 80093da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093dc:	429d      	cmp	r5, r3
 80093de:	d081      	beq.n	80092e4 <_dtoa_r+0x464>
 80093e0:	4b30      	ldr	r3, [pc, #192]	; (80094a4 <_dtoa_r+0x624>)
 80093e2:	2200      	movs	r2, #0
 80093e4:	4650      	mov	r0, sl
 80093e6:	4659      	mov	r1, fp
 80093e8:	f7f7 f926 	bl	8000638 <__aeabi_dmul>
 80093ec:	4b2d      	ldr	r3, [pc, #180]	; (80094a4 <_dtoa_r+0x624>)
 80093ee:	4682      	mov	sl, r0
 80093f0:	468b      	mov	fp, r1
 80093f2:	4640      	mov	r0, r8
 80093f4:	4649      	mov	r1, r9
 80093f6:	2200      	movs	r2, #0
 80093f8:	f7f7 f91e 	bl	8000638 <__aeabi_dmul>
 80093fc:	4680      	mov	r8, r0
 80093fe:	4689      	mov	r9, r1
 8009400:	e7c6      	b.n	8009390 <_dtoa_r+0x510>
 8009402:	4650      	mov	r0, sl
 8009404:	4659      	mov	r1, fp
 8009406:	f7f7 f917 	bl	8000638 <__aeabi_dmul>
 800940a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800940c:	9d01      	ldr	r5, [sp, #4]
 800940e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009410:	4682      	mov	sl, r0
 8009412:	468b      	mov	fp, r1
 8009414:	4649      	mov	r1, r9
 8009416:	4640      	mov	r0, r8
 8009418:	f7f7 fbbe 	bl	8000b98 <__aeabi_d2iz>
 800941c:	4606      	mov	r6, r0
 800941e:	f7f7 f8a1 	bl	8000564 <__aeabi_i2d>
 8009422:	3630      	adds	r6, #48	; 0x30
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	4640      	mov	r0, r8
 800942a:	4649      	mov	r1, r9
 800942c:	f7f6 ff4c 	bl	80002c8 <__aeabi_dsub>
 8009430:	f805 6b01 	strb.w	r6, [r5], #1
 8009434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009436:	429d      	cmp	r5, r3
 8009438:	4680      	mov	r8, r0
 800943a:	4689      	mov	r9, r1
 800943c:	f04f 0200 	mov.w	r2, #0
 8009440:	d124      	bne.n	800948c <_dtoa_r+0x60c>
 8009442:	4b1b      	ldr	r3, [pc, #108]	; (80094b0 <_dtoa_r+0x630>)
 8009444:	4650      	mov	r0, sl
 8009446:	4659      	mov	r1, fp
 8009448:	f7f6 ff40 	bl	80002cc <__adddf3>
 800944c:	4602      	mov	r2, r0
 800944e:	460b      	mov	r3, r1
 8009450:	4640      	mov	r0, r8
 8009452:	4649      	mov	r1, r9
 8009454:	f7f7 fb80 	bl	8000b58 <__aeabi_dcmpgt>
 8009458:	2800      	cmp	r0, #0
 800945a:	d173      	bne.n	8009544 <_dtoa_r+0x6c4>
 800945c:	4652      	mov	r2, sl
 800945e:	465b      	mov	r3, fp
 8009460:	4913      	ldr	r1, [pc, #76]	; (80094b0 <_dtoa_r+0x630>)
 8009462:	2000      	movs	r0, #0
 8009464:	f7f6 ff30 	bl	80002c8 <__aeabi_dsub>
 8009468:	4602      	mov	r2, r0
 800946a:	460b      	mov	r3, r1
 800946c:	4640      	mov	r0, r8
 800946e:	4649      	mov	r1, r9
 8009470:	f7f7 fb54 	bl	8000b1c <__aeabi_dcmplt>
 8009474:	2800      	cmp	r0, #0
 8009476:	f43f af35 	beq.w	80092e4 <_dtoa_r+0x464>
 800947a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800947c:	1e6b      	subs	r3, r5, #1
 800947e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009480:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009484:	2b30      	cmp	r3, #48	; 0x30
 8009486:	d0f8      	beq.n	800947a <_dtoa_r+0x5fa>
 8009488:	9700      	str	r7, [sp, #0]
 800948a:	e049      	b.n	8009520 <_dtoa_r+0x6a0>
 800948c:	4b05      	ldr	r3, [pc, #20]	; (80094a4 <_dtoa_r+0x624>)
 800948e:	f7f7 f8d3 	bl	8000638 <__aeabi_dmul>
 8009492:	4680      	mov	r8, r0
 8009494:	4689      	mov	r9, r1
 8009496:	e7bd      	b.n	8009414 <_dtoa_r+0x594>
 8009498:	0800b4d8 	.word	0x0800b4d8
 800949c:	0800b4b0 	.word	0x0800b4b0
 80094a0:	3ff00000 	.word	0x3ff00000
 80094a4:	40240000 	.word	0x40240000
 80094a8:	401c0000 	.word	0x401c0000
 80094ac:	40140000 	.word	0x40140000
 80094b0:	3fe00000 	.word	0x3fe00000
 80094b4:	9d01      	ldr	r5, [sp, #4]
 80094b6:	4656      	mov	r6, sl
 80094b8:	465f      	mov	r7, fp
 80094ba:	4642      	mov	r2, r8
 80094bc:	464b      	mov	r3, r9
 80094be:	4630      	mov	r0, r6
 80094c0:	4639      	mov	r1, r7
 80094c2:	f7f7 f9e3 	bl	800088c <__aeabi_ddiv>
 80094c6:	f7f7 fb67 	bl	8000b98 <__aeabi_d2iz>
 80094ca:	4682      	mov	sl, r0
 80094cc:	f7f7 f84a 	bl	8000564 <__aeabi_i2d>
 80094d0:	4642      	mov	r2, r8
 80094d2:	464b      	mov	r3, r9
 80094d4:	f7f7 f8b0 	bl	8000638 <__aeabi_dmul>
 80094d8:	4602      	mov	r2, r0
 80094da:	460b      	mov	r3, r1
 80094dc:	4630      	mov	r0, r6
 80094de:	4639      	mov	r1, r7
 80094e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80094e4:	f7f6 fef0 	bl	80002c8 <__aeabi_dsub>
 80094e8:	f805 6b01 	strb.w	r6, [r5], #1
 80094ec:	9e01      	ldr	r6, [sp, #4]
 80094ee:	9f03      	ldr	r7, [sp, #12]
 80094f0:	1bae      	subs	r6, r5, r6
 80094f2:	42b7      	cmp	r7, r6
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	d135      	bne.n	8009566 <_dtoa_r+0x6e6>
 80094fa:	f7f6 fee7 	bl	80002cc <__adddf3>
 80094fe:	4642      	mov	r2, r8
 8009500:	464b      	mov	r3, r9
 8009502:	4606      	mov	r6, r0
 8009504:	460f      	mov	r7, r1
 8009506:	f7f7 fb27 	bl	8000b58 <__aeabi_dcmpgt>
 800950a:	b9d0      	cbnz	r0, 8009542 <_dtoa_r+0x6c2>
 800950c:	4642      	mov	r2, r8
 800950e:	464b      	mov	r3, r9
 8009510:	4630      	mov	r0, r6
 8009512:	4639      	mov	r1, r7
 8009514:	f7f7 faf8 	bl	8000b08 <__aeabi_dcmpeq>
 8009518:	b110      	cbz	r0, 8009520 <_dtoa_r+0x6a0>
 800951a:	f01a 0f01 	tst.w	sl, #1
 800951e:	d110      	bne.n	8009542 <_dtoa_r+0x6c2>
 8009520:	4620      	mov	r0, r4
 8009522:	ee18 1a10 	vmov	r1, s16
 8009526:	f000 faf3 	bl	8009b10 <_Bfree>
 800952a:	2300      	movs	r3, #0
 800952c:	9800      	ldr	r0, [sp, #0]
 800952e:	702b      	strb	r3, [r5, #0]
 8009530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009532:	3001      	adds	r0, #1
 8009534:	6018      	str	r0, [r3, #0]
 8009536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009538:	2b00      	cmp	r3, #0
 800953a:	f43f acf1 	beq.w	8008f20 <_dtoa_r+0xa0>
 800953e:	601d      	str	r5, [r3, #0]
 8009540:	e4ee      	b.n	8008f20 <_dtoa_r+0xa0>
 8009542:	9f00      	ldr	r7, [sp, #0]
 8009544:	462b      	mov	r3, r5
 8009546:	461d      	mov	r5, r3
 8009548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800954c:	2a39      	cmp	r2, #57	; 0x39
 800954e:	d106      	bne.n	800955e <_dtoa_r+0x6de>
 8009550:	9a01      	ldr	r2, [sp, #4]
 8009552:	429a      	cmp	r2, r3
 8009554:	d1f7      	bne.n	8009546 <_dtoa_r+0x6c6>
 8009556:	9901      	ldr	r1, [sp, #4]
 8009558:	2230      	movs	r2, #48	; 0x30
 800955a:	3701      	adds	r7, #1
 800955c:	700a      	strb	r2, [r1, #0]
 800955e:	781a      	ldrb	r2, [r3, #0]
 8009560:	3201      	adds	r2, #1
 8009562:	701a      	strb	r2, [r3, #0]
 8009564:	e790      	b.n	8009488 <_dtoa_r+0x608>
 8009566:	4ba6      	ldr	r3, [pc, #664]	; (8009800 <_dtoa_r+0x980>)
 8009568:	2200      	movs	r2, #0
 800956a:	f7f7 f865 	bl	8000638 <__aeabi_dmul>
 800956e:	2200      	movs	r2, #0
 8009570:	2300      	movs	r3, #0
 8009572:	4606      	mov	r6, r0
 8009574:	460f      	mov	r7, r1
 8009576:	f7f7 fac7 	bl	8000b08 <__aeabi_dcmpeq>
 800957a:	2800      	cmp	r0, #0
 800957c:	d09d      	beq.n	80094ba <_dtoa_r+0x63a>
 800957e:	e7cf      	b.n	8009520 <_dtoa_r+0x6a0>
 8009580:	9a08      	ldr	r2, [sp, #32]
 8009582:	2a00      	cmp	r2, #0
 8009584:	f000 80d7 	beq.w	8009736 <_dtoa_r+0x8b6>
 8009588:	9a06      	ldr	r2, [sp, #24]
 800958a:	2a01      	cmp	r2, #1
 800958c:	f300 80ba 	bgt.w	8009704 <_dtoa_r+0x884>
 8009590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009592:	2a00      	cmp	r2, #0
 8009594:	f000 80b2 	beq.w	80096fc <_dtoa_r+0x87c>
 8009598:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800959c:	9e07      	ldr	r6, [sp, #28]
 800959e:	9d04      	ldr	r5, [sp, #16]
 80095a0:	9a04      	ldr	r2, [sp, #16]
 80095a2:	441a      	add	r2, r3
 80095a4:	9204      	str	r2, [sp, #16]
 80095a6:	9a05      	ldr	r2, [sp, #20]
 80095a8:	2101      	movs	r1, #1
 80095aa:	441a      	add	r2, r3
 80095ac:	4620      	mov	r0, r4
 80095ae:	9205      	str	r2, [sp, #20]
 80095b0:	f000 fb66 	bl	8009c80 <__i2b>
 80095b4:	4607      	mov	r7, r0
 80095b6:	2d00      	cmp	r5, #0
 80095b8:	dd0c      	ble.n	80095d4 <_dtoa_r+0x754>
 80095ba:	9b05      	ldr	r3, [sp, #20]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	dd09      	ble.n	80095d4 <_dtoa_r+0x754>
 80095c0:	42ab      	cmp	r3, r5
 80095c2:	9a04      	ldr	r2, [sp, #16]
 80095c4:	bfa8      	it	ge
 80095c6:	462b      	movge	r3, r5
 80095c8:	1ad2      	subs	r2, r2, r3
 80095ca:	9204      	str	r2, [sp, #16]
 80095cc:	9a05      	ldr	r2, [sp, #20]
 80095ce:	1aed      	subs	r5, r5, r3
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	9305      	str	r3, [sp, #20]
 80095d4:	9b07      	ldr	r3, [sp, #28]
 80095d6:	b31b      	cbz	r3, 8009620 <_dtoa_r+0x7a0>
 80095d8:	9b08      	ldr	r3, [sp, #32]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f000 80af 	beq.w	800973e <_dtoa_r+0x8be>
 80095e0:	2e00      	cmp	r6, #0
 80095e2:	dd13      	ble.n	800960c <_dtoa_r+0x78c>
 80095e4:	4639      	mov	r1, r7
 80095e6:	4632      	mov	r2, r6
 80095e8:	4620      	mov	r0, r4
 80095ea:	f000 fc09 	bl	8009e00 <__pow5mult>
 80095ee:	ee18 2a10 	vmov	r2, s16
 80095f2:	4601      	mov	r1, r0
 80095f4:	4607      	mov	r7, r0
 80095f6:	4620      	mov	r0, r4
 80095f8:	f000 fb58 	bl	8009cac <__multiply>
 80095fc:	ee18 1a10 	vmov	r1, s16
 8009600:	4680      	mov	r8, r0
 8009602:	4620      	mov	r0, r4
 8009604:	f000 fa84 	bl	8009b10 <_Bfree>
 8009608:	ee08 8a10 	vmov	s16, r8
 800960c:	9b07      	ldr	r3, [sp, #28]
 800960e:	1b9a      	subs	r2, r3, r6
 8009610:	d006      	beq.n	8009620 <_dtoa_r+0x7a0>
 8009612:	ee18 1a10 	vmov	r1, s16
 8009616:	4620      	mov	r0, r4
 8009618:	f000 fbf2 	bl	8009e00 <__pow5mult>
 800961c:	ee08 0a10 	vmov	s16, r0
 8009620:	2101      	movs	r1, #1
 8009622:	4620      	mov	r0, r4
 8009624:	f000 fb2c 	bl	8009c80 <__i2b>
 8009628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800962a:	2b00      	cmp	r3, #0
 800962c:	4606      	mov	r6, r0
 800962e:	f340 8088 	ble.w	8009742 <_dtoa_r+0x8c2>
 8009632:	461a      	mov	r2, r3
 8009634:	4601      	mov	r1, r0
 8009636:	4620      	mov	r0, r4
 8009638:	f000 fbe2 	bl	8009e00 <__pow5mult>
 800963c:	9b06      	ldr	r3, [sp, #24]
 800963e:	2b01      	cmp	r3, #1
 8009640:	4606      	mov	r6, r0
 8009642:	f340 8081 	ble.w	8009748 <_dtoa_r+0x8c8>
 8009646:	f04f 0800 	mov.w	r8, #0
 800964a:	6933      	ldr	r3, [r6, #16]
 800964c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009650:	6918      	ldr	r0, [r3, #16]
 8009652:	f000 fac5 	bl	8009be0 <__hi0bits>
 8009656:	f1c0 0020 	rsb	r0, r0, #32
 800965a:	9b05      	ldr	r3, [sp, #20]
 800965c:	4418      	add	r0, r3
 800965e:	f010 001f 	ands.w	r0, r0, #31
 8009662:	f000 8092 	beq.w	800978a <_dtoa_r+0x90a>
 8009666:	f1c0 0320 	rsb	r3, r0, #32
 800966a:	2b04      	cmp	r3, #4
 800966c:	f340 808a 	ble.w	8009784 <_dtoa_r+0x904>
 8009670:	f1c0 001c 	rsb	r0, r0, #28
 8009674:	9b04      	ldr	r3, [sp, #16]
 8009676:	4403      	add	r3, r0
 8009678:	9304      	str	r3, [sp, #16]
 800967a:	9b05      	ldr	r3, [sp, #20]
 800967c:	4403      	add	r3, r0
 800967e:	4405      	add	r5, r0
 8009680:	9305      	str	r3, [sp, #20]
 8009682:	9b04      	ldr	r3, [sp, #16]
 8009684:	2b00      	cmp	r3, #0
 8009686:	dd07      	ble.n	8009698 <_dtoa_r+0x818>
 8009688:	ee18 1a10 	vmov	r1, s16
 800968c:	461a      	mov	r2, r3
 800968e:	4620      	mov	r0, r4
 8009690:	f000 fc10 	bl	8009eb4 <__lshift>
 8009694:	ee08 0a10 	vmov	s16, r0
 8009698:	9b05      	ldr	r3, [sp, #20]
 800969a:	2b00      	cmp	r3, #0
 800969c:	dd05      	ble.n	80096aa <_dtoa_r+0x82a>
 800969e:	4631      	mov	r1, r6
 80096a0:	461a      	mov	r2, r3
 80096a2:	4620      	mov	r0, r4
 80096a4:	f000 fc06 	bl	8009eb4 <__lshift>
 80096a8:	4606      	mov	r6, r0
 80096aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d06e      	beq.n	800978e <_dtoa_r+0x90e>
 80096b0:	ee18 0a10 	vmov	r0, s16
 80096b4:	4631      	mov	r1, r6
 80096b6:	f000 fc6d 	bl	8009f94 <__mcmp>
 80096ba:	2800      	cmp	r0, #0
 80096bc:	da67      	bge.n	800978e <_dtoa_r+0x90e>
 80096be:	9b00      	ldr	r3, [sp, #0]
 80096c0:	3b01      	subs	r3, #1
 80096c2:	ee18 1a10 	vmov	r1, s16
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	220a      	movs	r2, #10
 80096ca:	2300      	movs	r3, #0
 80096cc:	4620      	mov	r0, r4
 80096ce:	f000 fa41 	bl	8009b54 <__multadd>
 80096d2:	9b08      	ldr	r3, [sp, #32]
 80096d4:	ee08 0a10 	vmov	s16, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f000 81b1 	beq.w	8009a40 <_dtoa_r+0xbc0>
 80096de:	2300      	movs	r3, #0
 80096e0:	4639      	mov	r1, r7
 80096e2:	220a      	movs	r2, #10
 80096e4:	4620      	mov	r0, r4
 80096e6:	f000 fa35 	bl	8009b54 <__multadd>
 80096ea:	9b02      	ldr	r3, [sp, #8]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	4607      	mov	r7, r0
 80096f0:	f300 808e 	bgt.w	8009810 <_dtoa_r+0x990>
 80096f4:	9b06      	ldr	r3, [sp, #24]
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	dc51      	bgt.n	800979e <_dtoa_r+0x91e>
 80096fa:	e089      	b.n	8009810 <_dtoa_r+0x990>
 80096fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009702:	e74b      	b.n	800959c <_dtoa_r+0x71c>
 8009704:	9b03      	ldr	r3, [sp, #12]
 8009706:	1e5e      	subs	r6, r3, #1
 8009708:	9b07      	ldr	r3, [sp, #28]
 800970a:	42b3      	cmp	r3, r6
 800970c:	bfbf      	itttt	lt
 800970e:	9b07      	ldrlt	r3, [sp, #28]
 8009710:	9607      	strlt	r6, [sp, #28]
 8009712:	1af2      	sublt	r2, r6, r3
 8009714:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009716:	bfb6      	itet	lt
 8009718:	189b      	addlt	r3, r3, r2
 800971a:	1b9e      	subge	r6, r3, r6
 800971c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800971e:	9b03      	ldr	r3, [sp, #12]
 8009720:	bfb8      	it	lt
 8009722:	2600      	movlt	r6, #0
 8009724:	2b00      	cmp	r3, #0
 8009726:	bfb7      	itett	lt
 8009728:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800972c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009730:	1a9d      	sublt	r5, r3, r2
 8009732:	2300      	movlt	r3, #0
 8009734:	e734      	b.n	80095a0 <_dtoa_r+0x720>
 8009736:	9e07      	ldr	r6, [sp, #28]
 8009738:	9d04      	ldr	r5, [sp, #16]
 800973a:	9f08      	ldr	r7, [sp, #32]
 800973c:	e73b      	b.n	80095b6 <_dtoa_r+0x736>
 800973e:	9a07      	ldr	r2, [sp, #28]
 8009740:	e767      	b.n	8009612 <_dtoa_r+0x792>
 8009742:	9b06      	ldr	r3, [sp, #24]
 8009744:	2b01      	cmp	r3, #1
 8009746:	dc18      	bgt.n	800977a <_dtoa_r+0x8fa>
 8009748:	f1ba 0f00 	cmp.w	sl, #0
 800974c:	d115      	bne.n	800977a <_dtoa_r+0x8fa>
 800974e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009752:	b993      	cbnz	r3, 800977a <_dtoa_r+0x8fa>
 8009754:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009758:	0d1b      	lsrs	r3, r3, #20
 800975a:	051b      	lsls	r3, r3, #20
 800975c:	b183      	cbz	r3, 8009780 <_dtoa_r+0x900>
 800975e:	9b04      	ldr	r3, [sp, #16]
 8009760:	3301      	adds	r3, #1
 8009762:	9304      	str	r3, [sp, #16]
 8009764:	9b05      	ldr	r3, [sp, #20]
 8009766:	3301      	adds	r3, #1
 8009768:	9305      	str	r3, [sp, #20]
 800976a:	f04f 0801 	mov.w	r8, #1
 800976e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009770:	2b00      	cmp	r3, #0
 8009772:	f47f af6a 	bne.w	800964a <_dtoa_r+0x7ca>
 8009776:	2001      	movs	r0, #1
 8009778:	e76f      	b.n	800965a <_dtoa_r+0x7da>
 800977a:	f04f 0800 	mov.w	r8, #0
 800977e:	e7f6      	b.n	800976e <_dtoa_r+0x8ee>
 8009780:	4698      	mov	r8, r3
 8009782:	e7f4      	b.n	800976e <_dtoa_r+0x8ee>
 8009784:	f43f af7d 	beq.w	8009682 <_dtoa_r+0x802>
 8009788:	4618      	mov	r0, r3
 800978a:	301c      	adds	r0, #28
 800978c:	e772      	b.n	8009674 <_dtoa_r+0x7f4>
 800978e:	9b03      	ldr	r3, [sp, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	dc37      	bgt.n	8009804 <_dtoa_r+0x984>
 8009794:	9b06      	ldr	r3, [sp, #24]
 8009796:	2b02      	cmp	r3, #2
 8009798:	dd34      	ble.n	8009804 <_dtoa_r+0x984>
 800979a:	9b03      	ldr	r3, [sp, #12]
 800979c:	9302      	str	r3, [sp, #8]
 800979e:	9b02      	ldr	r3, [sp, #8]
 80097a0:	b96b      	cbnz	r3, 80097be <_dtoa_r+0x93e>
 80097a2:	4631      	mov	r1, r6
 80097a4:	2205      	movs	r2, #5
 80097a6:	4620      	mov	r0, r4
 80097a8:	f000 f9d4 	bl	8009b54 <__multadd>
 80097ac:	4601      	mov	r1, r0
 80097ae:	4606      	mov	r6, r0
 80097b0:	ee18 0a10 	vmov	r0, s16
 80097b4:	f000 fbee 	bl	8009f94 <__mcmp>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	f73f adbb 	bgt.w	8009334 <_dtoa_r+0x4b4>
 80097be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097c0:	9d01      	ldr	r5, [sp, #4]
 80097c2:	43db      	mvns	r3, r3
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	f04f 0800 	mov.w	r8, #0
 80097ca:	4631      	mov	r1, r6
 80097cc:	4620      	mov	r0, r4
 80097ce:	f000 f99f 	bl	8009b10 <_Bfree>
 80097d2:	2f00      	cmp	r7, #0
 80097d4:	f43f aea4 	beq.w	8009520 <_dtoa_r+0x6a0>
 80097d8:	f1b8 0f00 	cmp.w	r8, #0
 80097dc:	d005      	beq.n	80097ea <_dtoa_r+0x96a>
 80097de:	45b8      	cmp	r8, r7
 80097e0:	d003      	beq.n	80097ea <_dtoa_r+0x96a>
 80097e2:	4641      	mov	r1, r8
 80097e4:	4620      	mov	r0, r4
 80097e6:	f000 f993 	bl	8009b10 <_Bfree>
 80097ea:	4639      	mov	r1, r7
 80097ec:	4620      	mov	r0, r4
 80097ee:	f000 f98f 	bl	8009b10 <_Bfree>
 80097f2:	e695      	b.n	8009520 <_dtoa_r+0x6a0>
 80097f4:	2600      	movs	r6, #0
 80097f6:	4637      	mov	r7, r6
 80097f8:	e7e1      	b.n	80097be <_dtoa_r+0x93e>
 80097fa:	9700      	str	r7, [sp, #0]
 80097fc:	4637      	mov	r7, r6
 80097fe:	e599      	b.n	8009334 <_dtoa_r+0x4b4>
 8009800:	40240000 	.word	0x40240000
 8009804:	9b08      	ldr	r3, [sp, #32]
 8009806:	2b00      	cmp	r3, #0
 8009808:	f000 80ca 	beq.w	80099a0 <_dtoa_r+0xb20>
 800980c:	9b03      	ldr	r3, [sp, #12]
 800980e:	9302      	str	r3, [sp, #8]
 8009810:	2d00      	cmp	r5, #0
 8009812:	dd05      	ble.n	8009820 <_dtoa_r+0x9a0>
 8009814:	4639      	mov	r1, r7
 8009816:	462a      	mov	r2, r5
 8009818:	4620      	mov	r0, r4
 800981a:	f000 fb4b 	bl	8009eb4 <__lshift>
 800981e:	4607      	mov	r7, r0
 8009820:	f1b8 0f00 	cmp.w	r8, #0
 8009824:	d05b      	beq.n	80098de <_dtoa_r+0xa5e>
 8009826:	6879      	ldr	r1, [r7, #4]
 8009828:	4620      	mov	r0, r4
 800982a:	f000 f931 	bl	8009a90 <_Balloc>
 800982e:	4605      	mov	r5, r0
 8009830:	b928      	cbnz	r0, 800983e <_dtoa_r+0x9be>
 8009832:	4b87      	ldr	r3, [pc, #540]	; (8009a50 <_dtoa_r+0xbd0>)
 8009834:	4602      	mov	r2, r0
 8009836:	f240 21ea 	movw	r1, #746	; 0x2ea
 800983a:	f7ff bb3b 	b.w	8008eb4 <_dtoa_r+0x34>
 800983e:	693a      	ldr	r2, [r7, #16]
 8009840:	3202      	adds	r2, #2
 8009842:	0092      	lsls	r2, r2, #2
 8009844:	f107 010c 	add.w	r1, r7, #12
 8009848:	300c      	adds	r0, #12
 800984a:	f000 f913 	bl	8009a74 <memcpy>
 800984e:	2201      	movs	r2, #1
 8009850:	4629      	mov	r1, r5
 8009852:	4620      	mov	r0, r4
 8009854:	f000 fb2e 	bl	8009eb4 <__lshift>
 8009858:	9b01      	ldr	r3, [sp, #4]
 800985a:	f103 0901 	add.w	r9, r3, #1
 800985e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009862:	4413      	add	r3, r2
 8009864:	9305      	str	r3, [sp, #20]
 8009866:	f00a 0301 	and.w	r3, sl, #1
 800986a:	46b8      	mov	r8, r7
 800986c:	9304      	str	r3, [sp, #16]
 800986e:	4607      	mov	r7, r0
 8009870:	4631      	mov	r1, r6
 8009872:	ee18 0a10 	vmov	r0, s16
 8009876:	f7ff fa75 	bl	8008d64 <quorem>
 800987a:	4641      	mov	r1, r8
 800987c:	9002      	str	r0, [sp, #8]
 800987e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009882:	ee18 0a10 	vmov	r0, s16
 8009886:	f000 fb85 	bl	8009f94 <__mcmp>
 800988a:	463a      	mov	r2, r7
 800988c:	9003      	str	r0, [sp, #12]
 800988e:	4631      	mov	r1, r6
 8009890:	4620      	mov	r0, r4
 8009892:	f000 fb9b 	bl	8009fcc <__mdiff>
 8009896:	68c2      	ldr	r2, [r0, #12]
 8009898:	f109 3bff 	add.w	fp, r9, #4294967295
 800989c:	4605      	mov	r5, r0
 800989e:	bb02      	cbnz	r2, 80098e2 <_dtoa_r+0xa62>
 80098a0:	4601      	mov	r1, r0
 80098a2:	ee18 0a10 	vmov	r0, s16
 80098a6:	f000 fb75 	bl	8009f94 <__mcmp>
 80098aa:	4602      	mov	r2, r0
 80098ac:	4629      	mov	r1, r5
 80098ae:	4620      	mov	r0, r4
 80098b0:	9207      	str	r2, [sp, #28]
 80098b2:	f000 f92d 	bl	8009b10 <_Bfree>
 80098b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80098ba:	ea43 0102 	orr.w	r1, r3, r2
 80098be:	9b04      	ldr	r3, [sp, #16]
 80098c0:	430b      	orrs	r3, r1
 80098c2:	464d      	mov	r5, r9
 80098c4:	d10f      	bne.n	80098e6 <_dtoa_r+0xa66>
 80098c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098ca:	d02a      	beq.n	8009922 <_dtoa_r+0xaa2>
 80098cc:	9b03      	ldr	r3, [sp, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	dd02      	ble.n	80098d8 <_dtoa_r+0xa58>
 80098d2:	9b02      	ldr	r3, [sp, #8]
 80098d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80098d8:	f88b a000 	strb.w	sl, [fp]
 80098dc:	e775      	b.n	80097ca <_dtoa_r+0x94a>
 80098de:	4638      	mov	r0, r7
 80098e0:	e7ba      	b.n	8009858 <_dtoa_r+0x9d8>
 80098e2:	2201      	movs	r2, #1
 80098e4:	e7e2      	b.n	80098ac <_dtoa_r+0xa2c>
 80098e6:	9b03      	ldr	r3, [sp, #12]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	db04      	blt.n	80098f6 <_dtoa_r+0xa76>
 80098ec:	9906      	ldr	r1, [sp, #24]
 80098ee:	430b      	orrs	r3, r1
 80098f0:	9904      	ldr	r1, [sp, #16]
 80098f2:	430b      	orrs	r3, r1
 80098f4:	d122      	bne.n	800993c <_dtoa_r+0xabc>
 80098f6:	2a00      	cmp	r2, #0
 80098f8:	ddee      	ble.n	80098d8 <_dtoa_r+0xa58>
 80098fa:	ee18 1a10 	vmov	r1, s16
 80098fe:	2201      	movs	r2, #1
 8009900:	4620      	mov	r0, r4
 8009902:	f000 fad7 	bl	8009eb4 <__lshift>
 8009906:	4631      	mov	r1, r6
 8009908:	ee08 0a10 	vmov	s16, r0
 800990c:	f000 fb42 	bl	8009f94 <__mcmp>
 8009910:	2800      	cmp	r0, #0
 8009912:	dc03      	bgt.n	800991c <_dtoa_r+0xa9c>
 8009914:	d1e0      	bne.n	80098d8 <_dtoa_r+0xa58>
 8009916:	f01a 0f01 	tst.w	sl, #1
 800991a:	d0dd      	beq.n	80098d8 <_dtoa_r+0xa58>
 800991c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009920:	d1d7      	bne.n	80098d2 <_dtoa_r+0xa52>
 8009922:	2339      	movs	r3, #57	; 0x39
 8009924:	f88b 3000 	strb.w	r3, [fp]
 8009928:	462b      	mov	r3, r5
 800992a:	461d      	mov	r5, r3
 800992c:	3b01      	subs	r3, #1
 800992e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009932:	2a39      	cmp	r2, #57	; 0x39
 8009934:	d071      	beq.n	8009a1a <_dtoa_r+0xb9a>
 8009936:	3201      	adds	r2, #1
 8009938:	701a      	strb	r2, [r3, #0]
 800993a:	e746      	b.n	80097ca <_dtoa_r+0x94a>
 800993c:	2a00      	cmp	r2, #0
 800993e:	dd07      	ble.n	8009950 <_dtoa_r+0xad0>
 8009940:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009944:	d0ed      	beq.n	8009922 <_dtoa_r+0xaa2>
 8009946:	f10a 0301 	add.w	r3, sl, #1
 800994a:	f88b 3000 	strb.w	r3, [fp]
 800994e:	e73c      	b.n	80097ca <_dtoa_r+0x94a>
 8009950:	9b05      	ldr	r3, [sp, #20]
 8009952:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009956:	4599      	cmp	r9, r3
 8009958:	d047      	beq.n	80099ea <_dtoa_r+0xb6a>
 800995a:	ee18 1a10 	vmov	r1, s16
 800995e:	2300      	movs	r3, #0
 8009960:	220a      	movs	r2, #10
 8009962:	4620      	mov	r0, r4
 8009964:	f000 f8f6 	bl	8009b54 <__multadd>
 8009968:	45b8      	cmp	r8, r7
 800996a:	ee08 0a10 	vmov	s16, r0
 800996e:	f04f 0300 	mov.w	r3, #0
 8009972:	f04f 020a 	mov.w	r2, #10
 8009976:	4641      	mov	r1, r8
 8009978:	4620      	mov	r0, r4
 800997a:	d106      	bne.n	800998a <_dtoa_r+0xb0a>
 800997c:	f000 f8ea 	bl	8009b54 <__multadd>
 8009980:	4680      	mov	r8, r0
 8009982:	4607      	mov	r7, r0
 8009984:	f109 0901 	add.w	r9, r9, #1
 8009988:	e772      	b.n	8009870 <_dtoa_r+0x9f0>
 800998a:	f000 f8e3 	bl	8009b54 <__multadd>
 800998e:	4639      	mov	r1, r7
 8009990:	4680      	mov	r8, r0
 8009992:	2300      	movs	r3, #0
 8009994:	220a      	movs	r2, #10
 8009996:	4620      	mov	r0, r4
 8009998:	f000 f8dc 	bl	8009b54 <__multadd>
 800999c:	4607      	mov	r7, r0
 800999e:	e7f1      	b.n	8009984 <_dtoa_r+0xb04>
 80099a0:	9b03      	ldr	r3, [sp, #12]
 80099a2:	9302      	str	r3, [sp, #8]
 80099a4:	9d01      	ldr	r5, [sp, #4]
 80099a6:	ee18 0a10 	vmov	r0, s16
 80099aa:	4631      	mov	r1, r6
 80099ac:	f7ff f9da 	bl	8008d64 <quorem>
 80099b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80099b4:	9b01      	ldr	r3, [sp, #4]
 80099b6:	f805 ab01 	strb.w	sl, [r5], #1
 80099ba:	1aea      	subs	r2, r5, r3
 80099bc:	9b02      	ldr	r3, [sp, #8]
 80099be:	4293      	cmp	r3, r2
 80099c0:	dd09      	ble.n	80099d6 <_dtoa_r+0xb56>
 80099c2:	ee18 1a10 	vmov	r1, s16
 80099c6:	2300      	movs	r3, #0
 80099c8:	220a      	movs	r2, #10
 80099ca:	4620      	mov	r0, r4
 80099cc:	f000 f8c2 	bl	8009b54 <__multadd>
 80099d0:	ee08 0a10 	vmov	s16, r0
 80099d4:	e7e7      	b.n	80099a6 <_dtoa_r+0xb26>
 80099d6:	9b02      	ldr	r3, [sp, #8]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	bfc8      	it	gt
 80099dc:	461d      	movgt	r5, r3
 80099de:	9b01      	ldr	r3, [sp, #4]
 80099e0:	bfd8      	it	le
 80099e2:	2501      	movle	r5, #1
 80099e4:	441d      	add	r5, r3
 80099e6:	f04f 0800 	mov.w	r8, #0
 80099ea:	ee18 1a10 	vmov	r1, s16
 80099ee:	2201      	movs	r2, #1
 80099f0:	4620      	mov	r0, r4
 80099f2:	f000 fa5f 	bl	8009eb4 <__lshift>
 80099f6:	4631      	mov	r1, r6
 80099f8:	ee08 0a10 	vmov	s16, r0
 80099fc:	f000 faca 	bl	8009f94 <__mcmp>
 8009a00:	2800      	cmp	r0, #0
 8009a02:	dc91      	bgt.n	8009928 <_dtoa_r+0xaa8>
 8009a04:	d102      	bne.n	8009a0c <_dtoa_r+0xb8c>
 8009a06:	f01a 0f01 	tst.w	sl, #1
 8009a0a:	d18d      	bne.n	8009928 <_dtoa_r+0xaa8>
 8009a0c:	462b      	mov	r3, r5
 8009a0e:	461d      	mov	r5, r3
 8009a10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a14:	2a30      	cmp	r2, #48	; 0x30
 8009a16:	d0fa      	beq.n	8009a0e <_dtoa_r+0xb8e>
 8009a18:	e6d7      	b.n	80097ca <_dtoa_r+0x94a>
 8009a1a:	9a01      	ldr	r2, [sp, #4]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d184      	bne.n	800992a <_dtoa_r+0xaaa>
 8009a20:	9b00      	ldr	r3, [sp, #0]
 8009a22:	3301      	adds	r3, #1
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	2331      	movs	r3, #49	; 0x31
 8009a28:	7013      	strb	r3, [r2, #0]
 8009a2a:	e6ce      	b.n	80097ca <_dtoa_r+0x94a>
 8009a2c:	4b09      	ldr	r3, [pc, #36]	; (8009a54 <_dtoa_r+0xbd4>)
 8009a2e:	f7ff ba95 	b.w	8008f5c <_dtoa_r+0xdc>
 8009a32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f47f aa6e 	bne.w	8008f16 <_dtoa_r+0x96>
 8009a3a:	4b07      	ldr	r3, [pc, #28]	; (8009a58 <_dtoa_r+0xbd8>)
 8009a3c:	f7ff ba8e 	b.w	8008f5c <_dtoa_r+0xdc>
 8009a40:	9b02      	ldr	r3, [sp, #8]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	dcae      	bgt.n	80099a4 <_dtoa_r+0xb24>
 8009a46:	9b06      	ldr	r3, [sp, #24]
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	f73f aea8 	bgt.w	800979e <_dtoa_r+0x91e>
 8009a4e:	e7a9      	b.n	80099a4 <_dtoa_r+0xb24>
 8009a50:	0800b440 	.word	0x0800b440
 8009a54:	0800b29c 	.word	0x0800b29c
 8009a58:	0800b3c1 	.word	0x0800b3c1

08009a5c <_localeconv_r>:
 8009a5c:	4800      	ldr	r0, [pc, #0]	; (8009a60 <_localeconv_r+0x4>)
 8009a5e:	4770      	bx	lr
 8009a60:	2000017c 	.word	0x2000017c

08009a64 <malloc>:
 8009a64:	4b02      	ldr	r3, [pc, #8]	; (8009a70 <malloc+0xc>)
 8009a66:	4601      	mov	r1, r0
 8009a68:	6818      	ldr	r0, [r3, #0]
 8009a6a:	f000 bc17 	b.w	800a29c <_malloc_r>
 8009a6e:	bf00      	nop
 8009a70:	20000028 	.word	0x20000028

08009a74 <memcpy>:
 8009a74:	440a      	add	r2, r1
 8009a76:	4291      	cmp	r1, r2
 8009a78:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a7c:	d100      	bne.n	8009a80 <memcpy+0xc>
 8009a7e:	4770      	bx	lr
 8009a80:	b510      	push	{r4, lr}
 8009a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a8a:	4291      	cmp	r1, r2
 8009a8c:	d1f9      	bne.n	8009a82 <memcpy+0xe>
 8009a8e:	bd10      	pop	{r4, pc}

08009a90 <_Balloc>:
 8009a90:	b570      	push	{r4, r5, r6, lr}
 8009a92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a94:	4604      	mov	r4, r0
 8009a96:	460d      	mov	r5, r1
 8009a98:	b976      	cbnz	r6, 8009ab8 <_Balloc+0x28>
 8009a9a:	2010      	movs	r0, #16
 8009a9c:	f7ff ffe2 	bl	8009a64 <malloc>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	6260      	str	r0, [r4, #36]	; 0x24
 8009aa4:	b920      	cbnz	r0, 8009ab0 <_Balloc+0x20>
 8009aa6:	4b18      	ldr	r3, [pc, #96]	; (8009b08 <_Balloc+0x78>)
 8009aa8:	4818      	ldr	r0, [pc, #96]	; (8009b0c <_Balloc+0x7c>)
 8009aaa:	2166      	movs	r1, #102	; 0x66
 8009aac:	f000 fdd6 	bl	800a65c <__assert_func>
 8009ab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ab4:	6006      	str	r6, [r0, #0]
 8009ab6:	60c6      	str	r6, [r0, #12]
 8009ab8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009aba:	68f3      	ldr	r3, [r6, #12]
 8009abc:	b183      	cbz	r3, 8009ae0 <_Balloc+0x50>
 8009abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ac6:	b9b8      	cbnz	r0, 8009af8 <_Balloc+0x68>
 8009ac8:	2101      	movs	r1, #1
 8009aca:	fa01 f605 	lsl.w	r6, r1, r5
 8009ace:	1d72      	adds	r2, r6, #5
 8009ad0:	0092      	lsls	r2, r2, #2
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	f000 fb60 	bl	800a198 <_calloc_r>
 8009ad8:	b160      	cbz	r0, 8009af4 <_Balloc+0x64>
 8009ada:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ade:	e00e      	b.n	8009afe <_Balloc+0x6e>
 8009ae0:	2221      	movs	r2, #33	; 0x21
 8009ae2:	2104      	movs	r1, #4
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f000 fb57 	bl	800a198 <_calloc_r>
 8009aea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aec:	60f0      	str	r0, [r6, #12]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1e4      	bne.n	8009abe <_Balloc+0x2e>
 8009af4:	2000      	movs	r0, #0
 8009af6:	bd70      	pop	{r4, r5, r6, pc}
 8009af8:	6802      	ldr	r2, [r0, #0]
 8009afa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009afe:	2300      	movs	r3, #0
 8009b00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b04:	e7f7      	b.n	8009af6 <_Balloc+0x66>
 8009b06:	bf00      	nop
 8009b08:	0800b3ce 	.word	0x0800b3ce
 8009b0c:	0800b451 	.word	0x0800b451

08009b10 <_Bfree>:
 8009b10:	b570      	push	{r4, r5, r6, lr}
 8009b12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b14:	4605      	mov	r5, r0
 8009b16:	460c      	mov	r4, r1
 8009b18:	b976      	cbnz	r6, 8009b38 <_Bfree+0x28>
 8009b1a:	2010      	movs	r0, #16
 8009b1c:	f7ff ffa2 	bl	8009a64 <malloc>
 8009b20:	4602      	mov	r2, r0
 8009b22:	6268      	str	r0, [r5, #36]	; 0x24
 8009b24:	b920      	cbnz	r0, 8009b30 <_Bfree+0x20>
 8009b26:	4b09      	ldr	r3, [pc, #36]	; (8009b4c <_Bfree+0x3c>)
 8009b28:	4809      	ldr	r0, [pc, #36]	; (8009b50 <_Bfree+0x40>)
 8009b2a:	218a      	movs	r1, #138	; 0x8a
 8009b2c:	f000 fd96 	bl	800a65c <__assert_func>
 8009b30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b34:	6006      	str	r6, [r0, #0]
 8009b36:	60c6      	str	r6, [r0, #12]
 8009b38:	b13c      	cbz	r4, 8009b4a <_Bfree+0x3a>
 8009b3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b3c:	6862      	ldr	r2, [r4, #4]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b44:	6021      	str	r1, [r4, #0]
 8009b46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b4a:	bd70      	pop	{r4, r5, r6, pc}
 8009b4c:	0800b3ce 	.word	0x0800b3ce
 8009b50:	0800b451 	.word	0x0800b451

08009b54 <__multadd>:
 8009b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b58:	690d      	ldr	r5, [r1, #16]
 8009b5a:	4607      	mov	r7, r0
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	461e      	mov	r6, r3
 8009b60:	f101 0c14 	add.w	ip, r1, #20
 8009b64:	2000      	movs	r0, #0
 8009b66:	f8dc 3000 	ldr.w	r3, [ip]
 8009b6a:	b299      	uxth	r1, r3
 8009b6c:	fb02 6101 	mla	r1, r2, r1, r6
 8009b70:	0c1e      	lsrs	r6, r3, #16
 8009b72:	0c0b      	lsrs	r3, r1, #16
 8009b74:	fb02 3306 	mla	r3, r2, r6, r3
 8009b78:	b289      	uxth	r1, r1
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b80:	4285      	cmp	r5, r0
 8009b82:	f84c 1b04 	str.w	r1, [ip], #4
 8009b86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b8a:	dcec      	bgt.n	8009b66 <__multadd+0x12>
 8009b8c:	b30e      	cbz	r6, 8009bd2 <__multadd+0x7e>
 8009b8e:	68a3      	ldr	r3, [r4, #8]
 8009b90:	42ab      	cmp	r3, r5
 8009b92:	dc19      	bgt.n	8009bc8 <__multadd+0x74>
 8009b94:	6861      	ldr	r1, [r4, #4]
 8009b96:	4638      	mov	r0, r7
 8009b98:	3101      	adds	r1, #1
 8009b9a:	f7ff ff79 	bl	8009a90 <_Balloc>
 8009b9e:	4680      	mov	r8, r0
 8009ba0:	b928      	cbnz	r0, 8009bae <__multadd+0x5a>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	4b0c      	ldr	r3, [pc, #48]	; (8009bd8 <__multadd+0x84>)
 8009ba6:	480d      	ldr	r0, [pc, #52]	; (8009bdc <__multadd+0x88>)
 8009ba8:	21b5      	movs	r1, #181	; 0xb5
 8009baa:	f000 fd57 	bl	800a65c <__assert_func>
 8009bae:	6922      	ldr	r2, [r4, #16]
 8009bb0:	3202      	adds	r2, #2
 8009bb2:	f104 010c 	add.w	r1, r4, #12
 8009bb6:	0092      	lsls	r2, r2, #2
 8009bb8:	300c      	adds	r0, #12
 8009bba:	f7ff ff5b 	bl	8009a74 <memcpy>
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	4638      	mov	r0, r7
 8009bc2:	f7ff ffa5 	bl	8009b10 <_Bfree>
 8009bc6:	4644      	mov	r4, r8
 8009bc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009bcc:	3501      	adds	r5, #1
 8009bce:	615e      	str	r6, [r3, #20]
 8009bd0:	6125      	str	r5, [r4, #16]
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bd8:	0800b440 	.word	0x0800b440
 8009bdc:	0800b451 	.word	0x0800b451

08009be0 <__hi0bits>:
 8009be0:	0c03      	lsrs	r3, r0, #16
 8009be2:	041b      	lsls	r3, r3, #16
 8009be4:	b9d3      	cbnz	r3, 8009c1c <__hi0bits+0x3c>
 8009be6:	0400      	lsls	r0, r0, #16
 8009be8:	2310      	movs	r3, #16
 8009bea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009bee:	bf04      	itt	eq
 8009bf0:	0200      	lsleq	r0, r0, #8
 8009bf2:	3308      	addeq	r3, #8
 8009bf4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009bf8:	bf04      	itt	eq
 8009bfa:	0100      	lsleq	r0, r0, #4
 8009bfc:	3304      	addeq	r3, #4
 8009bfe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c02:	bf04      	itt	eq
 8009c04:	0080      	lsleq	r0, r0, #2
 8009c06:	3302      	addeq	r3, #2
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	db05      	blt.n	8009c18 <__hi0bits+0x38>
 8009c0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009c10:	f103 0301 	add.w	r3, r3, #1
 8009c14:	bf08      	it	eq
 8009c16:	2320      	moveq	r3, #32
 8009c18:	4618      	mov	r0, r3
 8009c1a:	4770      	bx	lr
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	e7e4      	b.n	8009bea <__hi0bits+0xa>

08009c20 <__lo0bits>:
 8009c20:	6803      	ldr	r3, [r0, #0]
 8009c22:	f013 0207 	ands.w	r2, r3, #7
 8009c26:	4601      	mov	r1, r0
 8009c28:	d00b      	beq.n	8009c42 <__lo0bits+0x22>
 8009c2a:	07da      	lsls	r2, r3, #31
 8009c2c:	d423      	bmi.n	8009c76 <__lo0bits+0x56>
 8009c2e:	0798      	lsls	r0, r3, #30
 8009c30:	bf49      	itett	mi
 8009c32:	085b      	lsrmi	r3, r3, #1
 8009c34:	089b      	lsrpl	r3, r3, #2
 8009c36:	2001      	movmi	r0, #1
 8009c38:	600b      	strmi	r3, [r1, #0]
 8009c3a:	bf5c      	itt	pl
 8009c3c:	600b      	strpl	r3, [r1, #0]
 8009c3e:	2002      	movpl	r0, #2
 8009c40:	4770      	bx	lr
 8009c42:	b298      	uxth	r0, r3
 8009c44:	b9a8      	cbnz	r0, 8009c72 <__lo0bits+0x52>
 8009c46:	0c1b      	lsrs	r3, r3, #16
 8009c48:	2010      	movs	r0, #16
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	b90a      	cbnz	r2, 8009c52 <__lo0bits+0x32>
 8009c4e:	3008      	adds	r0, #8
 8009c50:	0a1b      	lsrs	r3, r3, #8
 8009c52:	071a      	lsls	r2, r3, #28
 8009c54:	bf04      	itt	eq
 8009c56:	091b      	lsreq	r3, r3, #4
 8009c58:	3004      	addeq	r0, #4
 8009c5a:	079a      	lsls	r2, r3, #30
 8009c5c:	bf04      	itt	eq
 8009c5e:	089b      	lsreq	r3, r3, #2
 8009c60:	3002      	addeq	r0, #2
 8009c62:	07da      	lsls	r2, r3, #31
 8009c64:	d403      	bmi.n	8009c6e <__lo0bits+0x4e>
 8009c66:	085b      	lsrs	r3, r3, #1
 8009c68:	f100 0001 	add.w	r0, r0, #1
 8009c6c:	d005      	beq.n	8009c7a <__lo0bits+0x5a>
 8009c6e:	600b      	str	r3, [r1, #0]
 8009c70:	4770      	bx	lr
 8009c72:	4610      	mov	r0, r2
 8009c74:	e7e9      	b.n	8009c4a <__lo0bits+0x2a>
 8009c76:	2000      	movs	r0, #0
 8009c78:	4770      	bx	lr
 8009c7a:	2020      	movs	r0, #32
 8009c7c:	4770      	bx	lr
	...

08009c80 <__i2b>:
 8009c80:	b510      	push	{r4, lr}
 8009c82:	460c      	mov	r4, r1
 8009c84:	2101      	movs	r1, #1
 8009c86:	f7ff ff03 	bl	8009a90 <_Balloc>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	b928      	cbnz	r0, 8009c9a <__i2b+0x1a>
 8009c8e:	4b05      	ldr	r3, [pc, #20]	; (8009ca4 <__i2b+0x24>)
 8009c90:	4805      	ldr	r0, [pc, #20]	; (8009ca8 <__i2b+0x28>)
 8009c92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009c96:	f000 fce1 	bl	800a65c <__assert_func>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	6144      	str	r4, [r0, #20]
 8009c9e:	6103      	str	r3, [r0, #16]
 8009ca0:	bd10      	pop	{r4, pc}
 8009ca2:	bf00      	nop
 8009ca4:	0800b440 	.word	0x0800b440
 8009ca8:	0800b451 	.word	0x0800b451

08009cac <__multiply>:
 8009cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb0:	4691      	mov	r9, r2
 8009cb2:	690a      	ldr	r2, [r1, #16]
 8009cb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	bfb8      	it	lt
 8009cbc:	460b      	movlt	r3, r1
 8009cbe:	460c      	mov	r4, r1
 8009cc0:	bfbc      	itt	lt
 8009cc2:	464c      	movlt	r4, r9
 8009cc4:	4699      	movlt	r9, r3
 8009cc6:	6927      	ldr	r7, [r4, #16]
 8009cc8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ccc:	68a3      	ldr	r3, [r4, #8]
 8009cce:	6861      	ldr	r1, [r4, #4]
 8009cd0:	eb07 060a 	add.w	r6, r7, sl
 8009cd4:	42b3      	cmp	r3, r6
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	bfb8      	it	lt
 8009cda:	3101      	addlt	r1, #1
 8009cdc:	f7ff fed8 	bl	8009a90 <_Balloc>
 8009ce0:	b930      	cbnz	r0, 8009cf0 <__multiply+0x44>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	4b44      	ldr	r3, [pc, #272]	; (8009df8 <__multiply+0x14c>)
 8009ce6:	4845      	ldr	r0, [pc, #276]	; (8009dfc <__multiply+0x150>)
 8009ce8:	f240 115d 	movw	r1, #349	; 0x15d
 8009cec:	f000 fcb6 	bl	800a65c <__assert_func>
 8009cf0:	f100 0514 	add.w	r5, r0, #20
 8009cf4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009cf8:	462b      	mov	r3, r5
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	4543      	cmp	r3, r8
 8009cfe:	d321      	bcc.n	8009d44 <__multiply+0x98>
 8009d00:	f104 0314 	add.w	r3, r4, #20
 8009d04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d08:	f109 0314 	add.w	r3, r9, #20
 8009d0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d10:	9202      	str	r2, [sp, #8]
 8009d12:	1b3a      	subs	r2, r7, r4
 8009d14:	3a15      	subs	r2, #21
 8009d16:	f022 0203 	bic.w	r2, r2, #3
 8009d1a:	3204      	adds	r2, #4
 8009d1c:	f104 0115 	add.w	r1, r4, #21
 8009d20:	428f      	cmp	r7, r1
 8009d22:	bf38      	it	cc
 8009d24:	2204      	movcc	r2, #4
 8009d26:	9201      	str	r2, [sp, #4]
 8009d28:	9a02      	ldr	r2, [sp, #8]
 8009d2a:	9303      	str	r3, [sp, #12]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d80c      	bhi.n	8009d4a <__multiply+0x9e>
 8009d30:	2e00      	cmp	r6, #0
 8009d32:	dd03      	ble.n	8009d3c <__multiply+0x90>
 8009d34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d05a      	beq.n	8009df2 <__multiply+0x146>
 8009d3c:	6106      	str	r6, [r0, #16]
 8009d3e:	b005      	add	sp, #20
 8009d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d44:	f843 2b04 	str.w	r2, [r3], #4
 8009d48:	e7d8      	b.n	8009cfc <__multiply+0x50>
 8009d4a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d4e:	f1ba 0f00 	cmp.w	sl, #0
 8009d52:	d024      	beq.n	8009d9e <__multiply+0xf2>
 8009d54:	f104 0e14 	add.w	lr, r4, #20
 8009d58:	46a9      	mov	r9, r5
 8009d5a:	f04f 0c00 	mov.w	ip, #0
 8009d5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009d62:	f8d9 1000 	ldr.w	r1, [r9]
 8009d66:	fa1f fb82 	uxth.w	fp, r2
 8009d6a:	b289      	uxth	r1, r1
 8009d6c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009d70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009d74:	f8d9 2000 	ldr.w	r2, [r9]
 8009d78:	4461      	add	r1, ip
 8009d7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d7e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009d82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d86:	b289      	uxth	r1, r1
 8009d88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d8c:	4577      	cmp	r7, lr
 8009d8e:	f849 1b04 	str.w	r1, [r9], #4
 8009d92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d96:	d8e2      	bhi.n	8009d5e <__multiply+0xb2>
 8009d98:	9a01      	ldr	r2, [sp, #4]
 8009d9a:	f845 c002 	str.w	ip, [r5, r2]
 8009d9e:	9a03      	ldr	r2, [sp, #12]
 8009da0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009da4:	3304      	adds	r3, #4
 8009da6:	f1b9 0f00 	cmp.w	r9, #0
 8009daa:	d020      	beq.n	8009dee <__multiply+0x142>
 8009dac:	6829      	ldr	r1, [r5, #0]
 8009dae:	f104 0c14 	add.w	ip, r4, #20
 8009db2:	46ae      	mov	lr, r5
 8009db4:	f04f 0a00 	mov.w	sl, #0
 8009db8:	f8bc b000 	ldrh.w	fp, [ip]
 8009dbc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009dc0:	fb09 220b 	mla	r2, r9, fp, r2
 8009dc4:	4492      	add	sl, r2
 8009dc6:	b289      	uxth	r1, r1
 8009dc8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009dcc:	f84e 1b04 	str.w	r1, [lr], #4
 8009dd0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009dd4:	f8be 1000 	ldrh.w	r1, [lr]
 8009dd8:	0c12      	lsrs	r2, r2, #16
 8009dda:	fb09 1102 	mla	r1, r9, r2, r1
 8009dde:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009de2:	4567      	cmp	r7, ip
 8009de4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009de8:	d8e6      	bhi.n	8009db8 <__multiply+0x10c>
 8009dea:	9a01      	ldr	r2, [sp, #4]
 8009dec:	50a9      	str	r1, [r5, r2]
 8009dee:	3504      	adds	r5, #4
 8009df0:	e79a      	b.n	8009d28 <__multiply+0x7c>
 8009df2:	3e01      	subs	r6, #1
 8009df4:	e79c      	b.n	8009d30 <__multiply+0x84>
 8009df6:	bf00      	nop
 8009df8:	0800b440 	.word	0x0800b440
 8009dfc:	0800b451 	.word	0x0800b451

08009e00 <__pow5mult>:
 8009e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e04:	4615      	mov	r5, r2
 8009e06:	f012 0203 	ands.w	r2, r2, #3
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	460f      	mov	r7, r1
 8009e0e:	d007      	beq.n	8009e20 <__pow5mult+0x20>
 8009e10:	4c25      	ldr	r4, [pc, #148]	; (8009ea8 <__pow5mult+0xa8>)
 8009e12:	3a01      	subs	r2, #1
 8009e14:	2300      	movs	r3, #0
 8009e16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e1a:	f7ff fe9b 	bl	8009b54 <__multadd>
 8009e1e:	4607      	mov	r7, r0
 8009e20:	10ad      	asrs	r5, r5, #2
 8009e22:	d03d      	beq.n	8009ea0 <__pow5mult+0xa0>
 8009e24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009e26:	b97c      	cbnz	r4, 8009e48 <__pow5mult+0x48>
 8009e28:	2010      	movs	r0, #16
 8009e2a:	f7ff fe1b 	bl	8009a64 <malloc>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	6270      	str	r0, [r6, #36]	; 0x24
 8009e32:	b928      	cbnz	r0, 8009e40 <__pow5mult+0x40>
 8009e34:	4b1d      	ldr	r3, [pc, #116]	; (8009eac <__pow5mult+0xac>)
 8009e36:	481e      	ldr	r0, [pc, #120]	; (8009eb0 <__pow5mult+0xb0>)
 8009e38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009e3c:	f000 fc0e 	bl	800a65c <__assert_func>
 8009e40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e44:	6004      	str	r4, [r0, #0]
 8009e46:	60c4      	str	r4, [r0, #12]
 8009e48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009e4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e50:	b94c      	cbnz	r4, 8009e66 <__pow5mult+0x66>
 8009e52:	f240 2171 	movw	r1, #625	; 0x271
 8009e56:	4630      	mov	r0, r6
 8009e58:	f7ff ff12 	bl	8009c80 <__i2b>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e62:	4604      	mov	r4, r0
 8009e64:	6003      	str	r3, [r0, #0]
 8009e66:	f04f 0900 	mov.w	r9, #0
 8009e6a:	07eb      	lsls	r3, r5, #31
 8009e6c:	d50a      	bpl.n	8009e84 <__pow5mult+0x84>
 8009e6e:	4639      	mov	r1, r7
 8009e70:	4622      	mov	r2, r4
 8009e72:	4630      	mov	r0, r6
 8009e74:	f7ff ff1a 	bl	8009cac <__multiply>
 8009e78:	4639      	mov	r1, r7
 8009e7a:	4680      	mov	r8, r0
 8009e7c:	4630      	mov	r0, r6
 8009e7e:	f7ff fe47 	bl	8009b10 <_Bfree>
 8009e82:	4647      	mov	r7, r8
 8009e84:	106d      	asrs	r5, r5, #1
 8009e86:	d00b      	beq.n	8009ea0 <__pow5mult+0xa0>
 8009e88:	6820      	ldr	r0, [r4, #0]
 8009e8a:	b938      	cbnz	r0, 8009e9c <__pow5mult+0x9c>
 8009e8c:	4622      	mov	r2, r4
 8009e8e:	4621      	mov	r1, r4
 8009e90:	4630      	mov	r0, r6
 8009e92:	f7ff ff0b 	bl	8009cac <__multiply>
 8009e96:	6020      	str	r0, [r4, #0]
 8009e98:	f8c0 9000 	str.w	r9, [r0]
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	e7e4      	b.n	8009e6a <__pow5mult+0x6a>
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ea6:	bf00      	nop
 8009ea8:	0800b5a0 	.word	0x0800b5a0
 8009eac:	0800b3ce 	.word	0x0800b3ce
 8009eb0:	0800b451 	.word	0x0800b451

08009eb4 <__lshift>:
 8009eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb8:	460c      	mov	r4, r1
 8009eba:	6849      	ldr	r1, [r1, #4]
 8009ebc:	6923      	ldr	r3, [r4, #16]
 8009ebe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ec2:	68a3      	ldr	r3, [r4, #8]
 8009ec4:	4607      	mov	r7, r0
 8009ec6:	4691      	mov	r9, r2
 8009ec8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ecc:	f108 0601 	add.w	r6, r8, #1
 8009ed0:	42b3      	cmp	r3, r6
 8009ed2:	db0b      	blt.n	8009eec <__lshift+0x38>
 8009ed4:	4638      	mov	r0, r7
 8009ed6:	f7ff fddb 	bl	8009a90 <_Balloc>
 8009eda:	4605      	mov	r5, r0
 8009edc:	b948      	cbnz	r0, 8009ef2 <__lshift+0x3e>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	4b2a      	ldr	r3, [pc, #168]	; (8009f8c <__lshift+0xd8>)
 8009ee2:	482b      	ldr	r0, [pc, #172]	; (8009f90 <__lshift+0xdc>)
 8009ee4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ee8:	f000 fbb8 	bl	800a65c <__assert_func>
 8009eec:	3101      	adds	r1, #1
 8009eee:	005b      	lsls	r3, r3, #1
 8009ef0:	e7ee      	b.n	8009ed0 <__lshift+0x1c>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	f100 0114 	add.w	r1, r0, #20
 8009ef8:	f100 0210 	add.w	r2, r0, #16
 8009efc:	4618      	mov	r0, r3
 8009efe:	4553      	cmp	r3, sl
 8009f00:	db37      	blt.n	8009f72 <__lshift+0xbe>
 8009f02:	6920      	ldr	r0, [r4, #16]
 8009f04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f08:	f104 0314 	add.w	r3, r4, #20
 8009f0c:	f019 091f 	ands.w	r9, r9, #31
 8009f10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f18:	d02f      	beq.n	8009f7a <__lshift+0xc6>
 8009f1a:	f1c9 0e20 	rsb	lr, r9, #32
 8009f1e:	468a      	mov	sl, r1
 8009f20:	f04f 0c00 	mov.w	ip, #0
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	fa02 f209 	lsl.w	r2, r2, r9
 8009f2a:	ea42 020c 	orr.w	r2, r2, ip
 8009f2e:	f84a 2b04 	str.w	r2, [sl], #4
 8009f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f36:	4298      	cmp	r0, r3
 8009f38:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009f3c:	d8f2      	bhi.n	8009f24 <__lshift+0x70>
 8009f3e:	1b03      	subs	r3, r0, r4
 8009f40:	3b15      	subs	r3, #21
 8009f42:	f023 0303 	bic.w	r3, r3, #3
 8009f46:	3304      	adds	r3, #4
 8009f48:	f104 0215 	add.w	r2, r4, #21
 8009f4c:	4290      	cmp	r0, r2
 8009f4e:	bf38      	it	cc
 8009f50:	2304      	movcc	r3, #4
 8009f52:	f841 c003 	str.w	ip, [r1, r3]
 8009f56:	f1bc 0f00 	cmp.w	ip, #0
 8009f5a:	d001      	beq.n	8009f60 <__lshift+0xac>
 8009f5c:	f108 0602 	add.w	r6, r8, #2
 8009f60:	3e01      	subs	r6, #1
 8009f62:	4638      	mov	r0, r7
 8009f64:	612e      	str	r6, [r5, #16]
 8009f66:	4621      	mov	r1, r4
 8009f68:	f7ff fdd2 	bl	8009b10 <_Bfree>
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f72:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f76:	3301      	adds	r3, #1
 8009f78:	e7c1      	b.n	8009efe <__lshift+0x4a>
 8009f7a:	3904      	subs	r1, #4
 8009f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f80:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f84:	4298      	cmp	r0, r3
 8009f86:	d8f9      	bhi.n	8009f7c <__lshift+0xc8>
 8009f88:	e7ea      	b.n	8009f60 <__lshift+0xac>
 8009f8a:	bf00      	nop
 8009f8c:	0800b440 	.word	0x0800b440
 8009f90:	0800b451 	.word	0x0800b451

08009f94 <__mcmp>:
 8009f94:	b530      	push	{r4, r5, lr}
 8009f96:	6902      	ldr	r2, [r0, #16]
 8009f98:	690c      	ldr	r4, [r1, #16]
 8009f9a:	1b12      	subs	r2, r2, r4
 8009f9c:	d10e      	bne.n	8009fbc <__mcmp+0x28>
 8009f9e:	f100 0314 	add.w	r3, r0, #20
 8009fa2:	3114      	adds	r1, #20
 8009fa4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009fa8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009fac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009fb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009fb4:	42a5      	cmp	r5, r4
 8009fb6:	d003      	beq.n	8009fc0 <__mcmp+0x2c>
 8009fb8:	d305      	bcc.n	8009fc6 <__mcmp+0x32>
 8009fba:	2201      	movs	r2, #1
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	bd30      	pop	{r4, r5, pc}
 8009fc0:	4283      	cmp	r3, r0
 8009fc2:	d3f3      	bcc.n	8009fac <__mcmp+0x18>
 8009fc4:	e7fa      	b.n	8009fbc <__mcmp+0x28>
 8009fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fca:	e7f7      	b.n	8009fbc <__mcmp+0x28>

08009fcc <__mdiff>:
 8009fcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd0:	460c      	mov	r4, r1
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	4611      	mov	r1, r2
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	4690      	mov	r8, r2
 8009fda:	f7ff ffdb 	bl	8009f94 <__mcmp>
 8009fde:	1e05      	subs	r5, r0, #0
 8009fe0:	d110      	bne.n	800a004 <__mdiff+0x38>
 8009fe2:	4629      	mov	r1, r5
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	f7ff fd53 	bl	8009a90 <_Balloc>
 8009fea:	b930      	cbnz	r0, 8009ffa <__mdiff+0x2e>
 8009fec:	4b3a      	ldr	r3, [pc, #232]	; (800a0d8 <__mdiff+0x10c>)
 8009fee:	4602      	mov	r2, r0
 8009ff0:	f240 2132 	movw	r1, #562	; 0x232
 8009ff4:	4839      	ldr	r0, [pc, #228]	; (800a0dc <__mdiff+0x110>)
 8009ff6:	f000 fb31 	bl	800a65c <__assert_func>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a000:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a004:	bfa4      	itt	ge
 800a006:	4643      	movge	r3, r8
 800a008:	46a0      	movge	r8, r4
 800a00a:	4630      	mov	r0, r6
 800a00c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a010:	bfa6      	itte	ge
 800a012:	461c      	movge	r4, r3
 800a014:	2500      	movge	r5, #0
 800a016:	2501      	movlt	r5, #1
 800a018:	f7ff fd3a 	bl	8009a90 <_Balloc>
 800a01c:	b920      	cbnz	r0, 800a028 <__mdiff+0x5c>
 800a01e:	4b2e      	ldr	r3, [pc, #184]	; (800a0d8 <__mdiff+0x10c>)
 800a020:	4602      	mov	r2, r0
 800a022:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a026:	e7e5      	b.n	8009ff4 <__mdiff+0x28>
 800a028:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a02c:	6926      	ldr	r6, [r4, #16]
 800a02e:	60c5      	str	r5, [r0, #12]
 800a030:	f104 0914 	add.w	r9, r4, #20
 800a034:	f108 0514 	add.w	r5, r8, #20
 800a038:	f100 0e14 	add.w	lr, r0, #20
 800a03c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a040:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a044:	f108 0210 	add.w	r2, r8, #16
 800a048:	46f2      	mov	sl, lr
 800a04a:	2100      	movs	r1, #0
 800a04c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a050:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a054:	fa1f f883 	uxth.w	r8, r3
 800a058:	fa11 f18b 	uxtah	r1, r1, fp
 800a05c:	0c1b      	lsrs	r3, r3, #16
 800a05e:	eba1 0808 	sub.w	r8, r1, r8
 800a062:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a066:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a06a:	fa1f f888 	uxth.w	r8, r8
 800a06e:	1419      	asrs	r1, r3, #16
 800a070:	454e      	cmp	r6, r9
 800a072:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a076:	f84a 3b04 	str.w	r3, [sl], #4
 800a07a:	d8e7      	bhi.n	800a04c <__mdiff+0x80>
 800a07c:	1b33      	subs	r3, r6, r4
 800a07e:	3b15      	subs	r3, #21
 800a080:	f023 0303 	bic.w	r3, r3, #3
 800a084:	3304      	adds	r3, #4
 800a086:	3415      	adds	r4, #21
 800a088:	42a6      	cmp	r6, r4
 800a08a:	bf38      	it	cc
 800a08c:	2304      	movcc	r3, #4
 800a08e:	441d      	add	r5, r3
 800a090:	4473      	add	r3, lr
 800a092:	469e      	mov	lr, r3
 800a094:	462e      	mov	r6, r5
 800a096:	4566      	cmp	r6, ip
 800a098:	d30e      	bcc.n	800a0b8 <__mdiff+0xec>
 800a09a:	f10c 0203 	add.w	r2, ip, #3
 800a09e:	1b52      	subs	r2, r2, r5
 800a0a0:	f022 0203 	bic.w	r2, r2, #3
 800a0a4:	3d03      	subs	r5, #3
 800a0a6:	45ac      	cmp	ip, r5
 800a0a8:	bf38      	it	cc
 800a0aa:	2200      	movcc	r2, #0
 800a0ac:	441a      	add	r2, r3
 800a0ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a0b2:	b17b      	cbz	r3, 800a0d4 <__mdiff+0x108>
 800a0b4:	6107      	str	r7, [r0, #16]
 800a0b6:	e7a3      	b.n	800a000 <__mdiff+0x34>
 800a0b8:	f856 8b04 	ldr.w	r8, [r6], #4
 800a0bc:	fa11 f288 	uxtah	r2, r1, r8
 800a0c0:	1414      	asrs	r4, r2, #16
 800a0c2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a0c6:	b292      	uxth	r2, r2
 800a0c8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a0cc:	f84e 2b04 	str.w	r2, [lr], #4
 800a0d0:	1421      	asrs	r1, r4, #16
 800a0d2:	e7e0      	b.n	800a096 <__mdiff+0xca>
 800a0d4:	3f01      	subs	r7, #1
 800a0d6:	e7ea      	b.n	800a0ae <__mdiff+0xe2>
 800a0d8:	0800b440 	.word	0x0800b440
 800a0dc:	0800b451 	.word	0x0800b451

0800a0e0 <__d2b>:
 800a0e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0e4:	4689      	mov	r9, r1
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	ec57 6b10 	vmov	r6, r7, d0
 800a0ec:	4690      	mov	r8, r2
 800a0ee:	f7ff fccf 	bl	8009a90 <_Balloc>
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	b930      	cbnz	r0, 800a104 <__d2b+0x24>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	4b25      	ldr	r3, [pc, #148]	; (800a190 <__d2b+0xb0>)
 800a0fa:	4826      	ldr	r0, [pc, #152]	; (800a194 <__d2b+0xb4>)
 800a0fc:	f240 310a 	movw	r1, #778	; 0x30a
 800a100:	f000 faac 	bl	800a65c <__assert_func>
 800a104:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a108:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a10c:	bb35      	cbnz	r5, 800a15c <__d2b+0x7c>
 800a10e:	2e00      	cmp	r6, #0
 800a110:	9301      	str	r3, [sp, #4]
 800a112:	d028      	beq.n	800a166 <__d2b+0x86>
 800a114:	4668      	mov	r0, sp
 800a116:	9600      	str	r6, [sp, #0]
 800a118:	f7ff fd82 	bl	8009c20 <__lo0bits>
 800a11c:	9900      	ldr	r1, [sp, #0]
 800a11e:	b300      	cbz	r0, 800a162 <__d2b+0x82>
 800a120:	9a01      	ldr	r2, [sp, #4]
 800a122:	f1c0 0320 	rsb	r3, r0, #32
 800a126:	fa02 f303 	lsl.w	r3, r2, r3
 800a12a:	430b      	orrs	r3, r1
 800a12c:	40c2      	lsrs	r2, r0
 800a12e:	6163      	str	r3, [r4, #20]
 800a130:	9201      	str	r2, [sp, #4]
 800a132:	9b01      	ldr	r3, [sp, #4]
 800a134:	61a3      	str	r3, [r4, #24]
 800a136:	2b00      	cmp	r3, #0
 800a138:	bf14      	ite	ne
 800a13a:	2202      	movne	r2, #2
 800a13c:	2201      	moveq	r2, #1
 800a13e:	6122      	str	r2, [r4, #16]
 800a140:	b1d5      	cbz	r5, 800a178 <__d2b+0x98>
 800a142:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a146:	4405      	add	r5, r0
 800a148:	f8c9 5000 	str.w	r5, [r9]
 800a14c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a150:	f8c8 0000 	str.w	r0, [r8]
 800a154:	4620      	mov	r0, r4
 800a156:	b003      	add	sp, #12
 800a158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a15c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a160:	e7d5      	b.n	800a10e <__d2b+0x2e>
 800a162:	6161      	str	r1, [r4, #20]
 800a164:	e7e5      	b.n	800a132 <__d2b+0x52>
 800a166:	a801      	add	r0, sp, #4
 800a168:	f7ff fd5a 	bl	8009c20 <__lo0bits>
 800a16c:	9b01      	ldr	r3, [sp, #4]
 800a16e:	6163      	str	r3, [r4, #20]
 800a170:	2201      	movs	r2, #1
 800a172:	6122      	str	r2, [r4, #16]
 800a174:	3020      	adds	r0, #32
 800a176:	e7e3      	b.n	800a140 <__d2b+0x60>
 800a178:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a17c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a180:	f8c9 0000 	str.w	r0, [r9]
 800a184:	6918      	ldr	r0, [r3, #16]
 800a186:	f7ff fd2b 	bl	8009be0 <__hi0bits>
 800a18a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a18e:	e7df      	b.n	800a150 <__d2b+0x70>
 800a190:	0800b440 	.word	0x0800b440
 800a194:	0800b451 	.word	0x0800b451

0800a198 <_calloc_r>:
 800a198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a19a:	fba1 2402 	umull	r2, r4, r1, r2
 800a19e:	b94c      	cbnz	r4, 800a1b4 <_calloc_r+0x1c>
 800a1a0:	4611      	mov	r1, r2
 800a1a2:	9201      	str	r2, [sp, #4]
 800a1a4:	f000 f87a 	bl	800a29c <_malloc_r>
 800a1a8:	9a01      	ldr	r2, [sp, #4]
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	b930      	cbnz	r0, 800a1bc <_calloc_r+0x24>
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	b003      	add	sp, #12
 800a1b2:	bd30      	pop	{r4, r5, pc}
 800a1b4:	220c      	movs	r2, #12
 800a1b6:	6002      	str	r2, [r0, #0]
 800a1b8:	2500      	movs	r5, #0
 800a1ba:	e7f8      	b.n	800a1ae <_calloc_r+0x16>
 800a1bc:	4621      	mov	r1, r4
 800a1be:	f7fe f8b3 	bl	8008328 <memset>
 800a1c2:	e7f4      	b.n	800a1ae <_calloc_r+0x16>

0800a1c4 <_free_r>:
 800a1c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1c6:	2900      	cmp	r1, #0
 800a1c8:	d044      	beq.n	800a254 <_free_r+0x90>
 800a1ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1ce:	9001      	str	r0, [sp, #4]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f1a1 0404 	sub.w	r4, r1, #4
 800a1d6:	bfb8      	it	lt
 800a1d8:	18e4      	addlt	r4, r4, r3
 800a1da:	f000 fa9b 	bl	800a714 <__malloc_lock>
 800a1de:	4a1e      	ldr	r2, [pc, #120]	; (800a258 <_free_r+0x94>)
 800a1e0:	9801      	ldr	r0, [sp, #4]
 800a1e2:	6813      	ldr	r3, [r2, #0]
 800a1e4:	b933      	cbnz	r3, 800a1f4 <_free_r+0x30>
 800a1e6:	6063      	str	r3, [r4, #4]
 800a1e8:	6014      	str	r4, [r2, #0]
 800a1ea:	b003      	add	sp, #12
 800a1ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1f0:	f000 ba96 	b.w	800a720 <__malloc_unlock>
 800a1f4:	42a3      	cmp	r3, r4
 800a1f6:	d908      	bls.n	800a20a <_free_r+0x46>
 800a1f8:	6825      	ldr	r5, [r4, #0]
 800a1fa:	1961      	adds	r1, r4, r5
 800a1fc:	428b      	cmp	r3, r1
 800a1fe:	bf01      	itttt	eq
 800a200:	6819      	ldreq	r1, [r3, #0]
 800a202:	685b      	ldreq	r3, [r3, #4]
 800a204:	1949      	addeq	r1, r1, r5
 800a206:	6021      	streq	r1, [r4, #0]
 800a208:	e7ed      	b.n	800a1e6 <_free_r+0x22>
 800a20a:	461a      	mov	r2, r3
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	b10b      	cbz	r3, 800a214 <_free_r+0x50>
 800a210:	42a3      	cmp	r3, r4
 800a212:	d9fa      	bls.n	800a20a <_free_r+0x46>
 800a214:	6811      	ldr	r1, [r2, #0]
 800a216:	1855      	adds	r5, r2, r1
 800a218:	42a5      	cmp	r5, r4
 800a21a:	d10b      	bne.n	800a234 <_free_r+0x70>
 800a21c:	6824      	ldr	r4, [r4, #0]
 800a21e:	4421      	add	r1, r4
 800a220:	1854      	adds	r4, r2, r1
 800a222:	42a3      	cmp	r3, r4
 800a224:	6011      	str	r1, [r2, #0]
 800a226:	d1e0      	bne.n	800a1ea <_free_r+0x26>
 800a228:	681c      	ldr	r4, [r3, #0]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	6053      	str	r3, [r2, #4]
 800a22e:	4421      	add	r1, r4
 800a230:	6011      	str	r1, [r2, #0]
 800a232:	e7da      	b.n	800a1ea <_free_r+0x26>
 800a234:	d902      	bls.n	800a23c <_free_r+0x78>
 800a236:	230c      	movs	r3, #12
 800a238:	6003      	str	r3, [r0, #0]
 800a23a:	e7d6      	b.n	800a1ea <_free_r+0x26>
 800a23c:	6825      	ldr	r5, [r4, #0]
 800a23e:	1961      	adds	r1, r4, r5
 800a240:	428b      	cmp	r3, r1
 800a242:	bf04      	itt	eq
 800a244:	6819      	ldreq	r1, [r3, #0]
 800a246:	685b      	ldreq	r3, [r3, #4]
 800a248:	6063      	str	r3, [r4, #4]
 800a24a:	bf04      	itt	eq
 800a24c:	1949      	addeq	r1, r1, r5
 800a24e:	6021      	streq	r1, [r4, #0]
 800a250:	6054      	str	r4, [r2, #4]
 800a252:	e7ca      	b.n	800a1ea <_free_r+0x26>
 800a254:	b003      	add	sp, #12
 800a256:	bd30      	pop	{r4, r5, pc}
 800a258:	200009bc 	.word	0x200009bc

0800a25c <sbrk_aligned>:
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	4e0e      	ldr	r6, [pc, #56]	; (800a298 <sbrk_aligned+0x3c>)
 800a260:	460c      	mov	r4, r1
 800a262:	6831      	ldr	r1, [r6, #0]
 800a264:	4605      	mov	r5, r0
 800a266:	b911      	cbnz	r1, 800a26e <sbrk_aligned+0x12>
 800a268:	f000 f9e8 	bl	800a63c <_sbrk_r>
 800a26c:	6030      	str	r0, [r6, #0]
 800a26e:	4621      	mov	r1, r4
 800a270:	4628      	mov	r0, r5
 800a272:	f000 f9e3 	bl	800a63c <_sbrk_r>
 800a276:	1c43      	adds	r3, r0, #1
 800a278:	d00a      	beq.n	800a290 <sbrk_aligned+0x34>
 800a27a:	1cc4      	adds	r4, r0, #3
 800a27c:	f024 0403 	bic.w	r4, r4, #3
 800a280:	42a0      	cmp	r0, r4
 800a282:	d007      	beq.n	800a294 <sbrk_aligned+0x38>
 800a284:	1a21      	subs	r1, r4, r0
 800a286:	4628      	mov	r0, r5
 800a288:	f000 f9d8 	bl	800a63c <_sbrk_r>
 800a28c:	3001      	adds	r0, #1
 800a28e:	d101      	bne.n	800a294 <sbrk_aligned+0x38>
 800a290:	f04f 34ff 	mov.w	r4, #4294967295
 800a294:	4620      	mov	r0, r4
 800a296:	bd70      	pop	{r4, r5, r6, pc}
 800a298:	200009c0 	.word	0x200009c0

0800a29c <_malloc_r>:
 800a29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a0:	1ccd      	adds	r5, r1, #3
 800a2a2:	f025 0503 	bic.w	r5, r5, #3
 800a2a6:	3508      	adds	r5, #8
 800a2a8:	2d0c      	cmp	r5, #12
 800a2aa:	bf38      	it	cc
 800a2ac:	250c      	movcc	r5, #12
 800a2ae:	2d00      	cmp	r5, #0
 800a2b0:	4607      	mov	r7, r0
 800a2b2:	db01      	blt.n	800a2b8 <_malloc_r+0x1c>
 800a2b4:	42a9      	cmp	r1, r5
 800a2b6:	d905      	bls.n	800a2c4 <_malloc_r+0x28>
 800a2b8:	230c      	movs	r3, #12
 800a2ba:	603b      	str	r3, [r7, #0]
 800a2bc:	2600      	movs	r6, #0
 800a2be:	4630      	mov	r0, r6
 800a2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c4:	4e2e      	ldr	r6, [pc, #184]	; (800a380 <_malloc_r+0xe4>)
 800a2c6:	f000 fa25 	bl	800a714 <__malloc_lock>
 800a2ca:	6833      	ldr	r3, [r6, #0]
 800a2cc:	461c      	mov	r4, r3
 800a2ce:	bb34      	cbnz	r4, 800a31e <_malloc_r+0x82>
 800a2d0:	4629      	mov	r1, r5
 800a2d2:	4638      	mov	r0, r7
 800a2d4:	f7ff ffc2 	bl	800a25c <sbrk_aligned>
 800a2d8:	1c43      	adds	r3, r0, #1
 800a2da:	4604      	mov	r4, r0
 800a2dc:	d14d      	bne.n	800a37a <_malloc_r+0xde>
 800a2de:	6834      	ldr	r4, [r6, #0]
 800a2e0:	4626      	mov	r6, r4
 800a2e2:	2e00      	cmp	r6, #0
 800a2e4:	d140      	bne.n	800a368 <_malloc_r+0xcc>
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	4631      	mov	r1, r6
 800a2ea:	4638      	mov	r0, r7
 800a2ec:	eb04 0803 	add.w	r8, r4, r3
 800a2f0:	f000 f9a4 	bl	800a63c <_sbrk_r>
 800a2f4:	4580      	cmp	r8, r0
 800a2f6:	d13a      	bne.n	800a36e <_malloc_r+0xd2>
 800a2f8:	6821      	ldr	r1, [r4, #0]
 800a2fa:	3503      	adds	r5, #3
 800a2fc:	1a6d      	subs	r5, r5, r1
 800a2fe:	f025 0503 	bic.w	r5, r5, #3
 800a302:	3508      	adds	r5, #8
 800a304:	2d0c      	cmp	r5, #12
 800a306:	bf38      	it	cc
 800a308:	250c      	movcc	r5, #12
 800a30a:	4629      	mov	r1, r5
 800a30c:	4638      	mov	r0, r7
 800a30e:	f7ff ffa5 	bl	800a25c <sbrk_aligned>
 800a312:	3001      	adds	r0, #1
 800a314:	d02b      	beq.n	800a36e <_malloc_r+0xd2>
 800a316:	6823      	ldr	r3, [r4, #0]
 800a318:	442b      	add	r3, r5
 800a31a:	6023      	str	r3, [r4, #0]
 800a31c:	e00e      	b.n	800a33c <_malloc_r+0xa0>
 800a31e:	6822      	ldr	r2, [r4, #0]
 800a320:	1b52      	subs	r2, r2, r5
 800a322:	d41e      	bmi.n	800a362 <_malloc_r+0xc6>
 800a324:	2a0b      	cmp	r2, #11
 800a326:	d916      	bls.n	800a356 <_malloc_r+0xba>
 800a328:	1961      	adds	r1, r4, r5
 800a32a:	42a3      	cmp	r3, r4
 800a32c:	6025      	str	r5, [r4, #0]
 800a32e:	bf18      	it	ne
 800a330:	6059      	strne	r1, [r3, #4]
 800a332:	6863      	ldr	r3, [r4, #4]
 800a334:	bf08      	it	eq
 800a336:	6031      	streq	r1, [r6, #0]
 800a338:	5162      	str	r2, [r4, r5]
 800a33a:	604b      	str	r3, [r1, #4]
 800a33c:	4638      	mov	r0, r7
 800a33e:	f104 060b 	add.w	r6, r4, #11
 800a342:	f000 f9ed 	bl	800a720 <__malloc_unlock>
 800a346:	f026 0607 	bic.w	r6, r6, #7
 800a34a:	1d23      	adds	r3, r4, #4
 800a34c:	1af2      	subs	r2, r6, r3
 800a34e:	d0b6      	beq.n	800a2be <_malloc_r+0x22>
 800a350:	1b9b      	subs	r3, r3, r6
 800a352:	50a3      	str	r3, [r4, r2]
 800a354:	e7b3      	b.n	800a2be <_malloc_r+0x22>
 800a356:	6862      	ldr	r2, [r4, #4]
 800a358:	42a3      	cmp	r3, r4
 800a35a:	bf0c      	ite	eq
 800a35c:	6032      	streq	r2, [r6, #0]
 800a35e:	605a      	strne	r2, [r3, #4]
 800a360:	e7ec      	b.n	800a33c <_malloc_r+0xa0>
 800a362:	4623      	mov	r3, r4
 800a364:	6864      	ldr	r4, [r4, #4]
 800a366:	e7b2      	b.n	800a2ce <_malloc_r+0x32>
 800a368:	4634      	mov	r4, r6
 800a36a:	6876      	ldr	r6, [r6, #4]
 800a36c:	e7b9      	b.n	800a2e2 <_malloc_r+0x46>
 800a36e:	230c      	movs	r3, #12
 800a370:	603b      	str	r3, [r7, #0]
 800a372:	4638      	mov	r0, r7
 800a374:	f000 f9d4 	bl	800a720 <__malloc_unlock>
 800a378:	e7a1      	b.n	800a2be <_malloc_r+0x22>
 800a37a:	6025      	str	r5, [r4, #0]
 800a37c:	e7de      	b.n	800a33c <_malloc_r+0xa0>
 800a37e:	bf00      	nop
 800a380:	200009bc 	.word	0x200009bc

0800a384 <__ssputs_r>:
 800a384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a388:	688e      	ldr	r6, [r1, #8]
 800a38a:	429e      	cmp	r6, r3
 800a38c:	4682      	mov	sl, r0
 800a38e:	460c      	mov	r4, r1
 800a390:	4690      	mov	r8, r2
 800a392:	461f      	mov	r7, r3
 800a394:	d838      	bhi.n	800a408 <__ssputs_r+0x84>
 800a396:	898a      	ldrh	r2, [r1, #12]
 800a398:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a39c:	d032      	beq.n	800a404 <__ssputs_r+0x80>
 800a39e:	6825      	ldr	r5, [r4, #0]
 800a3a0:	6909      	ldr	r1, [r1, #16]
 800a3a2:	eba5 0901 	sub.w	r9, r5, r1
 800a3a6:	6965      	ldr	r5, [r4, #20]
 800a3a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	444b      	add	r3, r9
 800a3b4:	106d      	asrs	r5, r5, #1
 800a3b6:	429d      	cmp	r5, r3
 800a3b8:	bf38      	it	cc
 800a3ba:	461d      	movcc	r5, r3
 800a3bc:	0553      	lsls	r3, r2, #21
 800a3be:	d531      	bpl.n	800a424 <__ssputs_r+0xa0>
 800a3c0:	4629      	mov	r1, r5
 800a3c2:	f7ff ff6b 	bl	800a29c <_malloc_r>
 800a3c6:	4606      	mov	r6, r0
 800a3c8:	b950      	cbnz	r0, 800a3e0 <__ssputs_r+0x5c>
 800a3ca:	230c      	movs	r3, #12
 800a3cc:	f8ca 3000 	str.w	r3, [sl]
 800a3d0:	89a3      	ldrh	r3, [r4, #12]
 800a3d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3d6:	81a3      	strh	r3, [r4, #12]
 800a3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e0:	6921      	ldr	r1, [r4, #16]
 800a3e2:	464a      	mov	r2, r9
 800a3e4:	f7ff fb46 	bl	8009a74 <memcpy>
 800a3e8:	89a3      	ldrh	r3, [r4, #12]
 800a3ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3f2:	81a3      	strh	r3, [r4, #12]
 800a3f4:	6126      	str	r6, [r4, #16]
 800a3f6:	6165      	str	r5, [r4, #20]
 800a3f8:	444e      	add	r6, r9
 800a3fa:	eba5 0509 	sub.w	r5, r5, r9
 800a3fe:	6026      	str	r6, [r4, #0]
 800a400:	60a5      	str	r5, [r4, #8]
 800a402:	463e      	mov	r6, r7
 800a404:	42be      	cmp	r6, r7
 800a406:	d900      	bls.n	800a40a <__ssputs_r+0x86>
 800a408:	463e      	mov	r6, r7
 800a40a:	6820      	ldr	r0, [r4, #0]
 800a40c:	4632      	mov	r2, r6
 800a40e:	4641      	mov	r1, r8
 800a410:	f000 f966 	bl	800a6e0 <memmove>
 800a414:	68a3      	ldr	r3, [r4, #8]
 800a416:	1b9b      	subs	r3, r3, r6
 800a418:	60a3      	str	r3, [r4, #8]
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	4433      	add	r3, r6
 800a41e:	6023      	str	r3, [r4, #0]
 800a420:	2000      	movs	r0, #0
 800a422:	e7db      	b.n	800a3dc <__ssputs_r+0x58>
 800a424:	462a      	mov	r2, r5
 800a426:	f000 f981 	bl	800a72c <_realloc_r>
 800a42a:	4606      	mov	r6, r0
 800a42c:	2800      	cmp	r0, #0
 800a42e:	d1e1      	bne.n	800a3f4 <__ssputs_r+0x70>
 800a430:	6921      	ldr	r1, [r4, #16]
 800a432:	4650      	mov	r0, sl
 800a434:	f7ff fec6 	bl	800a1c4 <_free_r>
 800a438:	e7c7      	b.n	800a3ca <__ssputs_r+0x46>
	...

0800a43c <_svfiprintf_r>:
 800a43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a440:	4698      	mov	r8, r3
 800a442:	898b      	ldrh	r3, [r1, #12]
 800a444:	061b      	lsls	r3, r3, #24
 800a446:	b09d      	sub	sp, #116	; 0x74
 800a448:	4607      	mov	r7, r0
 800a44a:	460d      	mov	r5, r1
 800a44c:	4614      	mov	r4, r2
 800a44e:	d50e      	bpl.n	800a46e <_svfiprintf_r+0x32>
 800a450:	690b      	ldr	r3, [r1, #16]
 800a452:	b963      	cbnz	r3, 800a46e <_svfiprintf_r+0x32>
 800a454:	2140      	movs	r1, #64	; 0x40
 800a456:	f7ff ff21 	bl	800a29c <_malloc_r>
 800a45a:	6028      	str	r0, [r5, #0]
 800a45c:	6128      	str	r0, [r5, #16]
 800a45e:	b920      	cbnz	r0, 800a46a <_svfiprintf_r+0x2e>
 800a460:	230c      	movs	r3, #12
 800a462:	603b      	str	r3, [r7, #0]
 800a464:	f04f 30ff 	mov.w	r0, #4294967295
 800a468:	e0d1      	b.n	800a60e <_svfiprintf_r+0x1d2>
 800a46a:	2340      	movs	r3, #64	; 0x40
 800a46c:	616b      	str	r3, [r5, #20]
 800a46e:	2300      	movs	r3, #0
 800a470:	9309      	str	r3, [sp, #36]	; 0x24
 800a472:	2320      	movs	r3, #32
 800a474:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a478:	f8cd 800c 	str.w	r8, [sp, #12]
 800a47c:	2330      	movs	r3, #48	; 0x30
 800a47e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a628 <_svfiprintf_r+0x1ec>
 800a482:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a486:	f04f 0901 	mov.w	r9, #1
 800a48a:	4623      	mov	r3, r4
 800a48c:	469a      	mov	sl, r3
 800a48e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a492:	b10a      	cbz	r2, 800a498 <_svfiprintf_r+0x5c>
 800a494:	2a25      	cmp	r2, #37	; 0x25
 800a496:	d1f9      	bne.n	800a48c <_svfiprintf_r+0x50>
 800a498:	ebba 0b04 	subs.w	fp, sl, r4
 800a49c:	d00b      	beq.n	800a4b6 <_svfiprintf_r+0x7a>
 800a49e:	465b      	mov	r3, fp
 800a4a0:	4622      	mov	r2, r4
 800a4a2:	4629      	mov	r1, r5
 800a4a4:	4638      	mov	r0, r7
 800a4a6:	f7ff ff6d 	bl	800a384 <__ssputs_r>
 800a4aa:	3001      	adds	r0, #1
 800a4ac:	f000 80aa 	beq.w	800a604 <_svfiprintf_r+0x1c8>
 800a4b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4b2:	445a      	add	r2, fp
 800a4b4:	9209      	str	r2, [sp, #36]	; 0x24
 800a4b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	f000 80a2 	beq.w	800a604 <_svfiprintf_r+0x1c8>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4ca:	f10a 0a01 	add.w	sl, sl, #1
 800a4ce:	9304      	str	r3, [sp, #16]
 800a4d0:	9307      	str	r3, [sp, #28]
 800a4d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4d6:	931a      	str	r3, [sp, #104]	; 0x68
 800a4d8:	4654      	mov	r4, sl
 800a4da:	2205      	movs	r2, #5
 800a4dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4e0:	4851      	ldr	r0, [pc, #324]	; (800a628 <_svfiprintf_r+0x1ec>)
 800a4e2:	f7f5 fe9d 	bl	8000220 <memchr>
 800a4e6:	9a04      	ldr	r2, [sp, #16]
 800a4e8:	b9d8      	cbnz	r0, 800a522 <_svfiprintf_r+0xe6>
 800a4ea:	06d0      	lsls	r0, r2, #27
 800a4ec:	bf44      	itt	mi
 800a4ee:	2320      	movmi	r3, #32
 800a4f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4f4:	0711      	lsls	r1, r2, #28
 800a4f6:	bf44      	itt	mi
 800a4f8:	232b      	movmi	r3, #43	; 0x2b
 800a4fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a502:	2b2a      	cmp	r3, #42	; 0x2a
 800a504:	d015      	beq.n	800a532 <_svfiprintf_r+0xf6>
 800a506:	9a07      	ldr	r2, [sp, #28]
 800a508:	4654      	mov	r4, sl
 800a50a:	2000      	movs	r0, #0
 800a50c:	f04f 0c0a 	mov.w	ip, #10
 800a510:	4621      	mov	r1, r4
 800a512:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a516:	3b30      	subs	r3, #48	; 0x30
 800a518:	2b09      	cmp	r3, #9
 800a51a:	d94e      	bls.n	800a5ba <_svfiprintf_r+0x17e>
 800a51c:	b1b0      	cbz	r0, 800a54c <_svfiprintf_r+0x110>
 800a51e:	9207      	str	r2, [sp, #28]
 800a520:	e014      	b.n	800a54c <_svfiprintf_r+0x110>
 800a522:	eba0 0308 	sub.w	r3, r0, r8
 800a526:	fa09 f303 	lsl.w	r3, r9, r3
 800a52a:	4313      	orrs	r3, r2
 800a52c:	9304      	str	r3, [sp, #16]
 800a52e:	46a2      	mov	sl, r4
 800a530:	e7d2      	b.n	800a4d8 <_svfiprintf_r+0x9c>
 800a532:	9b03      	ldr	r3, [sp, #12]
 800a534:	1d19      	adds	r1, r3, #4
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	9103      	str	r1, [sp, #12]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	bfbb      	ittet	lt
 800a53e:	425b      	neglt	r3, r3
 800a540:	f042 0202 	orrlt.w	r2, r2, #2
 800a544:	9307      	strge	r3, [sp, #28]
 800a546:	9307      	strlt	r3, [sp, #28]
 800a548:	bfb8      	it	lt
 800a54a:	9204      	strlt	r2, [sp, #16]
 800a54c:	7823      	ldrb	r3, [r4, #0]
 800a54e:	2b2e      	cmp	r3, #46	; 0x2e
 800a550:	d10c      	bne.n	800a56c <_svfiprintf_r+0x130>
 800a552:	7863      	ldrb	r3, [r4, #1]
 800a554:	2b2a      	cmp	r3, #42	; 0x2a
 800a556:	d135      	bne.n	800a5c4 <_svfiprintf_r+0x188>
 800a558:	9b03      	ldr	r3, [sp, #12]
 800a55a:	1d1a      	adds	r2, r3, #4
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	9203      	str	r2, [sp, #12]
 800a560:	2b00      	cmp	r3, #0
 800a562:	bfb8      	it	lt
 800a564:	f04f 33ff 	movlt.w	r3, #4294967295
 800a568:	3402      	adds	r4, #2
 800a56a:	9305      	str	r3, [sp, #20]
 800a56c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a638 <_svfiprintf_r+0x1fc>
 800a570:	7821      	ldrb	r1, [r4, #0]
 800a572:	2203      	movs	r2, #3
 800a574:	4650      	mov	r0, sl
 800a576:	f7f5 fe53 	bl	8000220 <memchr>
 800a57a:	b140      	cbz	r0, 800a58e <_svfiprintf_r+0x152>
 800a57c:	2340      	movs	r3, #64	; 0x40
 800a57e:	eba0 000a 	sub.w	r0, r0, sl
 800a582:	fa03 f000 	lsl.w	r0, r3, r0
 800a586:	9b04      	ldr	r3, [sp, #16]
 800a588:	4303      	orrs	r3, r0
 800a58a:	3401      	adds	r4, #1
 800a58c:	9304      	str	r3, [sp, #16]
 800a58e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a592:	4826      	ldr	r0, [pc, #152]	; (800a62c <_svfiprintf_r+0x1f0>)
 800a594:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a598:	2206      	movs	r2, #6
 800a59a:	f7f5 fe41 	bl	8000220 <memchr>
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	d038      	beq.n	800a614 <_svfiprintf_r+0x1d8>
 800a5a2:	4b23      	ldr	r3, [pc, #140]	; (800a630 <_svfiprintf_r+0x1f4>)
 800a5a4:	bb1b      	cbnz	r3, 800a5ee <_svfiprintf_r+0x1b2>
 800a5a6:	9b03      	ldr	r3, [sp, #12]
 800a5a8:	3307      	adds	r3, #7
 800a5aa:	f023 0307 	bic.w	r3, r3, #7
 800a5ae:	3308      	adds	r3, #8
 800a5b0:	9303      	str	r3, [sp, #12]
 800a5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b4:	4433      	add	r3, r6
 800a5b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a5b8:	e767      	b.n	800a48a <_svfiprintf_r+0x4e>
 800a5ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5be:	460c      	mov	r4, r1
 800a5c0:	2001      	movs	r0, #1
 800a5c2:	e7a5      	b.n	800a510 <_svfiprintf_r+0xd4>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	3401      	adds	r4, #1
 800a5c8:	9305      	str	r3, [sp, #20]
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	f04f 0c0a 	mov.w	ip, #10
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5d6:	3a30      	subs	r2, #48	; 0x30
 800a5d8:	2a09      	cmp	r2, #9
 800a5da:	d903      	bls.n	800a5e4 <_svfiprintf_r+0x1a8>
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d0c5      	beq.n	800a56c <_svfiprintf_r+0x130>
 800a5e0:	9105      	str	r1, [sp, #20]
 800a5e2:	e7c3      	b.n	800a56c <_svfiprintf_r+0x130>
 800a5e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5e8:	4604      	mov	r4, r0
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e7f0      	b.n	800a5d0 <_svfiprintf_r+0x194>
 800a5ee:	ab03      	add	r3, sp, #12
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	462a      	mov	r2, r5
 800a5f4:	4b0f      	ldr	r3, [pc, #60]	; (800a634 <_svfiprintf_r+0x1f8>)
 800a5f6:	a904      	add	r1, sp, #16
 800a5f8:	4638      	mov	r0, r7
 800a5fa:	f7fd ff3d 	bl	8008478 <_printf_float>
 800a5fe:	1c42      	adds	r2, r0, #1
 800a600:	4606      	mov	r6, r0
 800a602:	d1d6      	bne.n	800a5b2 <_svfiprintf_r+0x176>
 800a604:	89ab      	ldrh	r3, [r5, #12]
 800a606:	065b      	lsls	r3, r3, #25
 800a608:	f53f af2c 	bmi.w	800a464 <_svfiprintf_r+0x28>
 800a60c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a60e:	b01d      	add	sp, #116	; 0x74
 800a610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a614:	ab03      	add	r3, sp, #12
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	462a      	mov	r2, r5
 800a61a:	4b06      	ldr	r3, [pc, #24]	; (800a634 <_svfiprintf_r+0x1f8>)
 800a61c:	a904      	add	r1, sp, #16
 800a61e:	4638      	mov	r0, r7
 800a620:	f7fe f9ce 	bl	80089c0 <_printf_i>
 800a624:	e7eb      	b.n	800a5fe <_svfiprintf_r+0x1c2>
 800a626:	bf00      	nop
 800a628:	0800b5ac 	.word	0x0800b5ac
 800a62c:	0800b5b6 	.word	0x0800b5b6
 800a630:	08008479 	.word	0x08008479
 800a634:	0800a385 	.word	0x0800a385
 800a638:	0800b5b2 	.word	0x0800b5b2

0800a63c <_sbrk_r>:
 800a63c:	b538      	push	{r3, r4, r5, lr}
 800a63e:	4d06      	ldr	r5, [pc, #24]	; (800a658 <_sbrk_r+0x1c>)
 800a640:	2300      	movs	r3, #0
 800a642:	4604      	mov	r4, r0
 800a644:	4608      	mov	r0, r1
 800a646:	602b      	str	r3, [r5, #0]
 800a648:	f7f8 f8ba 	bl	80027c0 <_sbrk>
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	d102      	bne.n	800a656 <_sbrk_r+0x1a>
 800a650:	682b      	ldr	r3, [r5, #0]
 800a652:	b103      	cbz	r3, 800a656 <_sbrk_r+0x1a>
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	bd38      	pop	{r3, r4, r5, pc}
 800a658:	200009c4 	.word	0x200009c4

0800a65c <__assert_func>:
 800a65c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a65e:	4614      	mov	r4, r2
 800a660:	461a      	mov	r2, r3
 800a662:	4b09      	ldr	r3, [pc, #36]	; (800a688 <__assert_func+0x2c>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4605      	mov	r5, r0
 800a668:	68d8      	ldr	r0, [r3, #12]
 800a66a:	b14c      	cbz	r4, 800a680 <__assert_func+0x24>
 800a66c:	4b07      	ldr	r3, [pc, #28]	; (800a68c <__assert_func+0x30>)
 800a66e:	9100      	str	r1, [sp, #0]
 800a670:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a674:	4906      	ldr	r1, [pc, #24]	; (800a690 <__assert_func+0x34>)
 800a676:	462b      	mov	r3, r5
 800a678:	f000 f80e 	bl	800a698 <fiprintf>
 800a67c:	f000 faac 	bl	800abd8 <abort>
 800a680:	4b04      	ldr	r3, [pc, #16]	; (800a694 <__assert_func+0x38>)
 800a682:	461c      	mov	r4, r3
 800a684:	e7f3      	b.n	800a66e <__assert_func+0x12>
 800a686:	bf00      	nop
 800a688:	20000028 	.word	0x20000028
 800a68c:	0800b5bd 	.word	0x0800b5bd
 800a690:	0800b5ca 	.word	0x0800b5ca
 800a694:	0800b5f8 	.word	0x0800b5f8

0800a698 <fiprintf>:
 800a698:	b40e      	push	{r1, r2, r3}
 800a69a:	b503      	push	{r0, r1, lr}
 800a69c:	4601      	mov	r1, r0
 800a69e:	ab03      	add	r3, sp, #12
 800a6a0:	4805      	ldr	r0, [pc, #20]	; (800a6b8 <fiprintf+0x20>)
 800a6a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6a6:	6800      	ldr	r0, [r0, #0]
 800a6a8:	9301      	str	r3, [sp, #4]
 800a6aa:	f000 f897 	bl	800a7dc <_vfiprintf_r>
 800a6ae:	b002      	add	sp, #8
 800a6b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6b4:	b003      	add	sp, #12
 800a6b6:	4770      	bx	lr
 800a6b8:	20000028 	.word	0x20000028

0800a6bc <__ascii_mbtowc>:
 800a6bc:	b082      	sub	sp, #8
 800a6be:	b901      	cbnz	r1, 800a6c2 <__ascii_mbtowc+0x6>
 800a6c0:	a901      	add	r1, sp, #4
 800a6c2:	b142      	cbz	r2, 800a6d6 <__ascii_mbtowc+0x1a>
 800a6c4:	b14b      	cbz	r3, 800a6da <__ascii_mbtowc+0x1e>
 800a6c6:	7813      	ldrb	r3, [r2, #0]
 800a6c8:	600b      	str	r3, [r1, #0]
 800a6ca:	7812      	ldrb	r2, [r2, #0]
 800a6cc:	1e10      	subs	r0, r2, #0
 800a6ce:	bf18      	it	ne
 800a6d0:	2001      	movne	r0, #1
 800a6d2:	b002      	add	sp, #8
 800a6d4:	4770      	bx	lr
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	e7fb      	b.n	800a6d2 <__ascii_mbtowc+0x16>
 800a6da:	f06f 0001 	mvn.w	r0, #1
 800a6de:	e7f8      	b.n	800a6d2 <__ascii_mbtowc+0x16>

0800a6e0 <memmove>:
 800a6e0:	4288      	cmp	r0, r1
 800a6e2:	b510      	push	{r4, lr}
 800a6e4:	eb01 0402 	add.w	r4, r1, r2
 800a6e8:	d902      	bls.n	800a6f0 <memmove+0x10>
 800a6ea:	4284      	cmp	r4, r0
 800a6ec:	4623      	mov	r3, r4
 800a6ee:	d807      	bhi.n	800a700 <memmove+0x20>
 800a6f0:	1e43      	subs	r3, r0, #1
 800a6f2:	42a1      	cmp	r1, r4
 800a6f4:	d008      	beq.n	800a708 <memmove+0x28>
 800a6f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6fe:	e7f8      	b.n	800a6f2 <memmove+0x12>
 800a700:	4402      	add	r2, r0
 800a702:	4601      	mov	r1, r0
 800a704:	428a      	cmp	r2, r1
 800a706:	d100      	bne.n	800a70a <memmove+0x2a>
 800a708:	bd10      	pop	{r4, pc}
 800a70a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a70e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a712:	e7f7      	b.n	800a704 <memmove+0x24>

0800a714 <__malloc_lock>:
 800a714:	4801      	ldr	r0, [pc, #4]	; (800a71c <__malloc_lock+0x8>)
 800a716:	f000 bc1f 	b.w	800af58 <__retarget_lock_acquire_recursive>
 800a71a:	bf00      	nop
 800a71c:	200009c8 	.word	0x200009c8

0800a720 <__malloc_unlock>:
 800a720:	4801      	ldr	r0, [pc, #4]	; (800a728 <__malloc_unlock+0x8>)
 800a722:	f000 bc1a 	b.w	800af5a <__retarget_lock_release_recursive>
 800a726:	bf00      	nop
 800a728:	200009c8 	.word	0x200009c8

0800a72c <_realloc_r>:
 800a72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a730:	4680      	mov	r8, r0
 800a732:	4614      	mov	r4, r2
 800a734:	460e      	mov	r6, r1
 800a736:	b921      	cbnz	r1, 800a742 <_realloc_r+0x16>
 800a738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a73c:	4611      	mov	r1, r2
 800a73e:	f7ff bdad 	b.w	800a29c <_malloc_r>
 800a742:	b92a      	cbnz	r2, 800a750 <_realloc_r+0x24>
 800a744:	f7ff fd3e 	bl	800a1c4 <_free_r>
 800a748:	4625      	mov	r5, r4
 800a74a:	4628      	mov	r0, r5
 800a74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a750:	f000 fc6a 	bl	800b028 <_malloc_usable_size_r>
 800a754:	4284      	cmp	r4, r0
 800a756:	4607      	mov	r7, r0
 800a758:	d802      	bhi.n	800a760 <_realloc_r+0x34>
 800a75a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a75e:	d812      	bhi.n	800a786 <_realloc_r+0x5a>
 800a760:	4621      	mov	r1, r4
 800a762:	4640      	mov	r0, r8
 800a764:	f7ff fd9a 	bl	800a29c <_malloc_r>
 800a768:	4605      	mov	r5, r0
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d0ed      	beq.n	800a74a <_realloc_r+0x1e>
 800a76e:	42bc      	cmp	r4, r7
 800a770:	4622      	mov	r2, r4
 800a772:	4631      	mov	r1, r6
 800a774:	bf28      	it	cs
 800a776:	463a      	movcs	r2, r7
 800a778:	f7ff f97c 	bl	8009a74 <memcpy>
 800a77c:	4631      	mov	r1, r6
 800a77e:	4640      	mov	r0, r8
 800a780:	f7ff fd20 	bl	800a1c4 <_free_r>
 800a784:	e7e1      	b.n	800a74a <_realloc_r+0x1e>
 800a786:	4635      	mov	r5, r6
 800a788:	e7df      	b.n	800a74a <_realloc_r+0x1e>

0800a78a <__sfputc_r>:
 800a78a:	6893      	ldr	r3, [r2, #8]
 800a78c:	3b01      	subs	r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	b410      	push	{r4}
 800a792:	6093      	str	r3, [r2, #8]
 800a794:	da08      	bge.n	800a7a8 <__sfputc_r+0x1e>
 800a796:	6994      	ldr	r4, [r2, #24]
 800a798:	42a3      	cmp	r3, r4
 800a79a:	db01      	blt.n	800a7a0 <__sfputc_r+0x16>
 800a79c:	290a      	cmp	r1, #10
 800a79e:	d103      	bne.n	800a7a8 <__sfputc_r+0x1e>
 800a7a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7a4:	f000 b94a 	b.w	800aa3c <__swbuf_r>
 800a7a8:	6813      	ldr	r3, [r2, #0]
 800a7aa:	1c58      	adds	r0, r3, #1
 800a7ac:	6010      	str	r0, [r2, #0]
 800a7ae:	7019      	strb	r1, [r3, #0]
 800a7b0:	4608      	mov	r0, r1
 800a7b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <__sfputs_r>:
 800a7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	460f      	mov	r7, r1
 800a7be:	4614      	mov	r4, r2
 800a7c0:	18d5      	adds	r5, r2, r3
 800a7c2:	42ac      	cmp	r4, r5
 800a7c4:	d101      	bne.n	800a7ca <__sfputs_r+0x12>
 800a7c6:	2000      	movs	r0, #0
 800a7c8:	e007      	b.n	800a7da <__sfputs_r+0x22>
 800a7ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ce:	463a      	mov	r2, r7
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	f7ff ffda 	bl	800a78a <__sfputc_r>
 800a7d6:	1c43      	adds	r3, r0, #1
 800a7d8:	d1f3      	bne.n	800a7c2 <__sfputs_r+0xa>
 800a7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a7dc <_vfiprintf_r>:
 800a7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e0:	460d      	mov	r5, r1
 800a7e2:	b09d      	sub	sp, #116	; 0x74
 800a7e4:	4614      	mov	r4, r2
 800a7e6:	4698      	mov	r8, r3
 800a7e8:	4606      	mov	r6, r0
 800a7ea:	b118      	cbz	r0, 800a7f4 <_vfiprintf_r+0x18>
 800a7ec:	6983      	ldr	r3, [r0, #24]
 800a7ee:	b90b      	cbnz	r3, 800a7f4 <_vfiprintf_r+0x18>
 800a7f0:	f000 fb14 	bl	800ae1c <__sinit>
 800a7f4:	4b89      	ldr	r3, [pc, #548]	; (800aa1c <_vfiprintf_r+0x240>)
 800a7f6:	429d      	cmp	r5, r3
 800a7f8:	d11b      	bne.n	800a832 <_vfiprintf_r+0x56>
 800a7fa:	6875      	ldr	r5, [r6, #4]
 800a7fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7fe:	07d9      	lsls	r1, r3, #31
 800a800:	d405      	bmi.n	800a80e <_vfiprintf_r+0x32>
 800a802:	89ab      	ldrh	r3, [r5, #12]
 800a804:	059a      	lsls	r2, r3, #22
 800a806:	d402      	bmi.n	800a80e <_vfiprintf_r+0x32>
 800a808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a80a:	f000 fba5 	bl	800af58 <__retarget_lock_acquire_recursive>
 800a80e:	89ab      	ldrh	r3, [r5, #12]
 800a810:	071b      	lsls	r3, r3, #28
 800a812:	d501      	bpl.n	800a818 <_vfiprintf_r+0x3c>
 800a814:	692b      	ldr	r3, [r5, #16]
 800a816:	b9eb      	cbnz	r3, 800a854 <_vfiprintf_r+0x78>
 800a818:	4629      	mov	r1, r5
 800a81a:	4630      	mov	r0, r6
 800a81c:	f000 f96e 	bl	800aafc <__swsetup_r>
 800a820:	b1c0      	cbz	r0, 800a854 <_vfiprintf_r+0x78>
 800a822:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a824:	07dc      	lsls	r4, r3, #31
 800a826:	d50e      	bpl.n	800a846 <_vfiprintf_r+0x6a>
 800a828:	f04f 30ff 	mov.w	r0, #4294967295
 800a82c:	b01d      	add	sp, #116	; 0x74
 800a82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a832:	4b7b      	ldr	r3, [pc, #492]	; (800aa20 <_vfiprintf_r+0x244>)
 800a834:	429d      	cmp	r5, r3
 800a836:	d101      	bne.n	800a83c <_vfiprintf_r+0x60>
 800a838:	68b5      	ldr	r5, [r6, #8]
 800a83a:	e7df      	b.n	800a7fc <_vfiprintf_r+0x20>
 800a83c:	4b79      	ldr	r3, [pc, #484]	; (800aa24 <_vfiprintf_r+0x248>)
 800a83e:	429d      	cmp	r5, r3
 800a840:	bf08      	it	eq
 800a842:	68f5      	ldreq	r5, [r6, #12]
 800a844:	e7da      	b.n	800a7fc <_vfiprintf_r+0x20>
 800a846:	89ab      	ldrh	r3, [r5, #12]
 800a848:	0598      	lsls	r0, r3, #22
 800a84a:	d4ed      	bmi.n	800a828 <_vfiprintf_r+0x4c>
 800a84c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a84e:	f000 fb84 	bl	800af5a <__retarget_lock_release_recursive>
 800a852:	e7e9      	b.n	800a828 <_vfiprintf_r+0x4c>
 800a854:	2300      	movs	r3, #0
 800a856:	9309      	str	r3, [sp, #36]	; 0x24
 800a858:	2320      	movs	r3, #32
 800a85a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a85e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a862:	2330      	movs	r3, #48	; 0x30
 800a864:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa28 <_vfiprintf_r+0x24c>
 800a868:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a86c:	f04f 0901 	mov.w	r9, #1
 800a870:	4623      	mov	r3, r4
 800a872:	469a      	mov	sl, r3
 800a874:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a878:	b10a      	cbz	r2, 800a87e <_vfiprintf_r+0xa2>
 800a87a:	2a25      	cmp	r2, #37	; 0x25
 800a87c:	d1f9      	bne.n	800a872 <_vfiprintf_r+0x96>
 800a87e:	ebba 0b04 	subs.w	fp, sl, r4
 800a882:	d00b      	beq.n	800a89c <_vfiprintf_r+0xc0>
 800a884:	465b      	mov	r3, fp
 800a886:	4622      	mov	r2, r4
 800a888:	4629      	mov	r1, r5
 800a88a:	4630      	mov	r0, r6
 800a88c:	f7ff ff94 	bl	800a7b8 <__sfputs_r>
 800a890:	3001      	adds	r0, #1
 800a892:	f000 80aa 	beq.w	800a9ea <_vfiprintf_r+0x20e>
 800a896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a898:	445a      	add	r2, fp
 800a89a:	9209      	str	r2, [sp, #36]	; 0x24
 800a89c:	f89a 3000 	ldrb.w	r3, [sl]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f000 80a2 	beq.w	800a9ea <_vfiprintf_r+0x20e>
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8b0:	f10a 0a01 	add.w	sl, sl, #1
 800a8b4:	9304      	str	r3, [sp, #16]
 800a8b6:	9307      	str	r3, [sp, #28]
 800a8b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8bc:	931a      	str	r3, [sp, #104]	; 0x68
 800a8be:	4654      	mov	r4, sl
 800a8c0:	2205      	movs	r2, #5
 800a8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c6:	4858      	ldr	r0, [pc, #352]	; (800aa28 <_vfiprintf_r+0x24c>)
 800a8c8:	f7f5 fcaa 	bl	8000220 <memchr>
 800a8cc:	9a04      	ldr	r2, [sp, #16]
 800a8ce:	b9d8      	cbnz	r0, 800a908 <_vfiprintf_r+0x12c>
 800a8d0:	06d1      	lsls	r1, r2, #27
 800a8d2:	bf44      	itt	mi
 800a8d4:	2320      	movmi	r3, #32
 800a8d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8da:	0713      	lsls	r3, r2, #28
 800a8dc:	bf44      	itt	mi
 800a8de:	232b      	movmi	r3, #43	; 0x2b
 800a8e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a8ea:	d015      	beq.n	800a918 <_vfiprintf_r+0x13c>
 800a8ec:	9a07      	ldr	r2, [sp, #28]
 800a8ee:	4654      	mov	r4, sl
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	f04f 0c0a 	mov.w	ip, #10
 800a8f6:	4621      	mov	r1, r4
 800a8f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8fc:	3b30      	subs	r3, #48	; 0x30
 800a8fe:	2b09      	cmp	r3, #9
 800a900:	d94e      	bls.n	800a9a0 <_vfiprintf_r+0x1c4>
 800a902:	b1b0      	cbz	r0, 800a932 <_vfiprintf_r+0x156>
 800a904:	9207      	str	r2, [sp, #28]
 800a906:	e014      	b.n	800a932 <_vfiprintf_r+0x156>
 800a908:	eba0 0308 	sub.w	r3, r0, r8
 800a90c:	fa09 f303 	lsl.w	r3, r9, r3
 800a910:	4313      	orrs	r3, r2
 800a912:	9304      	str	r3, [sp, #16]
 800a914:	46a2      	mov	sl, r4
 800a916:	e7d2      	b.n	800a8be <_vfiprintf_r+0xe2>
 800a918:	9b03      	ldr	r3, [sp, #12]
 800a91a:	1d19      	adds	r1, r3, #4
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	9103      	str	r1, [sp, #12]
 800a920:	2b00      	cmp	r3, #0
 800a922:	bfbb      	ittet	lt
 800a924:	425b      	neglt	r3, r3
 800a926:	f042 0202 	orrlt.w	r2, r2, #2
 800a92a:	9307      	strge	r3, [sp, #28]
 800a92c:	9307      	strlt	r3, [sp, #28]
 800a92e:	bfb8      	it	lt
 800a930:	9204      	strlt	r2, [sp, #16]
 800a932:	7823      	ldrb	r3, [r4, #0]
 800a934:	2b2e      	cmp	r3, #46	; 0x2e
 800a936:	d10c      	bne.n	800a952 <_vfiprintf_r+0x176>
 800a938:	7863      	ldrb	r3, [r4, #1]
 800a93a:	2b2a      	cmp	r3, #42	; 0x2a
 800a93c:	d135      	bne.n	800a9aa <_vfiprintf_r+0x1ce>
 800a93e:	9b03      	ldr	r3, [sp, #12]
 800a940:	1d1a      	adds	r2, r3, #4
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	9203      	str	r2, [sp, #12]
 800a946:	2b00      	cmp	r3, #0
 800a948:	bfb8      	it	lt
 800a94a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a94e:	3402      	adds	r4, #2
 800a950:	9305      	str	r3, [sp, #20]
 800a952:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa38 <_vfiprintf_r+0x25c>
 800a956:	7821      	ldrb	r1, [r4, #0]
 800a958:	2203      	movs	r2, #3
 800a95a:	4650      	mov	r0, sl
 800a95c:	f7f5 fc60 	bl	8000220 <memchr>
 800a960:	b140      	cbz	r0, 800a974 <_vfiprintf_r+0x198>
 800a962:	2340      	movs	r3, #64	; 0x40
 800a964:	eba0 000a 	sub.w	r0, r0, sl
 800a968:	fa03 f000 	lsl.w	r0, r3, r0
 800a96c:	9b04      	ldr	r3, [sp, #16]
 800a96e:	4303      	orrs	r3, r0
 800a970:	3401      	adds	r4, #1
 800a972:	9304      	str	r3, [sp, #16]
 800a974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a978:	482c      	ldr	r0, [pc, #176]	; (800aa2c <_vfiprintf_r+0x250>)
 800a97a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a97e:	2206      	movs	r2, #6
 800a980:	f7f5 fc4e 	bl	8000220 <memchr>
 800a984:	2800      	cmp	r0, #0
 800a986:	d03f      	beq.n	800aa08 <_vfiprintf_r+0x22c>
 800a988:	4b29      	ldr	r3, [pc, #164]	; (800aa30 <_vfiprintf_r+0x254>)
 800a98a:	bb1b      	cbnz	r3, 800a9d4 <_vfiprintf_r+0x1f8>
 800a98c:	9b03      	ldr	r3, [sp, #12]
 800a98e:	3307      	adds	r3, #7
 800a990:	f023 0307 	bic.w	r3, r3, #7
 800a994:	3308      	adds	r3, #8
 800a996:	9303      	str	r3, [sp, #12]
 800a998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a99a:	443b      	add	r3, r7
 800a99c:	9309      	str	r3, [sp, #36]	; 0x24
 800a99e:	e767      	b.n	800a870 <_vfiprintf_r+0x94>
 800a9a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9a4:	460c      	mov	r4, r1
 800a9a6:	2001      	movs	r0, #1
 800a9a8:	e7a5      	b.n	800a8f6 <_vfiprintf_r+0x11a>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	3401      	adds	r4, #1
 800a9ae:	9305      	str	r3, [sp, #20]
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	f04f 0c0a 	mov.w	ip, #10
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9bc:	3a30      	subs	r2, #48	; 0x30
 800a9be:	2a09      	cmp	r2, #9
 800a9c0:	d903      	bls.n	800a9ca <_vfiprintf_r+0x1ee>
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d0c5      	beq.n	800a952 <_vfiprintf_r+0x176>
 800a9c6:	9105      	str	r1, [sp, #20]
 800a9c8:	e7c3      	b.n	800a952 <_vfiprintf_r+0x176>
 800a9ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e7f0      	b.n	800a9b6 <_vfiprintf_r+0x1da>
 800a9d4:	ab03      	add	r3, sp, #12
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	462a      	mov	r2, r5
 800a9da:	4b16      	ldr	r3, [pc, #88]	; (800aa34 <_vfiprintf_r+0x258>)
 800a9dc:	a904      	add	r1, sp, #16
 800a9de:	4630      	mov	r0, r6
 800a9e0:	f7fd fd4a 	bl	8008478 <_printf_float>
 800a9e4:	4607      	mov	r7, r0
 800a9e6:	1c78      	adds	r0, r7, #1
 800a9e8:	d1d6      	bne.n	800a998 <_vfiprintf_r+0x1bc>
 800a9ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9ec:	07d9      	lsls	r1, r3, #31
 800a9ee:	d405      	bmi.n	800a9fc <_vfiprintf_r+0x220>
 800a9f0:	89ab      	ldrh	r3, [r5, #12]
 800a9f2:	059a      	lsls	r2, r3, #22
 800a9f4:	d402      	bmi.n	800a9fc <_vfiprintf_r+0x220>
 800a9f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9f8:	f000 faaf 	bl	800af5a <__retarget_lock_release_recursive>
 800a9fc:	89ab      	ldrh	r3, [r5, #12]
 800a9fe:	065b      	lsls	r3, r3, #25
 800aa00:	f53f af12 	bmi.w	800a828 <_vfiprintf_r+0x4c>
 800aa04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa06:	e711      	b.n	800a82c <_vfiprintf_r+0x50>
 800aa08:	ab03      	add	r3, sp, #12
 800aa0a:	9300      	str	r3, [sp, #0]
 800aa0c:	462a      	mov	r2, r5
 800aa0e:	4b09      	ldr	r3, [pc, #36]	; (800aa34 <_vfiprintf_r+0x258>)
 800aa10:	a904      	add	r1, sp, #16
 800aa12:	4630      	mov	r0, r6
 800aa14:	f7fd ffd4 	bl	80089c0 <_printf_i>
 800aa18:	e7e4      	b.n	800a9e4 <_vfiprintf_r+0x208>
 800aa1a:	bf00      	nop
 800aa1c:	0800b624 	.word	0x0800b624
 800aa20:	0800b644 	.word	0x0800b644
 800aa24:	0800b604 	.word	0x0800b604
 800aa28:	0800b5ac 	.word	0x0800b5ac
 800aa2c:	0800b5b6 	.word	0x0800b5b6
 800aa30:	08008479 	.word	0x08008479
 800aa34:	0800a7b9 	.word	0x0800a7b9
 800aa38:	0800b5b2 	.word	0x0800b5b2

0800aa3c <__swbuf_r>:
 800aa3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3e:	460e      	mov	r6, r1
 800aa40:	4614      	mov	r4, r2
 800aa42:	4605      	mov	r5, r0
 800aa44:	b118      	cbz	r0, 800aa4e <__swbuf_r+0x12>
 800aa46:	6983      	ldr	r3, [r0, #24]
 800aa48:	b90b      	cbnz	r3, 800aa4e <__swbuf_r+0x12>
 800aa4a:	f000 f9e7 	bl	800ae1c <__sinit>
 800aa4e:	4b21      	ldr	r3, [pc, #132]	; (800aad4 <__swbuf_r+0x98>)
 800aa50:	429c      	cmp	r4, r3
 800aa52:	d12b      	bne.n	800aaac <__swbuf_r+0x70>
 800aa54:	686c      	ldr	r4, [r5, #4]
 800aa56:	69a3      	ldr	r3, [r4, #24]
 800aa58:	60a3      	str	r3, [r4, #8]
 800aa5a:	89a3      	ldrh	r3, [r4, #12]
 800aa5c:	071a      	lsls	r2, r3, #28
 800aa5e:	d52f      	bpl.n	800aac0 <__swbuf_r+0x84>
 800aa60:	6923      	ldr	r3, [r4, #16]
 800aa62:	b36b      	cbz	r3, 800aac0 <__swbuf_r+0x84>
 800aa64:	6923      	ldr	r3, [r4, #16]
 800aa66:	6820      	ldr	r0, [r4, #0]
 800aa68:	1ac0      	subs	r0, r0, r3
 800aa6a:	6963      	ldr	r3, [r4, #20]
 800aa6c:	b2f6      	uxtb	r6, r6
 800aa6e:	4283      	cmp	r3, r0
 800aa70:	4637      	mov	r7, r6
 800aa72:	dc04      	bgt.n	800aa7e <__swbuf_r+0x42>
 800aa74:	4621      	mov	r1, r4
 800aa76:	4628      	mov	r0, r5
 800aa78:	f000 f93c 	bl	800acf4 <_fflush_r>
 800aa7c:	bb30      	cbnz	r0, 800aacc <__swbuf_r+0x90>
 800aa7e:	68a3      	ldr	r3, [r4, #8]
 800aa80:	3b01      	subs	r3, #1
 800aa82:	60a3      	str	r3, [r4, #8]
 800aa84:	6823      	ldr	r3, [r4, #0]
 800aa86:	1c5a      	adds	r2, r3, #1
 800aa88:	6022      	str	r2, [r4, #0]
 800aa8a:	701e      	strb	r6, [r3, #0]
 800aa8c:	6963      	ldr	r3, [r4, #20]
 800aa8e:	3001      	adds	r0, #1
 800aa90:	4283      	cmp	r3, r0
 800aa92:	d004      	beq.n	800aa9e <__swbuf_r+0x62>
 800aa94:	89a3      	ldrh	r3, [r4, #12]
 800aa96:	07db      	lsls	r3, r3, #31
 800aa98:	d506      	bpl.n	800aaa8 <__swbuf_r+0x6c>
 800aa9a:	2e0a      	cmp	r6, #10
 800aa9c:	d104      	bne.n	800aaa8 <__swbuf_r+0x6c>
 800aa9e:	4621      	mov	r1, r4
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	f000 f927 	bl	800acf4 <_fflush_r>
 800aaa6:	b988      	cbnz	r0, 800aacc <__swbuf_r+0x90>
 800aaa8:	4638      	mov	r0, r7
 800aaaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaac:	4b0a      	ldr	r3, [pc, #40]	; (800aad8 <__swbuf_r+0x9c>)
 800aaae:	429c      	cmp	r4, r3
 800aab0:	d101      	bne.n	800aab6 <__swbuf_r+0x7a>
 800aab2:	68ac      	ldr	r4, [r5, #8]
 800aab4:	e7cf      	b.n	800aa56 <__swbuf_r+0x1a>
 800aab6:	4b09      	ldr	r3, [pc, #36]	; (800aadc <__swbuf_r+0xa0>)
 800aab8:	429c      	cmp	r4, r3
 800aaba:	bf08      	it	eq
 800aabc:	68ec      	ldreq	r4, [r5, #12]
 800aabe:	e7ca      	b.n	800aa56 <__swbuf_r+0x1a>
 800aac0:	4621      	mov	r1, r4
 800aac2:	4628      	mov	r0, r5
 800aac4:	f000 f81a 	bl	800aafc <__swsetup_r>
 800aac8:	2800      	cmp	r0, #0
 800aaca:	d0cb      	beq.n	800aa64 <__swbuf_r+0x28>
 800aacc:	f04f 37ff 	mov.w	r7, #4294967295
 800aad0:	e7ea      	b.n	800aaa8 <__swbuf_r+0x6c>
 800aad2:	bf00      	nop
 800aad4:	0800b624 	.word	0x0800b624
 800aad8:	0800b644 	.word	0x0800b644
 800aadc:	0800b604 	.word	0x0800b604

0800aae0 <__ascii_wctomb>:
 800aae0:	b149      	cbz	r1, 800aaf6 <__ascii_wctomb+0x16>
 800aae2:	2aff      	cmp	r2, #255	; 0xff
 800aae4:	bf85      	ittet	hi
 800aae6:	238a      	movhi	r3, #138	; 0x8a
 800aae8:	6003      	strhi	r3, [r0, #0]
 800aaea:	700a      	strbls	r2, [r1, #0]
 800aaec:	f04f 30ff 	movhi.w	r0, #4294967295
 800aaf0:	bf98      	it	ls
 800aaf2:	2001      	movls	r0, #1
 800aaf4:	4770      	bx	lr
 800aaf6:	4608      	mov	r0, r1
 800aaf8:	4770      	bx	lr
	...

0800aafc <__swsetup_r>:
 800aafc:	4b32      	ldr	r3, [pc, #200]	; (800abc8 <__swsetup_r+0xcc>)
 800aafe:	b570      	push	{r4, r5, r6, lr}
 800ab00:	681d      	ldr	r5, [r3, #0]
 800ab02:	4606      	mov	r6, r0
 800ab04:	460c      	mov	r4, r1
 800ab06:	b125      	cbz	r5, 800ab12 <__swsetup_r+0x16>
 800ab08:	69ab      	ldr	r3, [r5, #24]
 800ab0a:	b913      	cbnz	r3, 800ab12 <__swsetup_r+0x16>
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	f000 f985 	bl	800ae1c <__sinit>
 800ab12:	4b2e      	ldr	r3, [pc, #184]	; (800abcc <__swsetup_r+0xd0>)
 800ab14:	429c      	cmp	r4, r3
 800ab16:	d10f      	bne.n	800ab38 <__swsetup_r+0x3c>
 800ab18:	686c      	ldr	r4, [r5, #4]
 800ab1a:	89a3      	ldrh	r3, [r4, #12]
 800ab1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab20:	0719      	lsls	r1, r3, #28
 800ab22:	d42c      	bmi.n	800ab7e <__swsetup_r+0x82>
 800ab24:	06dd      	lsls	r5, r3, #27
 800ab26:	d411      	bmi.n	800ab4c <__swsetup_r+0x50>
 800ab28:	2309      	movs	r3, #9
 800ab2a:	6033      	str	r3, [r6, #0]
 800ab2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab30:	81a3      	strh	r3, [r4, #12]
 800ab32:	f04f 30ff 	mov.w	r0, #4294967295
 800ab36:	e03e      	b.n	800abb6 <__swsetup_r+0xba>
 800ab38:	4b25      	ldr	r3, [pc, #148]	; (800abd0 <__swsetup_r+0xd4>)
 800ab3a:	429c      	cmp	r4, r3
 800ab3c:	d101      	bne.n	800ab42 <__swsetup_r+0x46>
 800ab3e:	68ac      	ldr	r4, [r5, #8]
 800ab40:	e7eb      	b.n	800ab1a <__swsetup_r+0x1e>
 800ab42:	4b24      	ldr	r3, [pc, #144]	; (800abd4 <__swsetup_r+0xd8>)
 800ab44:	429c      	cmp	r4, r3
 800ab46:	bf08      	it	eq
 800ab48:	68ec      	ldreq	r4, [r5, #12]
 800ab4a:	e7e6      	b.n	800ab1a <__swsetup_r+0x1e>
 800ab4c:	0758      	lsls	r0, r3, #29
 800ab4e:	d512      	bpl.n	800ab76 <__swsetup_r+0x7a>
 800ab50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab52:	b141      	cbz	r1, 800ab66 <__swsetup_r+0x6a>
 800ab54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab58:	4299      	cmp	r1, r3
 800ab5a:	d002      	beq.n	800ab62 <__swsetup_r+0x66>
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	f7ff fb31 	bl	800a1c4 <_free_r>
 800ab62:	2300      	movs	r3, #0
 800ab64:	6363      	str	r3, [r4, #52]	; 0x34
 800ab66:	89a3      	ldrh	r3, [r4, #12]
 800ab68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab6c:	81a3      	strh	r3, [r4, #12]
 800ab6e:	2300      	movs	r3, #0
 800ab70:	6063      	str	r3, [r4, #4]
 800ab72:	6923      	ldr	r3, [r4, #16]
 800ab74:	6023      	str	r3, [r4, #0]
 800ab76:	89a3      	ldrh	r3, [r4, #12]
 800ab78:	f043 0308 	orr.w	r3, r3, #8
 800ab7c:	81a3      	strh	r3, [r4, #12]
 800ab7e:	6923      	ldr	r3, [r4, #16]
 800ab80:	b94b      	cbnz	r3, 800ab96 <__swsetup_r+0x9a>
 800ab82:	89a3      	ldrh	r3, [r4, #12]
 800ab84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab8c:	d003      	beq.n	800ab96 <__swsetup_r+0x9a>
 800ab8e:	4621      	mov	r1, r4
 800ab90:	4630      	mov	r0, r6
 800ab92:	f000 fa09 	bl	800afa8 <__smakebuf_r>
 800ab96:	89a0      	ldrh	r0, [r4, #12]
 800ab98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab9c:	f010 0301 	ands.w	r3, r0, #1
 800aba0:	d00a      	beq.n	800abb8 <__swsetup_r+0xbc>
 800aba2:	2300      	movs	r3, #0
 800aba4:	60a3      	str	r3, [r4, #8]
 800aba6:	6963      	ldr	r3, [r4, #20]
 800aba8:	425b      	negs	r3, r3
 800abaa:	61a3      	str	r3, [r4, #24]
 800abac:	6923      	ldr	r3, [r4, #16]
 800abae:	b943      	cbnz	r3, 800abc2 <__swsetup_r+0xc6>
 800abb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800abb4:	d1ba      	bne.n	800ab2c <__swsetup_r+0x30>
 800abb6:	bd70      	pop	{r4, r5, r6, pc}
 800abb8:	0781      	lsls	r1, r0, #30
 800abba:	bf58      	it	pl
 800abbc:	6963      	ldrpl	r3, [r4, #20]
 800abbe:	60a3      	str	r3, [r4, #8]
 800abc0:	e7f4      	b.n	800abac <__swsetup_r+0xb0>
 800abc2:	2000      	movs	r0, #0
 800abc4:	e7f7      	b.n	800abb6 <__swsetup_r+0xba>
 800abc6:	bf00      	nop
 800abc8:	20000028 	.word	0x20000028
 800abcc:	0800b624 	.word	0x0800b624
 800abd0:	0800b644 	.word	0x0800b644
 800abd4:	0800b604 	.word	0x0800b604

0800abd8 <abort>:
 800abd8:	b508      	push	{r3, lr}
 800abda:	2006      	movs	r0, #6
 800abdc:	f000 fa54 	bl	800b088 <raise>
 800abe0:	2001      	movs	r0, #1
 800abe2:	f7f7 fd75 	bl	80026d0 <_exit>
	...

0800abe8 <__sflush_r>:
 800abe8:	898a      	ldrh	r2, [r1, #12]
 800abea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abee:	4605      	mov	r5, r0
 800abf0:	0710      	lsls	r0, r2, #28
 800abf2:	460c      	mov	r4, r1
 800abf4:	d458      	bmi.n	800aca8 <__sflush_r+0xc0>
 800abf6:	684b      	ldr	r3, [r1, #4]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	dc05      	bgt.n	800ac08 <__sflush_r+0x20>
 800abfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	dc02      	bgt.n	800ac08 <__sflush_r+0x20>
 800ac02:	2000      	movs	r0, #0
 800ac04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac0a:	2e00      	cmp	r6, #0
 800ac0c:	d0f9      	beq.n	800ac02 <__sflush_r+0x1a>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac14:	682f      	ldr	r7, [r5, #0]
 800ac16:	602b      	str	r3, [r5, #0]
 800ac18:	d032      	beq.n	800ac80 <__sflush_r+0x98>
 800ac1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac1c:	89a3      	ldrh	r3, [r4, #12]
 800ac1e:	075a      	lsls	r2, r3, #29
 800ac20:	d505      	bpl.n	800ac2e <__sflush_r+0x46>
 800ac22:	6863      	ldr	r3, [r4, #4]
 800ac24:	1ac0      	subs	r0, r0, r3
 800ac26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac28:	b10b      	cbz	r3, 800ac2e <__sflush_r+0x46>
 800ac2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac2c:	1ac0      	subs	r0, r0, r3
 800ac2e:	2300      	movs	r3, #0
 800ac30:	4602      	mov	r2, r0
 800ac32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac34:	6a21      	ldr	r1, [r4, #32]
 800ac36:	4628      	mov	r0, r5
 800ac38:	47b0      	blx	r6
 800ac3a:	1c43      	adds	r3, r0, #1
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	d106      	bne.n	800ac4e <__sflush_r+0x66>
 800ac40:	6829      	ldr	r1, [r5, #0]
 800ac42:	291d      	cmp	r1, #29
 800ac44:	d82c      	bhi.n	800aca0 <__sflush_r+0xb8>
 800ac46:	4a2a      	ldr	r2, [pc, #168]	; (800acf0 <__sflush_r+0x108>)
 800ac48:	40ca      	lsrs	r2, r1
 800ac4a:	07d6      	lsls	r6, r2, #31
 800ac4c:	d528      	bpl.n	800aca0 <__sflush_r+0xb8>
 800ac4e:	2200      	movs	r2, #0
 800ac50:	6062      	str	r2, [r4, #4]
 800ac52:	04d9      	lsls	r1, r3, #19
 800ac54:	6922      	ldr	r2, [r4, #16]
 800ac56:	6022      	str	r2, [r4, #0]
 800ac58:	d504      	bpl.n	800ac64 <__sflush_r+0x7c>
 800ac5a:	1c42      	adds	r2, r0, #1
 800ac5c:	d101      	bne.n	800ac62 <__sflush_r+0x7a>
 800ac5e:	682b      	ldr	r3, [r5, #0]
 800ac60:	b903      	cbnz	r3, 800ac64 <__sflush_r+0x7c>
 800ac62:	6560      	str	r0, [r4, #84]	; 0x54
 800ac64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac66:	602f      	str	r7, [r5, #0]
 800ac68:	2900      	cmp	r1, #0
 800ac6a:	d0ca      	beq.n	800ac02 <__sflush_r+0x1a>
 800ac6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac70:	4299      	cmp	r1, r3
 800ac72:	d002      	beq.n	800ac7a <__sflush_r+0x92>
 800ac74:	4628      	mov	r0, r5
 800ac76:	f7ff faa5 	bl	800a1c4 <_free_r>
 800ac7a:	2000      	movs	r0, #0
 800ac7c:	6360      	str	r0, [r4, #52]	; 0x34
 800ac7e:	e7c1      	b.n	800ac04 <__sflush_r+0x1c>
 800ac80:	6a21      	ldr	r1, [r4, #32]
 800ac82:	2301      	movs	r3, #1
 800ac84:	4628      	mov	r0, r5
 800ac86:	47b0      	blx	r6
 800ac88:	1c41      	adds	r1, r0, #1
 800ac8a:	d1c7      	bne.n	800ac1c <__sflush_r+0x34>
 800ac8c:	682b      	ldr	r3, [r5, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d0c4      	beq.n	800ac1c <__sflush_r+0x34>
 800ac92:	2b1d      	cmp	r3, #29
 800ac94:	d001      	beq.n	800ac9a <__sflush_r+0xb2>
 800ac96:	2b16      	cmp	r3, #22
 800ac98:	d101      	bne.n	800ac9e <__sflush_r+0xb6>
 800ac9a:	602f      	str	r7, [r5, #0]
 800ac9c:	e7b1      	b.n	800ac02 <__sflush_r+0x1a>
 800ac9e:	89a3      	ldrh	r3, [r4, #12]
 800aca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aca4:	81a3      	strh	r3, [r4, #12]
 800aca6:	e7ad      	b.n	800ac04 <__sflush_r+0x1c>
 800aca8:	690f      	ldr	r7, [r1, #16]
 800acaa:	2f00      	cmp	r7, #0
 800acac:	d0a9      	beq.n	800ac02 <__sflush_r+0x1a>
 800acae:	0793      	lsls	r3, r2, #30
 800acb0:	680e      	ldr	r6, [r1, #0]
 800acb2:	bf08      	it	eq
 800acb4:	694b      	ldreq	r3, [r1, #20]
 800acb6:	600f      	str	r7, [r1, #0]
 800acb8:	bf18      	it	ne
 800acba:	2300      	movne	r3, #0
 800acbc:	eba6 0807 	sub.w	r8, r6, r7
 800acc0:	608b      	str	r3, [r1, #8]
 800acc2:	f1b8 0f00 	cmp.w	r8, #0
 800acc6:	dd9c      	ble.n	800ac02 <__sflush_r+0x1a>
 800acc8:	6a21      	ldr	r1, [r4, #32]
 800acca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800accc:	4643      	mov	r3, r8
 800acce:	463a      	mov	r2, r7
 800acd0:	4628      	mov	r0, r5
 800acd2:	47b0      	blx	r6
 800acd4:	2800      	cmp	r0, #0
 800acd6:	dc06      	bgt.n	800ace6 <__sflush_r+0xfe>
 800acd8:	89a3      	ldrh	r3, [r4, #12]
 800acda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acde:	81a3      	strh	r3, [r4, #12]
 800ace0:	f04f 30ff 	mov.w	r0, #4294967295
 800ace4:	e78e      	b.n	800ac04 <__sflush_r+0x1c>
 800ace6:	4407      	add	r7, r0
 800ace8:	eba8 0800 	sub.w	r8, r8, r0
 800acec:	e7e9      	b.n	800acc2 <__sflush_r+0xda>
 800acee:	bf00      	nop
 800acf0:	20400001 	.word	0x20400001

0800acf4 <_fflush_r>:
 800acf4:	b538      	push	{r3, r4, r5, lr}
 800acf6:	690b      	ldr	r3, [r1, #16]
 800acf8:	4605      	mov	r5, r0
 800acfa:	460c      	mov	r4, r1
 800acfc:	b913      	cbnz	r3, 800ad04 <_fflush_r+0x10>
 800acfe:	2500      	movs	r5, #0
 800ad00:	4628      	mov	r0, r5
 800ad02:	bd38      	pop	{r3, r4, r5, pc}
 800ad04:	b118      	cbz	r0, 800ad0e <_fflush_r+0x1a>
 800ad06:	6983      	ldr	r3, [r0, #24]
 800ad08:	b90b      	cbnz	r3, 800ad0e <_fflush_r+0x1a>
 800ad0a:	f000 f887 	bl	800ae1c <__sinit>
 800ad0e:	4b14      	ldr	r3, [pc, #80]	; (800ad60 <_fflush_r+0x6c>)
 800ad10:	429c      	cmp	r4, r3
 800ad12:	d11b      	bne.n	800ad4c <_fflush_r+0x58>
 800ad14:	686c      	ldr	r4, [r5, #4]
 800ad16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d0ef      	beq.n	800acfe <_fflush_r+0xa>
 800ad1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad20:	07d0      	lsls	r0, r2, #31
 800ad22:	d404      	bmi.n	800ad2e <_fflush_r+0x3a>
 800ad24:	0599      	lsls	r1, r3, #22
 800ad26:	d402      	bmi.n	800ad2e <_fflush_r+0x3a>
 800ad28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad2a:	f000 f915 	bl	800af58 <__retarget_lock_acquire_recursive>
 800ad2e:	4628      	mov	r0, r5
 800ad30:	4621      	mov	r1, r4
 800ad32:	f7ff ff59 	bl	800abe8 <__sflush_r>
 800ad36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad38:	07da      	lsls	r2, r3, #31
 800ad3a:	4605      	mov	r5, r0
 800ad3c:	d4e0      	bmi.n	800ad00 <_fflush_r+0xc>
 800ad3e:	89a3      	ldrh	r3, [r4, #12]
 800ad40:	059b      	lsls	r3, r3, #22
 800ad42:	d4dd      	bmi.n	800ad00 <_fflush_r+0xc>
 800ad44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad46:	f000 f908 	bl	800af5a <__retarget_lock_release_recursive>
 800ad4a:	e7d9      	b.n	800ad00 <_fflush_r+0xc>
 800ad4c:	4b05      	ldr	r3, [pc, #20]	; (800ad64 <_fflush_r+0x70>)
 800ad4e:	429c      	cmp	r4, r3
 800ad50:	d101      	bne.n	800ad56 <_fflush_r+0x62>
 800ad52:	68ac      	ldr	r4, [r5, #8]
 800ad54:	e7df      	b.n	800ad16 <_fflush_r+0x22>
 800ad56:	4b04      	ldr	r3, [pc, #16]	; (800ad68 <_fflush_r+0x74>)
 800ad58:	429c      	cmp	r4, r3
 800ad5a:	bf08      	it	eq
 800ad5c:	68ec      	ldreq	r4, [r5, #12]
 800ad5e:	e7da      	b.n	800ad16 <_fflush_r+0x22>
 800ad60:	0800b624 	.word	0x0800b624
 800ad64:	0800b644 	.word	0x0800b644
 800ad68:	0800b604 	.word	0x0800b604

0800ad6c <std>:
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	b510      	push	{r4, lr}
 800ad70:	4604      	mov	r4, r0
 800ad72:	e9c0 3300 	strd	r3, r3, [r0]
 800ad76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad7a:	6083      	str	r3, [r0, #8]
 800ad7c:	8181      	strh	r1, [r0, #12]
 800ad7e:	6643      	str	r3, [r0, #100]	; 0x64
 800ad80:	81c2      	strh	r2, [r0, #14]
 800ad82:	6183      	str	r3, [r0, #24]
 800ad84:	4619      	mov	r1, r3
 800ad86:	2208      	movs	r2, #8
 800ad88:	305c      	adds	r0, #92	; 0x5c
 800ad8a:	f7fd facd 	bl	8008328 <memset>
 800ad8e:	4b05      	ldr	r3, [pc, #20]	; (800ada4 <std+0x38>)
 800ad90:	6263      	str	r3, [r4, #36]	; 0x24
 800ad92:	4b05      	ldr	r3, [pc, #20]	; (800ada8 <std+0x3c>)
 800ad94:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad96:	4b05      	ldr	r3, [pc, #20]	; (800adac <std+0x40>)
 800ad98:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad9a:	4b05      	ldr	r3, [pc, #20]	; (800adb0 <std+0x44>)
 800ad9c:	6224      	str	r4, [r4, #32]
 800ad9e:	6323      	str	r3, [r4, #48]	; 0x30
 800ada0:	bd10      	pop	{r4, pc}
 800ada2:	bf00      	nop
 800ada4:	0800b0c1 	.word	0x0800b0c1
 800ada8:	0800b0e3 	.word	0x0800b0e3
 800adac:	0800b11b 	.word	0x0800b11b
 800adb0:	0800b13f 	.word	0x0800b13f

0800adb4 <_cleanup_r>:
 800adb4:	4901      	ldr	r1, [pc, #4]	; (800adbc <_cleanup_r+0x8>)
 800adb6:	f000 b8af 	b.w	800af18 <_fwalk_reent>
 800adba:	bf00      	nop
 800adbc:	0800acf5 	.word	0x0800acf5

0800adc0 <__sfmoreglue>:
 800adc0:	b570      	push	{r4, r5, r6, lr}
 800adc2:	2268      	movs	r2, #104	; 0x68
 800adc4:	1e4d      	subs	r5, r1, #1
 800adc6:	4355      	muls	r5, r2
 800adc8:	460e      	mov	r6, r1
 800adca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800adce:	f7ff fa65 	bl	800a29c <_malloc_r>
 800add2:	4604      	mov	r4, r0
 800add4:	b140      	cbz	r0, 800ade8 <__sfmoreglue+0x28>
 800add6:	2100      	movs	r1, #0
 800add8:	e9c0 1600 	strd	r1, r6, [r0]
 800addc:	300c      	adds	r0, #12
 800adde:	60a0      	str	r0, [r4, #8]
 800ade0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ade4:	f7fd faa0 	bl	8008328 <memset>
 800ade8:	4620      	mov	r0, r4
 800adea:	bd70      	pop	{r4, r5, r6, pc}

0800adec <__sfp_lock_acquire>:
 800adec:	4801      	ldr	r0, [pc, #4]	; (800adf4 <__sfp_lock_acquire+0x8>)
 800adee:	f000 b8b3 	b.w	800af58 <__retarget_lock_acquire_recursive>
 800adf2:	bf00      	nop
 800adf4:	200009c9 	.word	0x200009c9

0800adf8 <__sfp_lock_release>:
 800adf8:	4801      	ldr	r0, [pc, #4]	; (800ae00 <__sfp_lock_release+0x8>)
 800adfa:	f000 b8ae 	b.w	800af5a <__retarget_lock_release_recursive>
 800adfe:	bf00      	nop
 800ae00:	200009c9 	.word	0x200009c9

0800ae04 <__sinit_lock_acquire>:
 800ae04:	4801      	ldr	r0, [pc, #4]	; (800ae0c <__sinit_lock_acquire+0x8>)
 800ae06:	f000 b8a7 	b.w	800af58 <__retarget_lock_acquire_recursive>
 800ae0a:	bf00      	nop
 800ae0c:	200009ca 	.word	0x200009ca

0800ae10 <__sinit_lock_release>:
 800ae10:	4801      	ldr	r0, [pc, #4]	; (800ae18 <__sinit_lock_release+0x8>)
 800ae12:	f000 b8a2 	b.w	800af5a <__retarget_lock_release_recursive>
 800ae16:	bf00      	nop
 800ae18:	200009ca 	.word	0x200009ca

0800ae1c <__sinit>:
 800ae1c:	b510      	push	{r4, lr}
 800ae1e:	4604      	mov	r4, r0
 800ae20:	f7ff fff0 	bl	800ae04 <__sinit_lock_acquire>
 800ae24:	69a3      	ldr	r3, [r4, #24]
 800ae26:	b11b      	cbz	r3, 800ae30 <__sinit+0x14>
 800ae28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae2c:	f7ff bff0 	b.w	800ae10 <__sinit_lock_release>
 800ae30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae34:	6523      	str	r3, [r4, #80]	; 0x50
 800ae36:	4b13      	ldr	r3, [pc, #76]	; (800ae84 <__sinit+0x68>)
 800ae38:	4a13      	ldr	r2, [pc, #76]	; (800ae88 <__sinit+0x6c>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae3e:	42a3      	cmp	r3, r4
 800ae40:	bf04      	itt	eq
 800ae42:	2301      	moveq	r3, #1
 800ae44:	61a3      	streq	r3, [r4, #24]
 800ae46:	4620      	mov	r0, r4
 800ae48:	f000 f820 	bl	800ae8c <__sfp>
 800ae4c:	6060      	str	r0, [r4, #4]
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f000 f81c 	bl	800ae8c <__sfp>
 800ae54:	60a0      	str	r0, [r4, #8]
 800ae56:	4620      	mov	r0, r4
 800ae58:	f000 f818 	bl	800ae8c <__sfp>
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	60e0      	str	r0, [r4, #12]
 800ae60:	2104      	movs	r1, #4
 800ae62:	6860      	ldr	r0, [r4, #4]
 800ae64:	f7ff ff82 	bl	800ad6c <std>
 800ae68:	68a0      	ldr	r0, [r4, #8]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	2109      	movs	r1, #9
 800ae6e:	f7ff ff7d 	bl	800ad6c <std>
 800ae72:	68e0      	ldr	r0, [r4, #12]
 800ae74:	2202      	movs	r2, #2
 800ae76:	2112      	movs	r1, #18
 800ae78:	f7ff ff78 	bl	800ad6c <std>
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	61a3      	str	r3, [r4, #24]
 800ae80:	e7d2      	b.n	800ae28 <__sinit+0xc>
 800ae82:	bf00      	nop
 800ae84:	0800b288 	.word	0x0800b288
 800ae88:	0800adb5 	.word	0x0800adb5

0800ae8c <__sfp>:
 800ae8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae8e:	4607      	mov	r7, r0
 800ae90:	f7ff ffac 	bl	800adec <__sfp_lock_acquire>
 800ae94:	4b1e      	ldr	r3, [pc, #120]	; (800af10 <__sfp+0x84>)
 800ae96:	681e      	ldr	r6, [r3, #0]
 800ae98:	69b3      	ldr	r3, [r6, #24]
 800ae9a:	b913      	cbnz	r3, 800aea2 <__sfp+0x16>
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	f7ff ffbd 	bl	800ae1c <__sinit>
 800aea2:	3648      	adds	r6, #72	; 0x48
 800aea4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	d503      	bpl.n	800aeb4 <__sfp+0x28>
 800aeac:	6833      	ldr	r3, [r6, #0]
 800aeae:	b30b      	cbz	r3, 800aef4 <__sfp+0x68>
 800aeb0:	6836      	ldr	r6, [r6, #0]
 800aeb2:	e7f7      	b.n	800aea4 <__sfp+0x18>
 800aeb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aeb8:	b9d5      	cbnz	r5, 800aef0 <__sfp+0x64>
 800aeba:	4b16      	ldr	r3, [pc, #88]	; (800af14 <__sfp+0x88>)
 800aebc:	60e3      	str	r3, [r4, #12]
 800aebe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aec2:	6665      	str	r5, [r4, #100]	; 0x64
 800aec4:	f000 f847 	bl	800af56 <__retarget_lock_init_recursive>
 800aec8:	f7ff ff96 	bl	800adf8 <__sfp_lock_release>
 800aecc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aed0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aed4:	6025      	str	r5, [r4, #0]
 800aed6:	61a5      	str	r5, [r4, #24]
 800aed8:	2208      	movs	r2, #8
 800aeda:	4629      	mov	r1, r5
 800aedc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aee0:	f7fd fa22 	bl	8008328 <memset>
 800aee4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aee8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aeec:	4620      	mov	r0, r4
 800aeee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aef0:	3468      	adds	r4, #104	; 0x68
 800aef2:	e7d9      	b.n	800aea8 <__sfp+0x1c>
 800aef4:	2104      	movs	r1, #4
 800aef6:	4638      	mov	r0, r7
 800aef8:	f7ff ff62 	bl	800adc0 <__sfmoreglue>
 800aefc:	4604      	mov	r4, r0
 800aefe:	6030      	str	r0, [r6, #0]
 800af00:	2800      	cmp	r0, #0
 800af02:	d1d5      	bne.n	800aeb0 <__sfp+0x24>
 800af04:	f7ff ff78 	bl	800adf8 <__sfp_lock_release>
 800af08:	230c      	movs	r3, #12
 800af0a:	603b      	str	r3, [r7, #0]
 800af0c:	e7ee      	b.n	800aeec <__sfp+0x60>
 800af0e:	bf00      	nop
 800af10:	0800b288 	.word	0x0800b288
 800af14:	ffff0001 	.word	0xffff0001

0800af18 <_fwalk_reent>:
 800af18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af1c:	4606      	mov	r6, r0
 800af1e:	4688      	mov	r8, r1
 800af20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af24:	2700      	movs	r7, #0
 800af26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af2a:	f1b9 0901 	subs.w	r9, r9, #1
 800af2e:	d505      	bpl.n	800af3c <_fwalk_reent+0x24>
 800af30:	6824      	ldr	r4, [r4, #0]
 800af32:	2c00      	cmp	r4, #0
 800af34:	d1f7      	bne.n	800af26 <_fwalk_reent+0xe>
 800af36:	4638      	mov	r0, r7
 800af38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af3c:	89ab      	ldrh	r3, [r5, #12]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d907      	bls.n	800af52 <_fwalk_reent+0x3a>
 800af42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af46:	3301      	adds	r3, #1
 800af48:	d003      	beq.n	800af52 <_fwalk_reent+0x3a>
 800af4a:	4629      	mov	r1, r5
 800af4c:	4630      	mov	r0, r6
 800af4e:	47c0      	blx	r8
 800af50:	4307      	orrs	r7, r0
 800af52:	3568      	adds	r5, #104	; 0x68
 800af54:	e7e9      	b.n	800af2a <_fwalk_reent+0x12>

0800af56 <__retarget_lock_init_recursive>:
 800af56:	4770      	bx	lr

0800af58 <__retarget_lock_acquire_recursive>:
 800af58:	4770      	bx	lr

0800af5a <__retarget_lock_release_recursive>:
 800af5a:	4770      	bx	lr

0800af5c <__swhatbuf_r>:
 800af5c:	b570      	push	{r4, r5, r6, lr}
 800af5e:	460e      	mov	r6, r1
 800af60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af64:	2900      	cmp	r1, #0
 800af66:	b096      	sub	sp, #88	; 0x58
 800af68:	4614      	mov	r4, r2
 800af6a:	461d      	mov	r5, r3
 800af6c:	da08      	bge.n	800af80 <__swhatbuf_r+0x24>
 800af6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800af72:	2200      	movs	r2, #0
 800af74:	602a      	str	r2, [r5, #0]
 800af76:	061a      	lsls	r2, r3, #24
 800af78:	d410      	bmi.n	800af9c <__swhatbuf_r+0x40>
 800af7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af7e:	e00e      	b.n	800af9e <__swhatbuf_r+0x42>
 800af80:	466a      	mov	r2, sp
 800af82:	f000 f903 	bl	800b18c <_fstat_r>
 800af86:	2800      	cmp	r0, #0
 800af88:	dbf1      	blt.n	800af6e <__swhatbuf_r+0x12>
 800af8a:	9a01      	ldr	r2, [sp, #4]
 800af8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af94:	425a      	negs	r2, r3
 800af96:	415a      	adcs	r2, r3
 800af98:	602a      	str	r2, [r5, #0]
 800af9a:	e7ee      	b.n	800af7a <__swhatbuf_r+0x1e>
 800af9c:	2340      	movs	r3, #64	; 0x40
 800af9e:	2000      	movs	r0, #0
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	b016      	add	sp, #88	; 0x58
 800afa4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800afa8 <__smakebuf_r>:
 800afa8:	898b      	ldrh	r3, [r1, #12]
 800afaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afac:	079d      	lsls	r5, r3, #30
 800afae:	4606      	mov	r6, r0
 800afb0:	460c      	mov	r4, r1
 800afb2:	d507      	bpl.n	800afc4 <__smakebuf_r+0x1c>
 800afb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	6123      	str	r3, [r4, #16]
 800afbc:	2301      	movs	r3, #1
 800afbe:	6163      	str	r3, [r4, #20]
 800afc0:	b002      	add	sp, #8
 800afc2:	bd70      	pop	{r4, r5, r6, pc}
 800afc4:	ab01      	add	r3, sp, #4
 800afc6:	466a      	mov	r2, sp
 800afc8:	f7ff ffc8 	bl	800af5c <__swhatbuf_r>
 800afcc:	9900      	ldr	r1, [sp, #0]
 800afce:	4605      	mov	r5, r0
 800afd0:	4630      	mov	r0, r6
 800afd2:	f7ff f963 	bl	800a29c <_malloc_r>
 800afd6:	b948      	cbnz	r0, 800afec <__smakebuf_r+0x44>
 800afd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afdc:	059a      	lsls	r2, r3, #22
 800afde:	d4ef      	bmi.n	800afc0 <__smakebuf_r+0x18>
 800afe0:	f023 0303 	bic.w	r3, r3, #3
 800afe4:	f043 0302 	orr.w	r3, r3, #2
 800afe8:	81a3      	strh	r3, [r4, #12]
 800afea:	e7e3      	b.n	800afb4 <__smakebuf_r+0xc>
 800afec:	4b0d      	ldr	r3, [pc, #52]	; (800b024 <__smakebuf_r+0x7c>)
 800afee:	62b3      	str	r3, [r6, #40]	; 0x28
 800aff0:	89a3      	ldrh	r3, [r4, #12]
 800aff2:	6020      	str	r0, [r4, #0]
 800aff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aff8:	81a3      	strh	r3, [r4, #12]
 800affa:	9b00      	ldr	r3, [sp, #0]
 800affc:	6163      	str	r3, [r4, #20]
 800affe:	9b01      	ldr	r3, [sp, #4]
 800b000:	6120      	str	r0, [r4, #16]
 800b002:	b15b      	cbz	r3, 800b01c <__smakebuf_r+0x74>
 800b004:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b008:	4630      	mov	r0, r6
 800b00a:	f000 f8d1 	bl	800b1b0 <_isatty_r>
 800b00e:	b128      	cbz	r0, 800b01c <__smakebuf_r+0x74>
 800b010:	89a3      	ldrh	r3, [r4, #12]
 800b012:	f023 0303 	bic.w	r3, r3, #3
 800b016:	f043 0301 	orr.w	r3, r3, #1
 800b01a:	81a3      	strh	r3, [r4, #12]
 800b01c:	89a0      	ldrh	r0, [r4, #12]
 800b01e:	4305      	orrs	r5, r0
 800b020:	81a5      	strh	r5, [r4, #12]
 800b022:	e7cd      	b.n	800afc0 <__smakebuf_r+0x18>
 800b024:	0800adb5 	.word	0x0800adb5

0800b028 <_malloc_usable_size_r>:
 800b028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b02c:	1f18      	subs	r0, r3, #4
 800b02e:	2b00      	cmp	r3, #0
 800b030:	bfbc      	itt	lt
 800b032:	580b      	ldrlt	r3, [r1, r0]
 800b034:	18c0      	addlt	r0, r0, r3
 800b036:	4770      	bx	lr

0800b038 <_raise_r>:
 800b038:	291f      	cmp	r1, #31
 800b03a:	b538      	push	{r3, r4, r5, lr}
 800b03c:	4604      	mov	r4, r0
 800b03e:	460d      	mov	r5, r1
 800b040:	d904      	bls.n	800b04c <_raise_r+0x14>
 800b042:	2316      	movs	r3, #22
 800b044:	6003      	str	r3, [r0, #0]
 800b046:	f04f 30ff 	mov.w	r0, #4294967295
 800b04a:	bd38      	pop	{r3, r4, r5, pc}
 800b04c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b04e:	b112      	cbz	r2, 800b056 <_raise_r+0x1e>
 800b050:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b054:	b94b      	cbnz	r3, 800b06a <_raise_r+0x32>
 800b056:	4620      	mov	r0, r4
 800b058:	f000 f830 	bl	800b0bc <_getpid_r>
 800b05c:	462a      	mov	r2, r5
 800b05e:	4601      	mov	r1, r0
 800b060:	4620      	mov	r0, r4
 800b062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b066:	f000 b817 	b.w	800b098 <_kill_r>
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d00a      	beq.n	800b084 <_raise_r+0x4c>
 800b06e:	1c59      	adds	r1, r3, #1
 800b070:	d103      	bne.n	800b07a <_raise_r+0x42>
 800b072:	2316      	movs	r3, #22
 800b074:	6003      	str	r3, [r0, #0]
 800b076:	2001      	movs	r0, #1
 800b078:	e7e7      	b.n	800b04a <_raise_r+0x12>
 800b07a:	2400      	movs	r4, #0
 800b07c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b080:	4628      	mov	r0, r5
 800b082:	4798      	blx	r3
 800b084:	2000      	movs	r0, #0
 800b086:	e7e0      	b.n	800b04a <_raise_r+0x12>

0800b088 <raise>:
 800b088:	4b02      	ldr	r3, [pc, #8]	; (800b094 <raise+0xc>)
 800b08a:	4601      	mov	r1, r0
 800b08c:	6818      	ldr	r0, [r3, #0]
 800b08e:	f7ff bfd3 	b.w	800b038 <_raise_r>
 800b092:	bf00      	nop
 800b094:	20000028 	.word	0x20000028

0800b098 <_kill_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	4d07      	ldr	r5, [pc, #28]	; (800b0b8 <_kill_r+0x20>)
 800b09c:	2300      	movs	r3, #0
 800b09e:	4604      	mov	r4, r0
 800b0a0:	4608      	mov	r0, r1
 800b0a2:	4611      	mov	r1, r2
 800b0a4:	602b      	str	r3, [r5, #0]
 800b0a6:	f7f7 fb03 	bl	80026b0 <_kill>
 800b0aa:	1c43      	adds	r3, r0, #1
 800b0ac:	d102      	bne.n	800b0b4 <_kill_r+0x1c>
 800b0ae:	682b      	ldr	r3, [r5, #0]
 800b0b0:	b103      	cbz	r3, 800b0b4 <_kill_r+0x1c>
 800b0b2:	6023      	str	r3, [r4, #0]
 800b0b4:	bd38      	pop	{r3, r4, r5, pc}
 800b0b6:	bf00      	nop
 800b0b8:	200009c4 	.word	0x200009c4

0800b0bc <_getpid_r>:
 800b0bc:	f7f7 baf0 	b.w	80026a0 <_getpid>

0800b0c0 <__sread>:
 800b0c0:	b510      	push	{r4, lr}
 800b0c2:	460c      	mov	r4, r1
 800b0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0c8:	f000 f894 	bl	800b1f4 <_read_r>
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	bfab      	itete	ge
 800b0d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b0d2:	89a3      	ldrhlt	r3, [r4, #12]
 800b0d4:	181b      	addge	r3, r3, r0
 800b0d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b0da:	bfac      	ite	ge
 800b0dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b0de:	81a3      	strhlt	r3, [r4, #12]
 800b0e0:	bd10      	pop	{r4, pc}

0800b0e2 <__swrite>:
 800b0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e6:	461f      	mov	r7, r3
 800b0e8:	898b      	ldrh	r3, [r1, #12]
 800b0ea:	05db      	lsls	r3, r3, #23
 800b0ec:	4605      	mov	r5, r0
 800b0ee:	460c      	mov	r4, r1
 800b0f0:	4616      	mov	r6, r2
 800b0f2:	d505      	bpl.n	800b100 <__swrite+0x1e>
 800b0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0f8:	2302      	movs	r3, #2
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f000 f868 	bl	800b1d0 <_lseek_r>
 800b100:	89a3      	ldrh	r3, [r4, #12]
 800b102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b106:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b10a:	81a3      	strh	r3, [r4, #12]
 800b10c:	4632      	mov	r2, r6
 800b10e:	463b      	mov	r3, r7
 800b110:	4628      	mov	r0, r5
 800b112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b116:	f000 b817 	b.w	800b148 <_write_r>

0800b11a <__sseek>:
 800b11a:	b510      	push	{r4, lr}
 800b11c:	460c      	mov	r4, r1
 800b11e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b122:	f000 f855 	bl	800b1d0 <_lseek_r>
 800b126:	1c43      	adds	r3, r0, #1
 800b128:	89a3      	ldrh	r3, [r4, #12]
 800b12a:	bf15      	itete	ne
 800b12c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b12e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b132:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b136:	81a3      	strheq	r3, [r4, #12]
 800b138:	bf18      	it	ne
 800b13a:	81a3      	strhne	r3, [r4, #12]
 800b13c:	bd10      	pop	{r4, pc}

0800b13e <__sclose>:
 800b13e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b142:	f000 b813 	b.w	800b16c <_close_r>
	...

0800b148 <_write_r>:
 800b148:	b538      	push	{r3, r4, r5, lr}
 800b14a:	4d07      	ldr	r5, [pc, #28]	; (800b168 <_write_r+0x20>)
 800b14c:	4604      	mov	r4, r0
 800b14e:	4608      	mov	r0, r1
 800b150:	4611      	mov	r1, r2
 800b152:	2200      	movs	r2, #0
 800b154:	602a      	str	r2, [r5, #0]
 800b156:	461a      	mov	r2, r3
 800b158:	f7f7 fae1 	bl	800271e <_write>
 800b15c:	1c43      	adds	r3, r0, #1
 800b15e:	d102      	bne.n	800b166 <_write_r+0x1e>
 800b160:	682b      	ldr	r3, [r5, #0]
 800b162:	b103      	cbz	r3, 800b166 <_write_r+0x1e>
 800b164:	6023      	str	r3, [r4, #0]
 800b166:	bd38      	pop	{r3, r4, r5, pc}
 800b168:	200009c4 	.word	0x200009c4

0800b16c <_close_r>:
 800b16c:	b538      	push	{r3, r4, r5, lr}
 800b16e:	4d06      	ldr	r5, [pc, #24]	; (800b188 <_close_r+0x1c>)
 800b170:	2300      	movs	r3, #0
 800b172:	4604      	mov	r4, r0
 800b174:	4608      	mov	r0, r1
 800b176:	602b      	str	r3, [r5, #0]
 800b178:	f7f7 faed 	bl	8002756 <_close>
 800b17c:	1c43      	adds	r3, r0, #1
 800b17e:	d102      	bne.n	800b186 <_close_r+0x1a>
 800b180:	682b      	ldr	r3, [r5, #0]
 800b182:	b103      	cbz	r3, 800b186 <_close_r+0x1a>
 800b184:	6023      	str	r3, [r4, #0]
 800b186:	bd38      	pop	{r3, r4, r5, pc}
 800b188:	200009c4 	.word	0x200009c4

0800b18c <_fstat_r>:
 800b18c:	b538      	push	{r3, r4, r5, lr}
 800b18e:	4d07      	ldr	r5, [pc, #28]	; (800b1ac <_fstat_r+0x20>)
 800b190:	2300      	movs	r3, #0
 800b192:	4604      	mov	r4, r0
 800b194:	4608      	mov	r0, r1
 800b196:	4611      	mov	r1, r2
 800b198:	602b      	str	r3, [r5, #0]
 800b19a:	f7f7 fae8 	bl	800276e <_fstat>
 800b19e:	1c43      	adds	r3, r0, #1
 800b1a0:	d102      	bne.n	800b1a8 <_fstat_r+0x1c>
 800b1a2:	682b      	ldr	r3, [r5, #0]
 800b1a4:	b103      	cbz	r3, 800b1a8 <_fstat_r+0x1c>
 800b1a6:	6023      	str	r3, [r4, #0]
 800b1a8:	bd38      	pop	{r3, r4, r5, pc}
 800b1aa:	bf00      	nop
 800b1ac:	200009c4 	.word	0x200009c4

0800b1b0 <_isatty_r>:
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	4d06      	ldr	r5, [pc, #24]	; (800b1cc <_isatty_r+0x1c>)
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	4608      	mov	r0, r1
 800b1ba:	602b      	str	r3, [r5, #0]
 800b1bc:	f7f7 fae7 	bl	800278e <_isatty>
 800b1c0:	1c43      	adds	r3, r0, #1
 800b1c2:	d102      	bne.n	800b1ca <_isatty_r+0x1a>
 800b1c4:	682b      	ldr	r3, [r5, #0]
 800b1c6:	b103      	cbz	r3, 800b1ca <_isatty_r+0x1a>
 800b1c8:	6023      	str	r3, [r4, #0]
 800b1ca:	bd38      	pop	{r3, r4, r5, pc}
 800b1cc:	200009c4 	.word	0x200009c4

0800b1d0 <_lseek_r>:
 800b1d0:	b538      	push	{r3, r4, r5, lr}
 800b1d2:	4d07      	ldr	r5, [pc, #28]	; (800b1f0 <_lseek_r+0x20>)
 800b1d4:	4604      	mov	r4, r0
 800b1d6:	4608      	mov	r0, r1
 800b1d8:	4611      	mov	r1, r2
 800b1da:	2200      	movs	r2, #0
 800b1dc:	602a      	str	r2, [r5, #0]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	f7f7 fae0 	bl	80027a4 <_lseek>
 800b1e4:	1c43      	adds	r3, r0, #1
 800b1e6:	d102      	bne.n	800b1ee <_lseek_r+0x1e>
 800b1e8:	682b      	ldr	r3, [r5, #0]
 800b1ea:	b103      	cbz	r3, 800b1ee <_lseek_r+0x1e>
 800b1ec:	6023      	str	r3, [r4, #0]
 800b1ee:	bd38      	pop	{r3, r4, r5, pc}
 800b1f0:	200009c4 	.word	0x200009c4

0800b1f4 <_read_r>:
 800b1f4:	b538      	push	{r3, r4, r5, lr}
 800b1f6:	4d07      	ldr	r5, [pc, #28]	; (800b214 <_read_r+0x20>)
 800b1f8:	4604      	mov	r4, r0
 800b1fa:	4608      	mov	r0, r1
 800b1fc:	4611      	mov	r1, r2
 800b1fe:	2200      	movs	r2, #0
 800b200:	602a      	str	r2, [r5, #0]
 800b202:	461a      	mov	r2, r3
 800b204:	f7f7 fa6e 	bl	80026e4 <_read>
 800b208:	1c43      	adds	r3, r0, #1
 800b20a:	d102      	bne.n	800b212 <_read_r+0x1e>
 800b20c:	682b      	ldr	r3, [r5, #0]
 800b20e:	b103      	cbz	r3, 800b212 <_read_r+0x1e>
 800b210:	6023      	str	r3, [r4, #0]
 800b212:	bd38      	pop	{r3, r4, r5, pc}
 800b214:	200009c4 	.word	0x200009c4

0800b218 <_init>:
 800b218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b21a:	bf00      	nop
 800b21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b21e:	bc08      	pop	{r3}
 800b220:	469e      	mov	lr, r3
 800b222:	4770      	bx	lr

0800b224 <_fini>:
 800b224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b226:	bf00      	nop
 800b228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b22a:	bc08      	pop	{r3}
 800b22c:	469e      	mov	lr, r3
 800b22e:	4770      	bx	lr
